package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

// SwaggerJSON embedded version of the swagger document used at generation time
var SwaggerJSON json.RawMessage

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "An OpenAPI for EVE Online",
    "title": "EVE Swagger Interface",
    "version": "0.5.0"
  },
  "host": "esi.tech.ccp.is",
  "basePath": "/latest",
  "paths": {
    "/alliances/": {
      "get": {
        "description": "List all active player alliances\n\n---\n\nAlternate route: ` + "`" + `/v1/alliances/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/alliances/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/alliances/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Alliance"
        ],
        "summary": "List all alliances",
        "operationId": "get_alliances",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Alliance IDs",
            "schema": {
              "description": "200 ok array",
              "type": "array",
              "title": "get_alliances_ok",
              "maxItems": 5000,
              "items": {
                "description": "200 ok integer",
                "type": "integer",
                "format": "int32",
                "title": "get_alliances_200_ok",
                "minimum": 0,
                "uniqueItems": true
              }
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                99000001,
                99000002
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getAlliancesInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/alliances/names/": {
      "get": {
        "description": "Resolve a set of alliance IDs to alliance names\n\n---\n\nAlternate route: ` + "`" + `/v1/alliances/names/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/alliances/names/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/alliances/names/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Alliance"
        ],
        "summary": "Get alliance names",
        "operationId": "get_alliances_names",
        "parameters": [
          {
            "maxItems": 100,
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A comma separated list of alliance IDs",
            "name": "alliance_ids",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "List of id/name associations",
            "schema": {
              "$ref": "#/definitions/getAlliancesNamesOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "alliance_id": 1000171,
                  "alliance_name": "Republic University"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getAlliancesNamesInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/alliances/{alliance_id}/": {
      "get": {
        "description": "Public information about an alliance\n\n---\n\nAlternate route: ` + "`" + `/v2/alliances/{alliance_id}/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Alliance"
        ],
        "summary": "Get alliance information",
        "operationId": "get_alliances_alliance_id",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An Eve alliance ID",
            "name": "alliance_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Public data about an alliance",
            "schema": {
              "$ref": "#/definitions/getAlliancesAllianceIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "alliance_name": "C C P Alliance",
                "date_founded": "2016-06-26T21:00:00Z",
                "executor_corp": 98356193,
                "ticker": "\u003cC C P\u003e"
              }
            }
          },
          "404": {
            "description": "Alliance not found",
            "schema": {
              "$ref": "#/definitions/getAlliancesAllianceIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Alliance not found"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getAlliancesAllianceIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "v2"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/alliances/{alliance_id}/corporations/": {
      "get": {
        "description": "List all current member corporations of an alliance\n\n---\n\nAlternate route: ` + "`" + `/v1/alliances/{alliance_id}/corporations/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/alliances/{alliance_id}/corporations/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/alliances/{alliance_id}/corporations/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Alliance"
        ],
        "summary": "List alliance's corporations",
        "operationId": "get_alliances_alliance_id_corporations",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE alliance ID",
            "name": "alliance_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "List of corporation IDs",
            "schema": {
              "description": "200 ok array",
              "type": "array",
              "title": "get_alliances_alliance_id_corporations_ok",
              "maxItems": 1000,
              "items": {
                "description": "200 ok integer",
                "type": "integer",
                "format": "int32",
                "title": "get_alliances_alliance_id_corporations_200_ok",
                "minimum": 0,
                "uniqueItems": true
              }
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                98000001
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getAlliancesAllianceIdCorporationsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/alliances/{alliance_id}/icons/": {
      "get": {
        "description": "Get the icon urls for a alliance\n\n---\n\nAlternate route: ` + "`" + `/v1/alliances/{alliance_id}/icons/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/alliances/{alliance_id}/icons/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/alliances/{alliance_id}/icons/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Alliance"
        ],
        "summary": "Get alliance icon",
        "operationId": "get_alliances_alliance_id_icons",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE alliance ID",
            "name": "alliance_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Urls for icons for the given alliance id and server",
            "schema": {
              "$ref": "#/definitions/getAlliancesAllianceIdIconsOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "px128x128": "https://imageserver.eveonline.com/Alliance/503818424_128.png",
                "px64x64": "https://imageserver.eveonline.com/Alliance/503818424_64.png"
              }
            }
          },
          "404": {
            "description": "No image server for this datasource",
            "schema": {
              "$ref": "#/definitions/getAlliancesAllianceIdIconsNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "No image server for this datasource"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getAlliancesAllianceIdIconsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/characters/affiliation/": {
      "post": {
        "description": "Bulk lookup of character IDs to corporation, alliance and faction\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/affiliation/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/affiliation/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/affiliation/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Character"
        ],
        "summary": "Character affiliation",
        "operationId": "post_characters_affiliation",
        "parameters": [
          {
            "description": "The character IDs to fetch affiliations for",
            "name": "characters",
            "in": "body",
            "required": true,
            "schema": {
              "description": "characters array",
              "type": "array",
              "title": "post_characters_affiliation_characters",
              "maxItems": 1000,
              "minItems": 1,
              "uniqueItems": true,
              "items": {
                "description": "character integer",
                "type": "integer",
                "format": "int32",
                "title": "post_characters_affiliation_character"
              }
            }
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Character corporation, alliance and faction IDs",
            "schema": {
              "$ref": "#/definitions/postCharactersAffiliationOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "alliance_id": 434243723,
                  "character_id": 95538921,
                  "corporation_id": 109299958
                }
              ]
            }
          },
          "422": {
            "description": "No valid character IDs found",
            "schema": {
              "$ref": "#/definitions/postCharactersAffiliationUnprocessableEntityBody"
            },
            "examples": {
              "application/json": {
                "error": "Unprocessable entity message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/postCharactersAffiliationInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/characters/names/": {
      "get": {
        "description": "Resolve a set of character IDs to character names\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/names/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/names/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/names/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Character"
        ],
        "summary": "Get character names",
        "operationId": "get_characters_names",
        "parameters": [
          {
            "maxItems": 1000,
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A comma separated list of character IDs",
            "name": "character_ids",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "List of id/name associations",
            "schema": {
              "$ref": "#/definitions/getCharactersNamesOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "character_id": 95465499,
                  "character_name": "CCP Bartender"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersNamesInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/characters/{character_id}/": {
      "get": {
        "description": "Public information about a character\n\n---\n\nAlternate route: ` + "`" + `/v4/characters/{character_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Character"
        ],
        "summary": "Get character's public information",
        "operationId": "get_characters_character_id",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Public data for the given character",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "ancestry_id": 19,
                "birthday": "2015-03-24T11:37:00Z",
                "bloodline_id": 3,
                "corporation_id": 109299958,
                "description": "",
                "gender": "male",
                "name": "CCP Bartender",
                "race_id": 2
              }
            }
          },
          "404": {
            "description": "Character not found",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "v4"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/characters/{character_id}/agents_research/": {
      "get": {
        "description": "Return a list of agents research information for a character. The formula for finding the current research points with an agent is: currentPoints = remainderPoints + pointsPerDay * days(currentTime - researchStartDate)\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/agents_research/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/agents_research/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/agents_research/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Character"
        ],
        "summary": "Get agents research",
        "operationId": "get_characters_character_id_agents_research",
        "security": [
          {
            "evesso": [
              "esi-characters.read_agents_research.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "ID for a character",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of agents research information",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdAgentsResearchOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "agent_id": 3009358,
                  "points_per_day": 53.5346162146776,
                  "remainder_points": 53604.0634303189,
                  "skill_type_id": 11450,
                  "started_at": "2017-03-23T14:47:00Z"
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdAgentsResearchForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-characters.read_agents_research.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdAgentsResearchInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/characters/{character_id}/assets/": {
      "get": {
        "description": "Return a list of the characters assets\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/assets/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/assets/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/assets/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Assets"
        ],
        "summary": "Get character assets",
        "operationId": "get_characters_character_id_assets",
        "security": [
          {
            "evesso": [
              "esi-assets.read_assets.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Character id of the target character",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A flat list of the users assets",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdAssetsOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "is_singleton": true,
                  "item_id": 1000000016835,
                  "location_flag": "Hangar",
                  "location_id": 60002959,
                  "location_type": "station",
                  "type_id": 3516
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdAssetsForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-assets.read_assets.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdAssetsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/characters/{character_id}/blueprints/": {
      "get": {
        "description": "Return a list of blueprints the character has\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/blueprints/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/blueprints/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/blueprints/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Character"
        ],
        "summary": "Get blueprints",
        "operationId": "get_characters_character_id_blueprints",
        "security": [
          {
            "evesso": [
              "esi-characters.read_blueprints.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "ID for a character",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of blueprints",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdBlueprintsOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "item_id": 1000000010495,
                  "location_flag": "Hangar",
                  "location_id": 60014719,
                  "material_efficiency": 0,
                  "quantity": 1,
                  "runs": -1,
                  "time_efficiency": 0,
                  "type_id": 691
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdBlueprintsForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-characters.read_blueprints.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdBlueprintsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/characters/{character_id}/bookmarks/": {
      "get": {
        "description": "List your character's personal bookmarks\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/bookmarks/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/bookmarks/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/bookmarks/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Bookmarks"
        ],
        "summary": "List bookmarks",
        "operationId": "get_characters_character_id_bookmarks",
        "security": [
          {
            "evesso": [
              "esi-bookmarks.read_character_bookmarks.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of bookmarks",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdBookmarksOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "bookmark_id": 32,
                  "create_date": "2016-08-09T11:57:47Z",
                  "creator_id": 90000001,
                  "folder_id": 5,
                  "memo": "aoeu ( Citadel )",
                  "note": "",
                  "owner_id": 90000001,
                  "target": {
                    "item": {
                      "item_id": 1000000012668,
                      "type_id": 35832
                    },
                    "location_id": 30000005
                  }
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdBookmarksForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-bookmarks.read_character_bookmarks.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdBookmarksInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/characters/{character_id}/bookmarks/folders/": {
      "get": {
        "description": "List your character's personal bookmark folders\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/bookmarks/folders/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/bookmarks/folders/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/bookmarks/folders/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Bookmarks"
        ],
        "summary": "List bookmark folders",
        "operationId": "get_characters_character_id_bookmarks_folders",
        "security": [
          {
            "evesso": [
              "esi-bookmarks.read_character_bookmarks.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "List of bookmark folders",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdBookmarksFoldersOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "folder_id": 5,
                  "name": "Icecream",
                  "owner_id": 90000001
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdBookmarksFoldersForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-bookmarks.read_character_bookmarks.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdBookmarksFoldersInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/characters/{character_id}/calendar/": {
      "get": {
        "description": "Get 50 event summaries from the calendar. If no event ID is given, the resource will return the next 50 chronological event summaries from now. If an event ID is specified, it will return the next 50 chronological event summaries from after that event.\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/calendar/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/calendar/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/calendar/` + "`" + `\n\n\n---\n\nThis route is cached for up to 5 seconds",
        "tags": [
          "Calendar"
        ],
        "summary": "List calendar event summaries",
        "operationId": "get_characters_character_id_calendar",
        "security": [
          {
            "evesso": [
              "esi-calendar.read_calendar_events.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "The character to retrieve events from",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "The event ID to retrieve events from",
            "name": "from_event",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of event summaries",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdCalendarOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "event_date": "2016-06-26T20:00:00Z",
                  "event_id": 1386435,
                  "event_response": "accepted",
                  "importance": 0,
                  "title": "o7 The EVE Online Show"
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdCalendarForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-calendar.read_calendar_events.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdCalendarInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 5
      }
    },
    "/characters/{character_id}/calendar/{event_id}/": {
      "get": {
        "description": "Get all the information for a specific event\n\n---\n\nAlternate route: ` + "`" + `/v3/characters/{character_id}/calendar/{event_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/calendar/{event_id}/` + "`" + `\n\n\n---\n\nThis route is cached for up to 5 seconds",
        "tags": [
          "Calendar"
        ],
        "summary": "Get an event",
        "operationId": "get_characters_character_id_calendar_event_id",
        "security": [
          {
            "evesso": [
              "esi-calendar.read_calendar_events.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "The character id requesting the event",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "The id of the event requested",
            "name": "event_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Full details of a specific event",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdCalendarEventIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "date": "2016-06-26T21:00:00Z",
                "duration": 60,
                "event_id": 1386435,
                "importance": 1,
                "owner_id": 1,
                "owner_name": "EVE System",
                "owner_type": "eve_server",
                "response": "Undecided",
                "text": "o7: The EVE Online Show features latest developer news, fast paced action, community overviews and a lot more with CCP Guard and CCP Mimic. Join the thrilling o7 live broadcast at 20:00 EVE time (=UTC) on \u003ca href=\"http://www.twitch.tv/ccp\"\u003eEVE TV\u003c/a\u003e. Don't miss it!",
                "title": "o7 The EVE Online Show"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdCalendarEventIdForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-calendar.read_calendar_events.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdCalendarEventIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "v3"
        ],
        "x-cached-seconds": 5
      },
      "put": {
        "description": "Set your response status to an event\n\n---\n\nAlternate route: ` + "`" + `/v3/characters/{character_id}/calendar/{event_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/calendar/{event_id}/` + "`" + `\n",
        "tags": [
          "Calendar"
        ],
        "summary": "Respond to an event",
        "operationId": "put_characters_character_id_calendar_event_id",
        "security": [
          {
            "evesso": [
              "esi-calendar.respond_calendar_events.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "The character ID requesting the event",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "The ID of the event requested",
            "name": "event_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The response value to set, overriding current value.",
            "name": "response",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/putCharactersCharacterIdCalendarEventIdParamsBody"
            }
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Event updated"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/putCharactersCharacterIdCalendarEventIdForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-calendar.respond_calendar_events.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/putCharactersCharacterIdCalendarEventIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "v3"
        ]
      }
    },
    "/characters/{character_id}/chat_channels/": {
      "get": {
        "description": "Return chat channels that a character is the owner or an operator of\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/chat_channels/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/chat_channels/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/chat_channels/` + "`" + `\n\n\n---\n\nThis route is cached for up to 300 seconds",
        "tags": [
          "Character"
        ],
        "summary": "Get chat channels",
        "operationId": "get_characters_character_id_chat_channels",
        "security": [
          {
            "evesso": [
              "esi-characters.read_chat_channels.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "ID for a character",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of chat channels",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdChatChannelsOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "allowed": [],
                  "blocked": [],
                  "channel_id": -69329950,
                  "comparison_key": "players'haven",
                  "has_password": false,
                  "motd": "\u003cb\u003eFeed pineapples to the cats!\u003c/b\u003e",
                  "muted": [],
                  "name": "Players' Haven",
                  "operators": [],
                  "owner_id": 95578451
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdChatChannelsForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-characters.read_chat_channels.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdChatChannelsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 300
      }
    },
    "/characters/{character_id}/clones/": {
      "get": {
        "description": "A list of the character's clones\n\n---\n\nAlternate route: ` + "`" + `/v2/characters/{character_id}/clones/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/clones/` + "`" + `\n\n\n---\n\nThis route is cached for up to 120 seconds",
        "tags": [
          "Clones"
        ],
        "summary": "Get clones",
        "operationId": "get_characters_character_id_clones",
        "security": [
          {
            "evesso": [
              "esi-clones.read_clones.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Clone information for the given character",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdClonesOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "home_location": {
                  "location_id": 1021348135816,
                  "location_type": "structure"
                },
                "jump_clones": [
                  {
                    "implants": [
                      22118
                    ],
                    "location_id": 60003463,
                    "location_type": "station"
                  },
                  {
                    "implants": [],
                    "location_id": 1021348135816,
                    "location_type": "structure"
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdClonesForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-clones.read_clones.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdClonesInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "v2"
        ],
        "x-cached-seconds": 120
      }
    },
    "/characters/{character_id}/contacts/": {
      "get": {
        "description": "Return contacts of a character\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/contacts/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/contacts/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/contacts/` + "`" + `\n\n\n---\n\nThis route is cached for up to 300 seconds",
        "tags": [
          "Contacts"
        ],
        "summary": "Get contacts",
        "operationId": "get_characters_character_id_contacts",
        "security": [
          {
            "evesso": [
              "esi-characters.read_contacts.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "ID for a character",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "default": 1,
            "description": "page integer",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of contacts",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdContactsOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "contact_id": 123,
                  "contact_type": "character",
                  "is_blocked": false,
                  "is_watched": true,
                  "standing": 10
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdContactsForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-characters.read_contacts.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdContactsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 300
      },
      "put": {
        "description": "Bulk edit contacts with same settings\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/contacts/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/contacts/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/contacts/` + "`" + `\n",
        "tags": [
          "Contacts"
        ],
        "summary": "Edit contacts",
        "operationId": "put_characters_character_id_contacts",
        "security": [
          {
            "evesso": [
              "esi-characters.write_contacts.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "ID for a character",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "description": "A list of contacts to edit",
            "name": "contact_ids",
            "in": "body",
            "required": true,
            "schema": {
              "description": "contact_ids array",
              "type": "array",
              "title": "put_characters_character_id_contacts_contact_ids",
              "maxItems": 100,
              "minItems": 1,
              "items": {
                "description": "ID of the contact to edit",
                "type": "integer",
                "format": "int32",
                "title": "put_characters_character_id_contacts_contact_id"
              }
            }
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "Add a custom label to the contact, use 0 for clearing label",
            "name": "label_id",
            "in": "query"
          },
          {
            "maximum": 10,
            "minimum": -10,
            "type": "number",
            "format": "float",
            "description": "Standing for the contact",
            "name": "standing",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Whether the contact should be watched, note this is only effective on characters",
            "name": "watched",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Contacts updated"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/putCharactersCharacterIdContactsForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-characters.write_contacts.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/putCharactersCharacterIdContactsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      },
      "post": {
        "description": "Bulk add contacts with same settings\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/contacts/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/contacts/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/contacts/` + "`" + `\n",
        "tags": [
          "Contacts"
        ],
        "summary": "Add contacts",
        "operationId": "post_characters_character_id_contacts",
        "security": [
          {
            "evesso": [
              "esi-characters.write_contacts.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "ID for a character",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "description": "A list of contacts to add",
            "name": "contact_ids",
            "in": "body",
            "required": true,
            "schema": {
              "description": "contact_ids array",
              "type": "array",
              "title": "post_characters_character_id_contacts_contact_ids",
              "maxItems": 100,
              "minItems": 1,
              "items": {
                "description": "ID of the contact to add",
                "type": "integer",
                "format": "int32",
                "title": "post_characters_character_id_contacts_contact_id"
              }
            }
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "Add a custom label to the new contact",
            "name": "label_id",
            "in": "query"
          },
          {
            "maximum": 10,
            "minimum": -10,
            "type": "number",
            "format": "float",
            "description": "Standing for the new contact",
            "name": "standing",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Whether the new contact should be watched, note this is only effective on characters",
            "name": "watched",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "201": {
            "description": "A list of contact ids that successfully created",
            "schema": {
              "description": "201 created array",
              "type": "array",
              "title": "post_characters_character_id_contacts_created",
              "maxItems": 100,
              "items": {
                "description": "201 created integer",
                "type": "integer",
                "format": "int32",
                "title": "post_characters_character_id_contacts_201_created"
              }
            },
            "examples": {
              "application/json": [
                123,
                456
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/postCharactersCharacterIdContactsForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-characters.write_contacts.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/postCharactersCharacterIdContactsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      },
      "delete": {
        "description": "Bulk delete contacts\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/contacts/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/contacts/` + "`" + `\n",
        "tags": [
          "Contacts"
        ],
        "summary": "Delete contacts",
        "operationId": "delete_characters_character_id_contacts",
        "security": [
          {
            "evesso": [
              "esi-characters.write_contacts.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "ID for a character",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "description": "A list of contacts to delete",
            "name": "contact_ids",
            "in": "body",
            "required": true,
            "schema": {
              "description": "contact_ids array",
              "type": "array",
              "title": "delete_characters_character_id_contacts_contact_ids",
              "maxItems": 100,
              "minItems": 1,
              "items": {
                "description": "ID of the contact to delete",
                "type": "integer",
                "format": "int32",
                "title": "delete_characters_character_id_contacts_contact_id"
              }
            }
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Contacts deleted"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/deleteCharactersCharacterIdContactsForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-characters.write_contacts.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/deleteCharactersCharacterIdContactsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "legacy",
          "v1"
        ]
      }
    },
    "/characters/{character_id}/contacts/labels/": {
      "get": {
        "description": "Return custom labels for contacts the character defined\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/contacts/labels/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/contacts/labels/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/contacts/labels/` + "`" + `\n\n\n---\n\nThis route is cached for up to 300 seconds",
        "tags": [
          "Contacts"
        ],
        "summary": "Get contact labels",
        "operationId": "get_characters_character_id_contacts_labels",
        "security": [
          {
            "evesso": [
              "esi-characters.read_contacts.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "ID for a character",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of contact labels",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdContactsLabelsOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "label_id": 123,
                  "label_name": "Friends"
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdContactsLabelsForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-characters.read_contacts.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdContactsLabelsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 300
      }
    },
    "/characters/{character_id}/corporationhistory/": {
      "get": {
        "description": "Get a list of all the corporations a character has been a member of\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/corporationhistory/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/corporationhistory/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/corporationhistory/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Character"
        ],
        "summary": "Get corporation history",
        "operationId": "get_characters_character_id_corporationhistory",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Corporation history for the given character",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdCorporationhistoryOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "corporation_id": 90000001,
                  "is_deleted": false,
                  "record_id": 500,
                  "start_date": "2016-06-26T20:00:00Z"
                },
                {
                  "corporation_id": 90000002,
                  "is_deleted": false,
                  "record_id": 501,
                  "start_date": "2016-07-26T20:00:00Z"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdCorporationhistoryInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/characters/{character_id}/cspa/": {
      "post": {
        "description": "Takes a source character ID in the url and a set of target character ID's in the body, returns a CSPA charge cost\n\n---\n\nAlternate route: ` + "`" + `/v3/characters/{character_id}/cspa/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/cspa/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/cspa/` + "`" + `\n",
        "tags": [
          "Character"
        ],
        "summary": "Calculate a CSPA charge cost",
        "operationId": "post_characters_character_id_cspa",
        "security": [
          {
            "evesso": [
              "esi-characters.read_contacts.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "description": "The target characters to calculate the charge for",
            "name": "characters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postCharactersCharacterIdCspaParamsBody"
            }
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "201": {
            "description": "Aggregate cost of sending a mail from the source character to the target characters, in ISK hundredths",
            "schema": {
              "$ref": "#/definitions/postCharactersCharacterIdCspaCreatedBody"
            },
            "examples": {
              "application/json": {
                "cost": 295000
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/postCharactersCharacterIdCspaForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-characters.read_contacts.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/postCharactersCharacterIdCspaInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v3"
        ]
      }
    },
    "/characters/{character_id}/fittings/": {
      "get": {
        "description": "Return fittings of a character\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/fittings/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/fittings/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/fittings/` + "`" + `\n\n\n---\n\nThis route is cached for up to 300 seconds",
        "tags": [
          "Fittings"
        ],
        "summary": "Get fittings",
        "operationId": "get_characters_character_id_fittings",
        "security": [
          {
            "evesso": [
              "esi-fittings.read_fittings.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "ID for a character",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of fittings",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdFittingsOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "description": "Awesome Vindi fitting",
                  "fitting_id": 1,
                  "items": [
                    {
                      "flag": 12,
                      "quantity": 1,
                      "type_id": 1234
                    }
                  ],
                  "name": "Best Vindicator",
                  "ship_type_id": 123
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdFittingsForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-fittings.read_fittings.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdFittingsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 300
      },
      "post": {
        "description": "Save a new fitting for a character\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/fittings/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/fittings/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/fittings/` + "`" + `\n",
        "tags": [
          "Fittings"
        ],
        "summary": "Create fitting",
        "operationId": "post_characters_character_id_fittings",
        "security": [
          {
            "evesso": [
              "esi-fittings.write_fittings.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "ID for a character",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "description": "Details about the new fitting",
            "name": "fitting",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/postCharactersCharacterIdFittingsParamsBody"
            }
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "201": {
            "description": "A list of fittings",
            "schema": {
              "$ref": "#/definitions/postCharactersCharacterIdFittingsCreatedBody"
            },
            "examples": {
              "application/json": {
                "fitting_id": 2
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/postCharactersCharacterIdFittingsForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-fittings.write_fittings.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/postCharactersCharacterIdFittingsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/characters/{character_id}/fittings/{fitting_id}/": {
      "delete": {
        "description": "Delete a fitting from a character\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/fittings/{fitting_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/fittings/{fitting_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/fittings/{fitting_id}/` + "`" + `\n",
        "tags": [
          "Fittings"
        ],
        "summary": "Delete fitting",
        "operationId": "delete_characters_character_id_fittings_fitting_id",
        "security": [
          {
            "evesso": [
              "esi-fittings.write_fittings.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "ID for a character",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "ID for a fitting of this character",
            "name": "fitting_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Fitting deleted"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/deleteCharactersCharacterIdFittingsFittingIdForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-fittings.write_fittings.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/deleteCharactersCharacterIdFittingsFittingIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/characters/{character_id}/industry/jobs/": {
      "get": {
        "description": "List industry jobs placed by a character\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/industry/jobs/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/industry/jobs/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/industry/jobs/` + "`" + `\n\n\n---\n\nThis route is cached for up to 300 seconds",
        "tags": [
          "Industry"
        ],
        "summary": "List character industry jobs",
        "operationId": "get_characters_character_id_industry_jobs",
        "security": [
          {
            "evesso": [
              "esi-industry.read_character_jobs.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Whether retrieve completed character industry jobs as well",
            "name": "include_completed",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Industry jobs placed by a character",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdIndustryJobsOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "activity_id": 1,
                  "blueprint_id": 1015116533326,
                  "blueprint_location_id": 60006382,
                  "blueprint_type_id": 2047,
                  "cost": 118,
                  "duration": 548,
                  "end_date": "2014-07-19T15:56:14Z",
                  "facility_id": 60006382,
                  "installer_id": 498338451,
                  "job_id": 229136101,
                  "licensed_runs": 200,
                  "output_location_id": 60006382,
                  "runs": 1,
                  "start_date": "2014-07-19T15:47:06Z",
                  "station_id": 60006382,
                  "status": "active"
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdIndustryJobsForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-industry.read_character_jobs.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdIndustryJobsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 300
      }
    },
    "/characters/{character_id}/killmails/recent/": {
      "get": {
        "description": "Return a list of character's recent kills and losses\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/killmails/recent/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/killmails/recent/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/killmails/recent/` + "`" + `\n\n\n---\n\nThis route is cached for up to 120 seconds",
        "tags": [
          "Killmails"
        ],
        "summary": "List kills and losses",
        "operationId": "get_characters_character_id_killmails_recent",
        "security": [
          {
            "evesso": [
              "esi-killmails.read_killmails.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "maximum": 5000,
            "type": "integer",
            "format": "int32",
            "default": 50,
            "description": "How many killmails to return at maximum",
            "name": "max_count",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Only return killmails with ID smaller than this.\n",
            "name": "max_kill_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of killmail IDs and hashes",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdKillmailsRecentOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "killmail_hash": "8eef5e8fb6b88fe3407c489df33822b2e3b57a5e",
                  "killmail_id": 2
                },
                {
                  "killmail_hash": "b41ccb498ece33d64019f64c0db392aa3aa701fb",
                  "killmail_id": 1
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdKillmailsRecentForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-killmails.read_killmails.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdKillmailsRecentInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 120
      }
    },
    "/characters/{character_id}/location/": {
      "get": {
        "description": "Information about the characters current location. Returns the current solar system id, and also the current station or structure ID if applicable.\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/location/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/location/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/location/` + "`" + `\n\n\n---\n\nThis route is cached for up to 5 seconds",
        "tags": [
          "Location"
        ],
        "summary": "Get character location",
        "operationId": "get_characters_character_id_location",
        "security": [
          {
            "evesso": [
              "esi-location.read_location.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the characters current location. Returns the current solar system id, and also the current station or structure ID if applicable.",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdLocationOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "solar_system_id": 30002505,
                "structure_id": 1000000016989
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdLocationForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-location.read_location.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdLocationInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 5
      }
    },
    "/characters/{character_id}/loyalty/points/": {
      "get": {
        "description": "Return a list of loyalty points for all corporations the character has worked for\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/loyalty/points/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/loyalty/points/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/loyalty/points/` + "`" + `\n",
        "tags": [
          "Loyalty"
        ],
        "summary": "Get loyalty points",
        "operationId": "get_characters_character_id_loyalty_points",
        "security": [
          {
            "evesso": [
              "esi-characters.read_loyalty.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "ID for a character",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of loyalty points",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdLoyaltyPointsOKBody"
            },
            "examples": {
              "application/json": [
                {
                  "corporation_id": 123,
                  "loyalty_points": 100
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdLoyaltyPointsForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-characters.read_loyalty.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdLoyaltyPointsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/characters/{character_id}/mail/": {
      "get": {
        "description": "Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards.\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/mail/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/mail/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/mail/` + "`" + `\n\n\n---\n\nThis route is cached for up to 30 seconds",
        "tags": [
          "Mail"
        ],
        "summary": "Return mail headers",
        "operationId": "get_characters_character_id_mail",
        "security": [
          {
            "evesso": [
              "esi-mail.read_mail.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "maxItems": 25,
            "minItems": 1,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "minimum": 0,
              "type": "integer",
              "format": "int64"
            },
            "description": "Fetch only mails that match one or more of the given labels",
            "name": "labels",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "List only mail with an ID lower than the given ID, if present",
            "name": "last_mail_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested mail",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdMailOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "from": 90000001,
                  "is_read": true,
                  "labels": [
                    3
                  ],
                  "mail_id": 7,
                  "recipients": [
                    {
                      "recipient_id": 90000002,
                      "recipient_type": "character"
                    }
                  ],
                  "subject": "Title for EVE Mail",
                  "timestamp": "2015-09-30T16:07:00Z"
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdMailForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-mail.read_mail.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdMailInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 30
      },
      "post": {
        "description": "Create and send a new mail\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/mail/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/mail/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/mail/` + "`" + `\n",
        "tags": [
          "Mail"
        ],
        "summary": "Send a new mail",
        "operationId": "post_characters_character_id_mail",
        "security": [
          {
            "evesso": [
              "esi-mail.send_mail.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "The sender's character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "description": "The mail to send",
            "name": "mail",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postCharactersCharacterIdMailParamsBody"
            }
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "201": {
            "description": "Mail created",
            "schema": {
              "description": "Mail ID",
              "type": "integer",
              "format": "int32",
              "title": "post_characters_character_id_mail_created"
            },
            "examples": {
              "application/json": 13
            }
          },
          "400": {
            "description": "Only one corporation, alliance, or mailing list can be the recipient of a mail",
            "schema": {
              "$ref": "#/definitions/postCharactersCharacterIdMailBadRequestBody"
            },
            "examples": {
              "application/json": {
                "error": "Bad request message"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/postCharactersCharacterIdMailForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-mail.send_mail.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/postCharactersCharacterIdMailInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/characters/{character_id}/mail/labels/": {
      "get": {
        "description": "Return a list of the users mail labels, unread counts for each label and a total unread count.\n\n---\n\nAlternate route: ` + "`" + `/v3/characters/{character_id}/mail/labels/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/mail/labels/` + "`" + `\n\n\n---\n\nThis route is cached for up to 30 seconds",
        "tags": [
          "Mail"
        ],
        "summary": "Get mail labels and unread counts",
        "operationId": "get_characters_character_id_mail_labels",
        "security": [
          {
            "evesso": [
              "esi-mail.read_mail.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of mail labels and unread counts",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdMailLabelsOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "labels": [
                  {
                    "color_hex": "#660066",
                    "label_id": 16,
                    "name": "PINK",
                    "unread_count": 4
                  },
                  {
                    "color_hex": "#ffffff",
                    "label_id": 17,
                    "name": "WHITE",
                    "unread_count": 1
                  }
                ],
                "total_unread_count": 5
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdMailLabelsForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-mail.read_mail.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdMailLabelsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "v3"
        ],
        "x-cached-seconds": 30
      },
      "post": {
        "description": "Create a mail label\n\n---\n\nAlternate route: ` + "`" + `/v2/characters/{character_id}/mail/labels/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/mail/labels/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/mail/labels/` + "`" + `\n",
        "tags": [
          "Mail"
        ],
        "summary": "Create a mail label",
        "operationId": "post_characters_character_id_mail_labels",
        "security": [
          {
            "evesso": [
              "esi-mail.organize_mail.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "description": "Label to create",
            "name": "label",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/postCharactersCharacterIdMailLabelsParamsBody"
            }
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "201": {
            "description": "Label created",
            "schema": {
              "description": "Label ID",
              "type": "integer",
              "format": "int64",
              "title": "post_characters_character_id_mail_labels_created"
            },
            "examples": {
              "application/json": 128
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/postCharactersCharacterIdMailLabelsForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-mail.organize_mail.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/postCharactersCharacterIdMailLabelsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v2"
        ]
      }
    },
    "/characters/{character_id}/mail/labels/{label_id}/": {
      "delete": {
        "description": "Delete a mail label\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/mail/labels/{label_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/mail/labels/{label_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/mail/labels/{label_id}/` + "`" + `\n",
        "tags": [
          "Mail"
        ],
        "summary": "Delete a mail label",
        "operationId": "delete_characters_character_id_mail_labels_label_id",
        "security": [
          {
            "evesso": [
              "esi-mail.organize_mail.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE label id",
            "name": "label_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Label deleted"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/deleteCharactersCharacterIdMailLabelsLabelIdForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-mail.organize_mail.v1"
              }
            }
          },
          "422": {
            "description": "Default labels cannot be deleted",
            "schema": {
              "$ref": "#/definitions/deleteCharactersCharacterIdMailLabelsLabelIdUnprocessableEntityBody"
            },
            "examples": {
              "application/json": {
                "error": "Unprocessable entity message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/deleteCharactersCharacterIdMailLabelsLabelIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/characters/{character_id}/mail/lists/": {
      "get": {
        "description": "Return all mailing lists that the character is subscribed to\n\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/mail/lists/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/mail/lists/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/mail/lists/` + "`" + `\n\n\n---\n\nThis route is cached for up to 120 seconds",
        "tags": [
          "Mail"
        ],
        "summary": "Return mailing list subscriptions",
        "operationId": "get_characters_character_id_mail_lists",
        "security": [
          {
            "evesso": [
              "esi-mail.read_mail.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Mailing lists",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdMailListsOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "mailing_list_id": 1,
                  "name": "test_mailing_list"
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdMailListsForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-mail.read_mail.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdMailListsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 120
      }
    },
    "/characters/{character_id}/mail/{mail_id}/": {
      "get": {
        "description": "Return the contents of an EVE mail\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/mail/{mail_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/mail/{mail_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/mail/{mail_id}/` + "`" + `\n\n\n---\n\nThis route is cached for up to 30 seconds",
        "tags": [
          "Mail"
        ],
        "summary": "Return a mail",
        "operationId": "get_characters_character_id_mail_mail_id",
        "security": [
          {
            "evesso": [
              "esi-mail.read_mail.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE mail ID",
            "name": "mail_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Contents of a mail",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdMailMailIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "body": "blah blah blah",
                "from": 90000001,
                "labels": [
                  2,
                  32
                ],
                "read": false,
                "subject": "test",
                "timestamp": "2015-09-30T16:07:00Z"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdMailMailIdForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-mail.read_mail.v1"
              }
            }
          },
          "404": {
            "description": "Mail not found",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdMailMailIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdMailMailIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 30
      },
      "put": {
        "description": "Update metadata about a mail\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/mail/{mail_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/mail/{mail_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/mail/{mail_id}/` + "`" + `\n",
        "tags": [
          "Mail"
        ],
        "summary": "Update metadata about a mail",
        "operationId": "put_characters_character_id_mail_mail_id",
        "security": [
          {
            "evesso": [
              "esi-mail.organize_mail.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Data used to update the mail",
            "name": "contents",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/putCharactersCharacterIdMailMailIdParamsBody"
            }
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE mail ID",
            "name": "mail_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Mail updated"
          },
          "400": {
            "description": "Invalid label ID; or No parameters in body -- nothing to do",
            "schema": {
              "$ref": "#/definitions/putCharactersCharacterIdMailMailIdBadRequestBody"
            },
            "examples": {
              "application/json": {
                "error": "Bad request message"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/putCharactersCharacterIdMailMailIdForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-mail.organize_mail.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/putCharactersCharacterIdMailMailIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      },
      "delete": {
        "description": "Delete a mail\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/mail/{mail_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/mail/{mail_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/mail/{mail_id}/` + "`" + `\n",
        "tags": [
          "Mail"
        ],
        "summary": "Delete a mail",
        "operationId": "delete_characters_character_id_mail_mail_id",
        "security": [
          {
            "evesso": [
              "esi-mail.organize_mail.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE mail ID",
            "name": "mail_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Mail deleted"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/deleteCharactersCharacterIdMailMailIdForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-mail.organize_mail.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/deleteCharactersCharacterIdMailMailIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/characters/{character_id}/medals/": {
      "get": {
        "description": "Return a list of medals the character has\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/medals/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/medals/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/medals/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Character"
        ],
        "summary": "Get medals",
        "operationId": "get_characters_character_id_medals",
        "security": [
          {
            "evesso": [
              "esi-characters.read_medals.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "ID for a character",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of medals",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdMedalsOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "corporation_id": 98000001,
                  "date": "2017-03-16T15:01:45Z",
                  "description": "For 33 corp!",
                  "graphics": [
                    {
                      "color": -1,
                      "graphic": "gallente.1_1",
                      "layer": 0,
                      "part": 1
                    }
                  ],
                  "issuer_id": 2112000002,
                  "medal_id": 3,
                  "reason": "Thanks!",
                  "status": "private",
                  "title": "33 tester medal"
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdMedalsForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-characters.read_medals.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdMedalsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/characters/{character_id}/online/": {
      "get": {
        "description": "Checks if the character is currently online\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/online/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/online/` + "`" + `\n\n\n---\n\nThis route is cached for up to 60 seconds",
        "tags": [
          "Location"
        ],
        "summary": "Get character online",
        "operationId": "get_characters_character_id_online",
        "security": [
          {
            "evesso": [
              "esi-location.read_online.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Boolean of if the character is currently online",
            "schema": {
              "description": "200 ok boolean",
              "type": "boolean",
              "title": "get_characters_character_id_online_ok"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": true
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdOnlineForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-location.read_online.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdOnlineInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 60
      }
    },
    "/characters/{character_id}/opportunities/": {
      "get": {
        "description": "Return a list of tasks finished by a character\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/opportunities/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/opportunities/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/opportunities/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Opportunities"
        ],
        "summary": "Get a character's completed tasks",
        "operationId": "get_characters_character_id_opportunities",
        "security": [
          {
            "evesso": [
              "esi-characters.read_opportunities.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "ID for a character",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of opportunities task ids",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdOpportunitiesOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "completed_at": "2016-04-29T12:34:56Z",
                  "task_id": 1
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdOpportunitiesForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-characters.read_opportunities.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdOpportunitiesInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/characters/{character_id}/orders/": {
      "get": {
        "description": "List market orders placed by a character\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/orders/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/orders/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/orders/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Market"
        ],
        "summary": "List orders from a character",
        "operationId": "get_characters_character_id_orders",
        "security": [
          {
            "evesso": [
              "esi-markets.read_character_orders.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Market orders placed by a character",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdOrdersOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "account_id": 1000,
                  "duration": 30,
                  "escrow": 45.6,
                  "is_buy_order": true,
                  "is_corp": false,
                  "issued": "2016-09-03T05:12:25Z",
                  "location_id": 456,
                  "min_volume": 1,
                  "order_id": 123,
                  "price": 33.3,
                  "range": "station",
                  "region_id": 123,
                  "state": "open",
                  "type_id": 456,
                  "volume_remain": 4422,
                  "volume_total": 123456
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdOrdersForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-markets.read_character_orders.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdOrdersInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/characters/{character_id}/planets/": {
      "get": {
        "description": "Returns a list of all planetary colonies owned by a character.\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/planets/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/planets/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/planets/` + "`" + `\n\n\n---\n\nThis route is cached for up to 600 seconds",
        "tags": [
          "Planetary Interaction"
        ],
        "summary": "Get colonies",
        "operationId": "get_characters_character_id_planets",
        "security": [
          {
            "evesso": [
              "esi-planets.manage_planets.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Character id of the target character",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "List of colonies",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdPlanetsOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "last_update": "2016-11-28T16:42:51Z",
                  "num_pins": 1,
                  "owner_id": 90000001,
                  "planet_id": 40023691,
                  "planet_type": "plasma",
                  "solar_system_id": 30000379,
                  "upgrade_level": 0
                },
                {
                  "last_update": "2016-11-28T16:41:54Z",
                  "num_pins": 1,
                  "owner_id": 90000001,
                  "planet_id": 40023697,
                  "planet_type": "barren",
                  "solar_system_id": 30000379,
                  "upgrade_level": 0
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdPlanetsForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-planets.manage_planets.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdPlanetsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 600
      }
    },
    "/characters/{character_id}/planets/{planet_id}/": {
      "get": {
        "description": "Returns full details on the layout of a single planetary colony, including links, pins and routes. Note: Planetary information is only recalculated when the colony is viewed through the client. Information will not update until this criteria is met.\n\n---\n\nAlternate route: ` + "`" + `/v2/characters/{character_id}/planets/{planet_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/planets/{planet_id}/` + "`" + `\n\n\n---\n\nThis route is cached for up to 600 seconds",
        "tags": [
          "Planetary Interaction"
        ],
        "summary": "Get colony layout",
        "operationId": "get_characters_character_id_planets_planet_id",
        "security": [
          {
            "evesso": [
              "esi-planets.manage_planets.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Character id of the target character",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Planet id of the target planet",
            "name": "planet_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Colony layout",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdPlanetsPlanetIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "links": [
                  {
                    "destination_pin_id": 1000000017022,
                    "link_level": 0,
                    "source_pin_id": 1000000017021
                  }
                ],
                "pins": [
                  {
                    "is_running": true,
                    "latitude": 1.55087844973,
                    "longitude": 0.717145933308,
                    "pin_id": 1000000017021,
                    "type_id": 2254
                  },
                  {
                    "is_running": true,
                    "latitude": 1.53360639935,
                    "longitude": 0.709775584394,
                    "pin_id": 1000000017022,
                    "type_id": 2256
                  }
                ],
                "routes": [
                  {
                    "content_type_id": 2393,
                    "destination_pin_id": 1000000017030,
                    "quantity": 20,
                    "route_id": 4,
                    "source_pin_id": 1000000017029
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdPlanetsPlanetIdForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-planets.manage_planets.v1"
              }
            }
          },
          "404": {
            "description": "Colony not found",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdPlanetsPlanetIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Colony not found"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdPlanetsPlanetIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "v2"
        ],
        "x-cached-seconds": 600
      }
    },
    "/characters/{character_id}/portrait/": {
      "get": {
        "description": "Get portrait urls for a character\n\n---\n\nAlternate route: ` + "`" + `/v2/characters/{character_id}/portrait/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/portrait/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Character"
        ],
        "summary": "Get character portraits",
        "operationId": "get_characters_character_id_portrait",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Public data for the given character",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdPortraitOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "px128x128": "https://imageserver.eveonline.com/Character/95465499_128.jpg",
                "px256x256": "https://imageserver.eveonline.com/Character/95465499_256.jpg",
                "px512x512": "https://imageserver.eveonline.com/Character/95465499_512.jpg",
                "px64x64": "https://imageserver.eveonline.com/Character/95465499_64.jpg"
              }
            }
          },
          "404": {
            "description": "No image server for this datasource",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdPortraitNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "No image server for this datasource"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdPortraitInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "v2"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/characters/{character_id}/roles/": {
      "get": {
        "description": "Returns a character's corporation roles\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/roles/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/roles/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/roles/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Character"
        ],
        "summary": "Get character corporation roles",
        "operationId": "get_characters_character_id_roles",
        "security": [
          {
            "evesso": [
              "esi-characters.read_corporation_roles.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "A character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "The character's roles in thier corporation",
            "schema": {
              "description": "200 ok array",
              "type": "array",
              "title": "get_characters_character_id_roles_ok",
              "maxItems": 50,
              "uniqueItems": true,
              "items": {
                "description": "200 ok string",
                "type": "string",
                "title": "get_characters_character_id_roles_200_ok",
                "enum": [
                  "Director",
                  "Personnel_Manager",
                  "Accountant",
                  "Security_Officer",
                  "Factory_Manager",
                  "Station_Manager",
                  "Auditor",
                  "Hangar_Take_1",
                  "Hangar_Take_2",
                  "Hangar_Take_3",
                  "Hangar_Take_4",
                  "Hangar_Take_5",
                  "Hangar_Take_6",
                  "Hangar_Take_7",
                  "Hangar_Query_1",
                  "Hangar_Query_2",
                  "Hangar_Query_3",
                  "Hangar_Query_4",
                  "Hangar_Query_5",
                  "Hangar_Query_6",
                  "Hangar_Query_7",
                  "Account_Take_1",
                  "Account_Take_2",
                  "Account_Take_3",
                  "Account_Take_4",
                  "Account_Take_5",
                  "Account_Take_6",
                  "Account_Take_7",
                  "Diplomat",
                  "Config_Equipment",
                  "Container_Take_1",
                  "Container_Take_2",
                  "Container_Take_3",
                  "Container_Take_4",
                  "Container_Take_5",
                  "Container_Take_6",
                  "Container_Take_7",
                  "Rent_Office",
                  "Rent_Factory_Facility",
                  "Rent_Research_Facility",
                  "Junior_Accountant",
                  "Config_Starbase_Equipment",
                  "Trader",
                  "Communications_Officer",
                  "Contract_Manager",
                  "Starbase_Defense_Operator",
                  "Starbase_Fuel_Technician",
                  "Fitting_Manager",
                  "Terrestrial_Combat_Officer",
                  "Terrestrial_Logistics_Officer"
                ]
              }
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                "Director",
                "Station_Manager"
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdRolesForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-characters.read_corporation_roles.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdRolesInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/characters/{character_id}/search/": {
      "get": {
        "description": "Search for entities that match a given sub-string.\n\n---\n\nAlternate route: ` + "`" + `/v2/characters/{character_id}/search/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Search"
        ],
        "summary": "Search on a string",
        "operationId": "get_characters_character_id_search",
        "security": [
          {
            "evesso": [
              "esi-search.search_structures.v1"
            ]
          }
        ],
        "parameters": [
          {
            "maxItems": 12,
            "minItems": 1,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "enum": [
                "agent",
                "alliance",
                "character",
                "constellation",
                "corporation",
                "faction",
                "inventorytype",
                "region",
                "solarsystem",
                "station",
                "structure",
                "wormhole"
              ],
              "type": "string"
            },
            "description": "Type of entities to search for",
            "name": "categories",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "enum": [
              "en-us",
              "de",
              "fr",
              "ru",
              "ja",
              "zh"
            ],
            "type": "string",
            "default": "en-us",
            "description": "Search locale",
            "name": "language",
            "in": "query"
          },
          {
            "minLength": 3,
            "type": "string",
            "description": "The string to search on",
            "name": "search",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Whether the search should be a strict match",
            "name": "strict",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of search results",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdSearchOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "solarsystem": [
                  30002510
                ],
                "station": [
                  60004588,
                  60004594,
                  60005725,
                  60009106,
                  60012721,
                  60012724,
                  60012727
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdSearchForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-search.search_structures.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdSearchInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "v2"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/characters/{character_id}/ship/": {
      "get": {
        "description": "Get the current ship type, name and id\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/ship/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/ship/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/ship/` + "`" + `\n\n\n---\n\nThis route is cached for up to 5 seconds",
        "tags": [
          "Location"
        ],
        "summary": "Get current ship",
        "operationId": "get_characters_character_id_ship",
        "security": [
          {
            "evesso": [
              "esi-location.read_ship_type.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Get the current ship type, name and id",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdShipOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "ship_item_id": 1000000016991,
                "ship_name": "SPACESHIPS!!!",
                "ship_type_id": 1233
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdShipForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-location.read_ship_type.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdShipInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 5
      }
    },
    "/characters/{character_id}/skillqueue/": {
      "get": {
        "description": "List the configured skill queue for the given character\n\n---\n\nAlternate route: ` + "`" + `/v2/characters/{character_id}/skillqueue/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/skillqueue/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/skillqueue/` + "`" + `\n\n\n---\n\nThis route is cached for up to 120 seconds",
        "tags": [
          "Skills"
        ],
        "summary": "Get character's skill queue",
        "operationId": "get_characters_character_id_skillqueue",
        "security": [
          {
            "evesso": [
              "esi-skills.read_skillqueue.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Character id of the target character",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "The current skill queue, sorted ascending by finishing time",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdSkillqueueOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "finish_date": "2016-06-29T10:47:00Z",
                  "finished_level": 3,
                  "queue_position": 0,
                  "skill_id": 1,
                  "start_date": "2016-06-29T10:46:00Z"
                },
                {
                  "finish_date": "2016-07-15T10:47:00Z",
                  "finished_level": 4,
                  "queue_position": 1,
                  "skill_id": 1,
                  "start_date": "2016-06-29T10:47:00Z"
                },
                {
                  "finish_date": "2016-08-30T10:47:00Z",
                  "finished_level": 2,
                  "queue_position": 2,
                  "skill_id": 2,
                  "start_date": "2016-07-15T10:47:00Z"
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdSkillqueueForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-skills.read_skillqueue.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdSkillqueueInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v2"
        ],
        "x-cached-seconds": 120
      }
    },
    "/characters/{character_id}/skills/": {
      "get": {
        "description": "List all trained skills for the given character\n\n---\n\nAlternate route: ` + "`" + `/v3/characters/{character_id}/skills/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/skills/` + "`" + `\n\n\n---\n\nThis route is cached for up to 120 seconds",
        "tags": [
          "Skills"
        ],
        "summary": "Get character skills",
        "operationId": "get_characters_character_id_skills",
        "security": [
          {
            "evesso": [
              "esi-skills.read_skills.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Known skills for the character",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdSkillsOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "skills": [
                  {
                    "current_skill_level": 1,
                    "skill_id": 1,
                    "skillpoints_in_skill": 10000
                  },
                  {
                    "current_skill_level": 1,
                    "skill_id": 2,
                    "skillpoints_in_skill": 10000
                  }
                ],
                "total_sp": 20000
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdSkillsForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-skills.read_skills.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdSkillsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "v3"
        ],
        "x-cached-seconds": 120
      }
    },
    "/characters/{character_id}/standings/": {
      "get": {
        "description": "Return character standings from agents, NPC corporations, and factions\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/standings/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/standings/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/standings/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Character"
        ],
        "summary": "Get standings",
        "operationId": "get_characters_character_id_standings",
        "security": [
          {
            "evesso": [
              "esi-characters.read_standings.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "ID for a character",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of standings",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdStandingsOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "from_id": 3009841,
                  "from_type": "agent",
                  "standing": 0.1
                },
                {
                  "from_id": 1000061,
                  "from_type": "npc_corp",
                  "standing": 0
                },
                {
                  "from_id": 500003,
                  "from_type": "faction",
                  "standing": -1
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdStandingsForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-characters.read_standings.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdStandingsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/characters/{character_id}/wallets/": {
      "get": {
        "description": "List your wallets and their balances. Characters typically have only one wallet, with wallet_id 1000 being the master wallet.\n\n---\n\nAlternate route: ` + "`" + `/v1/characters/{character_id}/wallets/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/characters/{character_id}/wallets/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/characters/{character_id}/wallets/` + "`" + `\n\n\n---\n\nThis route is cached for up to 120 seconds",
        "tags": [
          "Wallet"
        ],
        "summary": "List wallets and balances",
        "operationId": "get_characters_character_id_wallets",
        "security": [
          {
            "evesso": [
              "esi-wallet.read_character_wallet.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE character ID",
            "name": "character_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Wallet data for selected user",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdWalletsOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "balance": 295000,
                  "wallet_id": 1000
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdWalletsForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-wallet.read_character_wallet.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCharactersCharacterIdWalletsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 120
      }
    },
    "/corporations/names/": {
      "get": {
        "description": "Resolve a set of corporation IDs to corporation names\n\n---\n\nAlternate route: ` + "`" + `/v1/corporations/names/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/corporations/names/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/corporations/names/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Corporation"
        ],
        "summary": "Get corporation names",
        "operationId": "get_corporations_names",
        "parameters": [
          {
            "maxItems": 100,
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A comma separated list of corporation IDs",
            "name": "corporation_ids",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "List of id/name associations",
            "schema": {
              "$ref": "#/definitions/getCorporationsNamesOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "corporation_id": 1000171,
                  "corporation_name": "Republic University"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCorporationsNamesInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/corporations/npccorps/": {
      "get": {
        "description": "Get a list of npc corporations\n\n---\n\nAlternate route: ` + "`" + `/v1/corporations/npccorps/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/corporations/npccorps/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/corporations/npccorps/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Corporation"
        ],
        "summary": "Get npc corporations",
        "operationId": "get_corporations_npccorps",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of npc corporation ids",
            "schema": {
              "description": "200 ok array",
              "type": "array",
              "title": "get_corporations_npccorps_ok",
              "maxItems": 500,
              "items": {
                "description": "200 ok integer",
                "type": "integer",
                "format": "int32",
                "title": "get_corporations_npccorps_200_ok"
              }
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                1000001,
                1000002,
                1000003
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCorporationsNpccorpsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/corporations/{corporation_id}/": {
      "get": {
        "description": "Public information about a corporation\n\n---\n\nAlternate route: ` + "`" + `/v3/corporations/{corporation_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/corporations/{corporation_id}/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Corporation"
        ],
        "summary": "Get corporation information",
        "operationId": "get_corporations_corporation_id",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An Eve corporation ID",
            "name": "corporation_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Public data about a corporation",
            "schema": {
              "$ref": "#/definitions/getCorporationsCorporationIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "alliance_id": 434243723,
                "ceo_id": 180548812,
                "corporation_description": "This is a corporation description, it's basically just a string",
                "corporation_name": "C C P",
                "creation_date": "2004-11-28T16:42:51Z",
                "creator_id": 180548812,
                "member_count": 656,
                "tax_rate": 0.256,
                "ticker": "-CCP-",
                "url": "http://www.eveonline.com"
              }
            }
          },
          "404": {
            "description": "Corporation not found",
            "schema": {
              "$ref": "#/definitions/getCorporationsCorporationIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCorporationsCorporationIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "v3"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/corporations/{corporation_id}/alliancehistory/": {
      "get": {
        "description": "Get a list of all the alliances a corporation has been a member of\n\n---\n\nAlternate route: ` + "`" + `/v1/corporations/{corporation_id}/alliancehistory/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/corporations/{corporation_id}/alliancehistory/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/corporations/{corporation_id}/alliancehistory/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Corporation"
        ],
        "summary": "Get alliance history",
        "operationId": "get_corporations_corporation_id_alliancehistory",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE corporation ID",
            "name": "corporation_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Alliance history for the given corporation",
            "schema": {
              "$ref": "#/definitions/getCorporationsCorporationIdAlliancehistoryOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "alliance": {
                    "alliance_id": 99000006,
                    "is_deleted": false
                  },
                  "record_id": 23,
                  "start_date": "2016-10-25T14:46:00Z"
                },
                {
                  "record_id": 1,
                  "start_date": "2015-07-06T20:56:00Z"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCorporationsCorporationIdAlliancehistoryInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/corporations/{corporation_id}/icons/": {
      "get": {
        "description": "Get the icon urls for a corporation\n\n---\n\nAlternate route: ` + "`" + `/v1/corporations/{corporation_id}/icons/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/corporations/{corporation_id}/icons/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/corporations/{corporation_id}/icons/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Corporation"
        ],
        "summary": "Get corporation icon",
        "operationId": "get_corporations_corporation_id_icons",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An EVE corporation ID",
            "name": "corporation_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Urls for icons for the given corporation id and server",
            "schema": {
              "$ref": "#/definitions/getCorporationsCorporationIdIconsOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "px128x128": "https://imageserver.eveonline.com/Corporation/1000010_128.png",
                "px256x256": "https://imageserver.eveonline.com/Corporation/1000010_256.png",
                "px64x64": "https://imageserver.eveonline.com/Corporation/1000010_64.png"
              }
            }
          },
          "404": {
            "description": "No image server for this datasource",
            "schema": {
              "$ref": "#/definitions/getCorporationsCorporationIdIconsNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "No image server for this datasource"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCorporationsCorporationIdIconsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/corporations/{corporation_id}/members/": {
      "get": {
        "description": "Read the current list of members if the calling character is a member.\n\n---\n\nAlternate route: ` + "`" + `/v2/corporations/{corporation_id}/members/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/corporations/{corporation_id}/members/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/corporations/{corporation_id}/members/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Corporation"
        ],
        "summary": "Get corporation members",
        "operationId": "get_corporations_corporation_id_members",
        "security": [
          {
            "evesso": [
              "esi-corporations.read_corporation_membership.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "A corporation ID",
            "name": "corporation_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "List of member character IDs",
            "schema": {
              "$ref": "#/definitions/getCorporationsCorporationIdMembersOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "character_id": 90000001
                },
                {
                  "character_id": 90000002
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCorporationsCorporationIdMembersForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-corporations.read_corporation_membership.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCorporationsCorporationIdMembersInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v2"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/corporations/{corporation_id}/roles/": {
      "get": {
        "description": "Return the roles of all members if the character has the personnel manager role or any grantable role.\n\n---\n\nAlternate route: ` + "`" + `/v1/corporations/{corporation_id}/roles/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/corporations/{corporation_id}/roles/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/corporations/{corporation_id}/roles/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Corporation"
        ],
        "summary": "Get corporation member roles",
        "operationId": "get_corporations_corporation_id_roles",
        "security": [
          {
            "evesso": [
              "esi-corporations.read_corporation_membership.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "A corporation ID",
            "name": "corporation_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "List of member character ID's and roles",
            "schema": {
              "$ref": "#/definitions/getCorporationsCorporationIdRolesOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "character_id": 1000171,
                  "roles": [
                    "Director",
                    "Station_Manager"
                  ]
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCorporationsCorporationIdRolesForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-corporations.read_corporation_membership.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCorporationsCorporationIdRolesInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/corporations/{corporation_id}/structures/": {
      "get": {
        "description": "Get a list of corporation structures\n\n---\n\nAlternate route: ` + "`" + `/v1/corporations/{corporation_id}/structures/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/corporations/{corporation_id}/structures/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/corporations/{corporation_id}/structures/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Corporation"
        ],
        "summary": "Get corporation structures",
        "operationId": "get_corporations_corporation_id_structures",
        "security": [
          {
            "evesso": [
              "esi-corporations.read_structures.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "A corporation ID",
            "name": "corporation_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "enum": [
              "de",
              "en-us",
              "fr",
              "ja",
              "ru",
              "zh"
            ],
            "type": "string",
            "default": "en-us",
            "description": "Language to use in the response",
            "name": "language",
            "in": "query"
          },
          {
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "description": "Which page to query, 250 structures per page",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "List of corporation structures' information",
            "schema": {
              "$ref": "#/definitions/getCorporationsCorporationIdStructuresOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Content-Language": {
                "enum": [
                  "de",
                  "en-us",
                  "fr",
                  "ja",
                  "ru",
                  "zh"
                ],
                "type": "string",
                "description": "The language used in the response"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "corporation_id": 667531913,
                  "current_vul": [
                    {
                      "day": 1,
                      "hour": 2
                    }
                  ],
                  "next_vul": [
                    {
                      "day": 3,
                      "hour": 4
                    }
                  ],
                  "profile_id": 11237,
                  "structure_id": 1021975535893,
                  "system_id": 30004763,
                  "type_id": 35833
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getCorporationsCorporationIdStructuresForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-corporations.read_structures.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getCorporationsCorporationIdStructuresInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/corporations/{corporation_id}/structures/{structure_id}/": {
      "put": {
        "description": "Update the vulnerability window schedule of a corporation structure\n\n---\n\nAlternate route: ` + "`" + `/v1/corporations/{corporation_id}/structures/{structure_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/corporations/{corporation_id}/structures/{structure_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/corporations/{corporation_id}/structures/{structure_id}/` + "`" + `\n",
        "tags": [
          "Corporation"
        ],
        "summary": "Update structure vulnerability schedule",
        "operationId": "put_corporations_corporation_id_structures_structure_id",
        "security": [
          {
            "evesso": [
              "esi-corporations.write_structures.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "A corporation ID",
            "name": "corporation_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "description": "New vulnerability window schedule for the structure",
            "name": "new_schedule",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/putCorporationsCorporationIdStructuresStructureIdParamsBody"
            }
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "A structure ID",
            "name": "structure_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Structure vulnerability window updated"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/putCorporationsCorporationIdStructuresStructureIdForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-corporations.write_structures.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/putCorporationsCorporationIdStructuresStructureIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/dogma/attributes/": {
      "get": {
        "description": "Get a list of dogma attribute ids\n\n---\n\nAlternate route: ` + "`" + `/v1/dogma/attributes/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/dogma/attributes/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/dogma/attributes/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Dogma"
        ],
        "summary": "Get attributes",
        "operationId": "get_dogma_attributes",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of dogma attribute ids",
            "schema": {
              "description": "200 ok array",
              "type": "array",
              "title": "get_dogma_attributes_ok",
              "maxItems": 10000,
              "items": {
                "description": "200 ok integer",
                "type": "integer",
                "format": "int32",
                "title": "get_dogma_attributes_200_ok"
              }
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                1,
                2,
                3
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getDogmaAttributesInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/dogma/attributes/{attribute_id}/": {
      "get": {
        "description": "Get information on a dogma attribute\n\n---\n\nAlternate route: ` + "`" + `/v1/dogma/attributes/{attribute_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/dogma/attributes/{attribute_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/dogma/attributes/{attribute_id}/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Dogma"
        ],
        "summary": "Get attribute information",
        "operationId": "get_dogma_attributes_attribute_id",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "A dogma attribute ID",
            "name": "attribute_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about a dogma attribute",
            "schema": {
              "$ref": "#/definitions/getDogmaAttributesAttributeIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "attribute_id": 20,
                "default_value": 1,
                "description": "Factor by which topspeed increases.",
                "display_name": "Maximum Velocity Bonus",
                "high_is_good": true,
                "icon_id": 1389,
                "name": "speedFactor",
                "published": true,
                "stackable": false,
                "unit_id": 124
              }
            }
          },
          "404": {
            "description": "Dogma attribute not found",
            "schema": {
              "$ref": "#/definitions/getDogmaAttributesAttributeIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getDogmaAttributesAttributeIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/dogma/effects/": {
      "get": {
        "description": "Get a list of dogma effect ids\n\n---\n\nAlternate route: ` + "`" + `/v1/dogma/effects/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/dogma/effects/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/dogma/effects/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Dogma"
        ],
        "summary": "Get effects",
        "operationId": "get_dogma_effects",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of dogma effect ids",
            "schema": {
              "description": "200 ok array",
              "type": "array",
              "title": "get_dogma_effects_ok",
              "maxItems": 10000,
              "items": {
                "description": "200 ok integer",
                "type": "integer",
                "format": "int32",
                "title": "get_dogma_effects_200_ok"
              }
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                1,
                2,
                3
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getDogmaEffectsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/dogma/effects/{effect_id}/": {
      "get": {
        "description": "Get information on a dogma effect\n\n---\n\nAlternate route: ` + "`" + `/v1/dogma/effects/{effect_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/dogma/effects/{effect_id}/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Dogma"
        ],
        "summary": "Get effect information",
        "operationId": "get_dogma_effects_effect_id",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "A dogma effect ID",
            "name": "effect_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about a dogma effect",
            "schema": {
              "$ref": "#/definitions/getDogmaEffectsEffectIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "description": "Requires a high power slot.",
                "disallow_auto_repeat": false,
                "display_name": "High power",
                "effect_category": 0,
                "effect_id": 12,
                "electronic_chance": false,
                "icon_id": 293,
                "is_assistance": false,
                "is_offensive": false,
                "is_warp_safe": false,
                "name": "hiPower",
                "post_expression": 131,
                "pre_expression": 131,
                "published": true,
                "range_chance": false
              }
            }
          },
          "404": {
            "description": "Dogma effect not found",
            "schema": {
              "$ref": "#/definitions/getDogmaEffectsEffectIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getDogmaEffectsEffectIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "legacy",
          "v1"
        ]
      }
    },
    "/fleets/{fleet_id}/": {
      "get": {
        "description": "Return details about a fleet\n\n---\n\nAlternate route: ` + "`" + `/v1/fleets/{fleet_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/fleets/{fleet_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/fleets/{fleet_id}/` + "`" + `\n\n\n---\n\nThis route is cached for up to 5 seconds",
        "tags": [
          "Fleets"
        ],
        "summary": "Get fleet information",
        "operationId": "get_fleets_fleet_id",
        "security": [
          {
            "evesso": [
              "esi-fleets.read_fleet.v1"
            ]
          }
        ],
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID for a fleet",
            "name": "fleet_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Details about a fleet",
            "schema": {
              "$ref": "#/definitions/getFleetsFleetIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "is_free_move": false,
                "is_registered": false,
                "is_voice_enabled": false,
                "motd": "This is an \u003cb\u003eawesome\u003c/b\u003e fleet!"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getFleetsFleetIdForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-fleets.read_fleet.v1"
              }
            }
          },
          "404": {
            "description": "The fleet does not exist or you don't have access to it",
            "schema": {
              "$ref": "#/definitions/getFleetsFleetIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getFleetsFleetIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 5
      },
      "put": {
        "description": "Update settings about a fleet\n\n---\n\nAlternate route: ` + "`" + `/v1/fleets/{fleet_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/fleets/{fleet_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/fleets/{fleet_id}/` + "`" + `\n",
        "tags": [
          "Fleets"
        ],
        "summary": "Update fleet",
        "operationId": "put_fleets_fleet_id",
        "security": [
          {
            "evesso": [
              "esi-fleets.write_fleet.v1"
            ]
          }
        ],
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID for a fleet",
            "name": "fleet_id",
            "in": "path",
            "required": true
          },
          {
            "description": "What to update for this fleet",
            "name": "new_settings",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/putFleetsFleetIdParamsBody"
            }
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Fleet updated"
          },
          "400": {
            "description": "Invalid request body",
            "schema": {
              "$ref": "#/definitions/putFleetsFleetIdBadRequestBody"
            },
            "examples": {
              "application/json": {
                "error": "Bad request message"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/putFleetsFleetIdForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-fleets.write_fleet.v1"
              }
            }
          },
          "404": {
            "description": "The fleet does not exist or you don't have access to it",
            "schema": {
              "$ref": "#/definitions/putFleetsFleetIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/putFleetsFleetIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/fleets/{fleet_id}/members/": {
      "get": {
        "description": "Return information about fleet members\n\n---\n\nAlternate route: ` + "`" + `/v1/fleets/{fleet_id}/members/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/fleets/{fleet_id}/members/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/fleets/{fleet_id}/members/` + "`" + `\n\n\n---\n\nThis route is cached for up to 5 seconds",
        "tags": [
          "Fleets"
        ],
        "summary": "Get fleet members",
        "operationId": "get_fleets_fleet_id_members",
        "security": [
          {
            "evesso": [
              "esi-fleets.read_fleet.v1"
            ]
          }
        ],
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID for a fleet",
            "name": "fleet_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "de",
              "en-us",
              "fr",
              "ja",
              "ru",
              "zh"
            ],
            "type": "string",
            "default": "en-us",
            "description": "Language to use in the response",
            "name": "language",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of fleet members",
            "schema": {
              "$ref": "#/definitions/getFleetsFleetIdMembersOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Content-Language": {
                "enum": [
                  "de",
                  "en-us",
                  "fr",
                  "ja",
                  "ru",
                  "zh"
                ],
                "type": "string",
                "description": "The language used in the response"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "character_id": 93265215,
                  "join_time": "2016-04-29T12:34:56Z",
                  "role": "squad_commander",
                  "role_name": "Squad Commander (Boss)",
                  "ship_type_id": 33328,
                  "solar_system_id": 30003729,
                  "squad_id": 3129411261968,
                  "station_id": 61000180,
                  "takes_fleet_warp": true,
                  "wing_id": 2073711261968
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getFleetsFleetIdMembersForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-fleets.read_fleet.v1"
              }
            }
          },
          "404": {
            "description": "The fleet does not exist or you don't have access to it",
            "schema": {
              "$ref": "#/definitions/getFleetsFleetIdMembersNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getFleetsFleetIdMembersInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 5
      },
      "post": {
        "description": "Invite a character into the fleet, if a character has a CSPA charge set, it is not possible to invite them to the fleet using ESI\n\n---\n\nAlternate route: ` + "`" + `/v1/fleets/{fleet_id}/members/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/fleets/{fleet_id}/members/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/fleets/{fleet_id}/members/` + "`" + `\n",
        "tags": [
          "Fleets"
        ],
        "summary": "Create fleet invitation",
        "operationId": "post_fleets_fleet_id_members",
        "security": [
          {
            "evesso": [
              "esi-fleets.write_fleet.v1"
            ]
          }
        ],
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID for a fleet",
            "name": "fleet_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Details of the invitation",
            "name": "invitation",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postFleetsFleetIdMembersParamsBody"
            }
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Fleet invitation sent"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/postFleetsFleetIdMembersForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-fleets.write_fleet.v1"
              }
            }
          },
          "404": {
            "description": "The fleet does not exist or you don't have access to it",
            "schema": {
              "$ref": "#/definitions/postFleetsFleetIdMembersNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "422": {
            "description": "Errors in invitation",
            "schema": {
              "$ref": "#/definitions/postFleetsFleetIdMembersUnprocessableEntityBody"
            },
            "examples": {
              "application/json": {
                "error": "missing wing_id"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/postFleetsFleetIdMembersInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/fleets/{fleet_id}/members/{member_id}/": {
      "put": {
        "description": "Move a fleet member around\n\n---\n\nAlternate route: ` + "`" + `/v1/fleets/{fleet_id}/members/{member_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/fleets/{fleet_id}/members/{member_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/fleets/{fleet_id}/members/{member_id}/` + "`" + `\n",
        "tags": [
          "Fleets"
        ],
        "summary": "Move fleet member",
        "operationId": "put_fleets_fleet_id_members_member_id",
        "security": [
          {
            "evesso": [
              "esi-fleets.write_fleet.v1"
            ]
          }
        ],
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID for a fleet",
            "name": "fleet_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "The character ID of a member in this fleet",
            "name": "member_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Details of the invitation",
            "name": "movement",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/putFleetsFleetIdMembersMemberIdParamsBody"
            }
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Fleet invitation sent"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/putFleetsFleetIdMembersMemberIdForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-fleets.write_fleet.v1"
              }
            }
          },
          "404": {
            "description": "The fleet does not exist or you don't have access to it",
            "schema": {
              "$ref": "#/definitions/putFleetsFleetIdMembersMemberIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "422": {
            "description": "Errors in invitation",
            "schema": {
              "$ref": "#/definitions/putFleetsFleetIdMembersMemberIdUnprocessableEntityBody"
            },
            "examples": {
              "application/json": {
                "error": "missing wing_id"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/putFleetsFleetIdMembersMemberIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      },
      "delete": {
        "description": "Kick a fleet member\n\n---\n\nAlternate route: ` + "`" + `/v1/fleets/{fleet_id}/members/{member_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/fleets/{fleet_id}/members/{member_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/fleets/{fleet_id}/members/{member_id}/` + "`" + `\n",
        "tags": [
          "Fleets"
        ],
        "summary": "Kick fleet member",
        "operationId": "delete_fleets_fleet_id_members_member_id",
        "security": [
          {
            "evesso": [
              "esi-fleets.write_fleet.v1"
            ]
          }
        ],
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID for a fleet",
            "name": "fleet_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "The character ID of a member in this fleet",
            "name": "member_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Fleet member kicked"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/deleteFleetsFleetIdMembersMemberIdForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-fleets.write_fleet.v1"
              }
            }
          },
          "404": {
            "description": "The fleet does not exist or you don't have access to it",
            "schema": {
              "$ref": "#/definitions/deleteFleetsFleetIdMembersMemberIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/deleteFleetsFleetIdMembersMemberIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/fleets/{fleet_id}/squads/{squad_id}/": {
      "put": {
        "description": "Rename a fleet squad\n\n---\n\nAlternate route: ` + "`" + `/v1/fleets/{fleet_id}/squads/{squad_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/fleets/{fleet_id}/squads/{squad_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/fleets/{fleet_id}/squads/{squad_id}/` + "`" + `\n",
        "tags": [
          "Fleets"
        ],
        "summary": "Rename fleet squad",
        "operationId": "put_fleets_fleet_id_squads_squad_id",
        "security": [
          {
            "evesso": [
              "esi-fleets.write_fleet.v1"
            ]
          }
        ],
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID for a fleet",
            "name": "fleet_id",
            "in": "path",
            "required": true
          },
          {
            "description": "New name of the squad",
            "name": "naming",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/putFleetsFleetIdSquadsSquadIdParamsBody"
            }
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The squad to rename",
            "name": "squad_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Squad renamed"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/putFleetsFleetIdSquadsSquadIdForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-fleets.write_fleet.v1"
              }
            }
          },
          "404": {
            "description": "The fleet does not exist or you don't have access to it",
            "schema": {
              "$ref": "#/definitions/putFleetsFleetIdSquadsSquadIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/putFleetsFleetIdSquadsSquadIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      },
      "delete": {
        "description": "Delete a fleet squad, only empty squads can be deleted\n\n---\n\nAlternate route: ` + "`" + `/v1/fleets/{fleet_id}/squads/{squad_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/fleets/{fleet_id}/squads/{squad_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/fleets/{fleet_id}/squads/{squad_id}/` + "`" + `\n",
        "tags": [
          "Fleets"
        ],
        "summary": "Delete fleet squad",
        "operationId": "delete_fleets_fleet_id_squads_squad_id",
        "security": [
          {
            "evesso": [
              "esi-fleets.write_fleet.v1"
            ]
          }
        ],
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID for a fleet",
            "name": "fleet_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The squad to delete",
            "name": "squad_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Squad deleted"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/deleteFleetsFleetIdSquadsSquadIdForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-fleets.write_fleet.v1"
              }
            }
          },
          "404": {
            "description": "The fleet does not exist or you don't have access to it",
            "schema": {
              "$ref": "#/definitions/deleteFleetsFleetIdSquadsSquadIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/deleteFleetsFleetIdSquadsSquadIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/fleets/{fleet_id}/wings/": {
      "get": {
        "description": "Return information about wings in a fleet\n\n---\n\nAlternate route: ` + "`" + `/v1/fleets/{fleet_id}/wings/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/fleets/{fleet_id}/wings/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/fleets/{fleet_id}/wings/` + "`" + `\n\n\n---\n\nThis route is cached for up to 5 seconds",
        "tags": [
          "Fleets"
        ],
        "summary": "Get fleet wings",
        "operationId": "get_fleets_fleet_id_wings",
        "security": [
          {
            "evesso": [
              "esi-fleets.read_fleet.v1"
            ]
          }
        ],
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID for a fleet",
            "name": "fleet_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "de",
              "en-us",
              "fr",
              "ja",
              "ru",
              "zh"
            ],
            "type": "string",
            "default": "en-us",
            "description": "Language to use in the response",
            "name": "language",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of fleet wings",
            "schema": {
              "$ref": "#/definitions/getFleetsFleetIdWingsOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Content-Language": {
                "enum": [
                  "de",
                  "en-us",
                  "fr",
                  "ja",
                  "ru",
                  "zh"
                ],
                "type": "string",
                "description": "The language used in the response"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "id": 2073711261968,
                  "name": "Wing 1",
                  "squads": [
                    {
                      "id": 3129411261968,
                      "name": "Squad 1"
                    }
                  ]
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getFleetsFleetIdWingsForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-fleets.read_fleet.v1"
              }
            }
          },
          "404": {
            "description": "The fleet does not exist or you don't have access to it",
            "schema": {
              "$ref": "#/definitions/getFleetsFleetIdWingsNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getFleetsFleetIdWingsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 5
      },
      "post": {
        "description": "Create a new wing in a fleet\n\n---\n\nAlternate route: ` + "`" + `/v1/fleets/{fleet_id}/wings/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/fleets/{fleet_id}/wings/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/fleets/{fleet_id}/wings/` + "`" + `\n",
        "tags": [
          "Fleets"
        ],
        "summary": "Create fleet wing",
        "operationId": "post_fleets_fleet_id_wings",
        "security": [
          {
            "evesso": [
              "esi-fleets.write_fleet.v1"
            ]
          }
        ],
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID for a fleet",
            "name": "fleet_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "201": {
            "description": "Wing created",
            "schema": {
              "$ref": "#/definitions/postFleetsFleetIdWingsCreatedBody"
            },
            "examples": {
              "application/json": {
                "wing_id": 123
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/postFleetsFleetIdWingsForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-fleets.write_fleet.v1"
              }
            }
          },
          "404": {
            "description": "The fleet does not exist or you don't have access to it",
            "schema": {
              "$ref": "#/definitions/postFleetsFleetIdWingsNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/postFleetsFleetIdWingsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/fleets/{fleet_id}/wings/{wing_id}/": {
      "put": {
        "description": "Rename a fleet wing\n\n---\n\nAlternate route: ` + "`" + `/v1/fleets/{fleet_id}/wings/{wing_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/fleets/{fleet_id}/wings/{wing_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/fleets/{fleet_id}/wings/{wing_id}/` + "`" + `\n",
        "tags": [
          "Fleets"
        ],
        "summary": "Rename fleet wing",
        "operationId": "put_fleets_fleet_id_wings_wing_id",
        "security": [
          {
            "evesso": [
              "esi-fleets.write_fleet.v1"
            ]
          }
        ],
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID for a fleet",
            "name": "fleet_id",
            "in": "path",
            "required": true
          },
          {
            "description": "New name of the wing",
            "name": "naming",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/putFleetsFleetIdWingsWingIdParamsBody"
            }
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The wing to rename",
            "name": "wing_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Wing renamed"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/putFleetsFleetIdWingsWingIdForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-fleets.write_fleet.v1"
              }
            }
          },
          "404": {
            "description": "The fleet does not exist or you don't have access to it",
            "schema": {
              "$ref": "#/definitions/putFleetsFleetIdWingsWingIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/putFleetsFleetIdWingsWingIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      },
      "delete": {
        "description": "Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty\n\n---\n\nAlternate route: ` + "`" + `/v1/fleets/{fleet_id}/wings/{wing_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/fleets/{fleet_id}/wings/{wing_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/fleets/{fleet_id}/wings/{wing_id}/` + "`" + `\n",
        "tags": [
          "Fleets"
        ],
        "summary": "Delete fleet wing",
        "operationId": "delete_fleets_fleet_id_wings_wing_id",
        "security": [
          {
            "evesso": [
              "esi-fleets.write_fleet.v1"
            ]
          }
        ],
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID for a fleet",
            "name": "fleet_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The wing to delete",
            "name": "wing_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Wing deleted"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/deleteFleetsFleetIdWingsWingIdForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-fleets.write_fleet.v1"
              }
            }
          },
          "404": {
            "description": "The fleet does not exist or you don't have access to it",
            "schema": {
              "$ref": "#/definitions/deleteFleetsFleetIdWingsWingIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/deleteFleetsFleetIdWingsWingIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/fleets/{fleet_id}/wings/{wing_id}/squads/": {
      "post": {
        "description": "Create a new squad in a fleet\n\n---\n\nAlternate route: ` + "`" + `/v1/fleets/{fleet_id}/wings/{wing_id}/squads/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/fleets/{fleet_id}/wings/{wing_id}/squads/` + "`" + `\n",
        "tags": [
          "Fleets"
        ],
        "summary": "Create fleet squad",
        "operationId": "post_fleets_fleet_id_wings_wing_id_squads",
        "security": [
          {
            "evesso": [
              "esi-fleets.write_fleet.v1"
            ]
          }
        ],
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID for a fleet",
            "name": "fleet_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The wing_id to create squad in",
            "name": "wing_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "201": {
            "description": "Squad created",
            "schema": {
              "$ref": "#/definitions/postFleetsFleetIdWingsWingIdSquadsCreatedBody"
            },
            "examples": {
              "application/json": {
                "squad_id": 123
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/postFleetsFleetIdWingsWingIdSquadsForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-fleets.write_fleet.v1"
              }
            }
          },
          "404": {
            "description": "The fleet does not exist or you don't have access to it",
            "schema": {
              "$ref": "#/definitions/postFleetsFleetIdWingsWingIdSquadsNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/postFleetsFleetIdWingsWingIdSquadsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/incursions/": {
      "get": {
        "description": "Return a list of current incursions\n\n---\n\nAlternate route: ` + "`" + `/v1/incursions/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/incursions/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/incursions/` + "`" + `\n\n\n---\n\nThis route is cached for up to 300 seconds",
        "tags": [
          "Incursions"
        ],
        "summary": "List incursions",
        "operationId": "get_incursions",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of incursions",
            "schema": {
              "$ref": "#/definitions/getIncursionsOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "constellation_id": 20000607,
                  "faction_id": 500019,
                  "has_boss": true,
                  "infested_solar_systems": [
                    30004148,
                    30004149,
                    30004150,
                    30004151,
                    30004152,
                    30004153,
                    30004154
                  ],
                  "influence": 1,
                  "staging_solar_system_id": 30004154,
                  "state": "mobilizing",
                  "type": "Incursion"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getIncursionsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 300
      }
    },
    "/industry/facilities/": {
      "get": {
        "description": "Return a list of industry facilities\n\n---\n\nAlternate route: ` + "`" + `/v1/industry/facilities/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/industry/facilities/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/industry/facilities/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Industry"
        ],
        "summary": "List industry facilities",
        "operationId": "get_industry_facilities",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of prices",
            "schema": {
              "$ref": "#/definitions/getIndustryFacilitiesOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "facility_id": 60012544,
                  "owner_id": 1000126,
                  "region_id": 10000001,
                  "solar_system_id": 30000032,
                  "tax": 0.1,
                  "type_id": 2502
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getIndustryFacilitiesInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/industry/systems/": {
      "get": {
        "description": "Return cost indices for solar systems\n\n---\n\nAlternate route: ` + "`" + `/v1/industry/systems/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/industry/systems/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/industry/systems/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Industry"
        ],
        "summary": "List solar system cost indices",
        "operationId": "get_industry_systems",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of cost indicies",
            "schema": {
              "$ref": "#/definitions/getIndustrySystemsOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "cost_indices": [
                    {
                      "activity": "invention",
                      "cost_index": 0.00480411064973412
                    }
                  ],
                  "solar_system_id": 30011392
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getIndustrySystemsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/insurance/prices/": {
      "get": {
        "description": "Return available insurance levels for all ship types\n\n---\n\nAlternate route: ` + "`" + `/v1/insurance/prices/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/insurance/prices/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/insurance/prices/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Insurance"
        ],
        "summary": "List insurance levels",
        "operationId": "get_insurance_prices",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "enum": [
              "de",
              "en-us",
              "fr",
              "ja",
              "ru",
              "zh"
            ],
            "type": "string",
            "default": "en-us",
            "description": "Language to use in the response",
            "name": "language",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of insurance levels for all ship types",
            "schema": {
              "$ref": "#/definitions/getInsurancePricesOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Content-Language": {
                "enum": [
                  "de",
                  "en-us",
                  "fr",
                  "ja",
                  "ru",
                  "zh"
                ],
                "type": "string",
                "description": "The language used in the response"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "levels": [
                    {
                      "cost": 10,
                      "name": "Basic",
                      "payout": 20
                    }
                  ],
                  "type_id": 1
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getInsurancePricesInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/killmails/{killmail_id}/{killmail_hash}/": {
      "get": {
        "description": "Return a single killmail from its ID and hash\n\n---\n\nAlternate route: ` + "`" + `/v1/killmails/{killmail_id}/{killmail_hash}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/killmails/{killmail_id}/{killmail_hash}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/killmails/{killmail_id}/{killmail_hash}/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Killmails"
        ],
        "summary": "Get a single killmail",
        "operationId": "get_killmails_killmail_id_killmail_hash",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The killmail hash for verification",
            "name": "killmail_hash",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "The killmail ID to be queried",
            "name": "killmail_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A killmail",
            "schema": {
              "$ref": "#/definitions/getKillmailsKillmailIdKillmailHashOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "attackers": [
                  {
                    "character_id": 95810944,
                    "corporation_id": 1000179,
                    "damage_done": 5745,
                    "faction_id": 500003,
                    "final_blow": true,
                    "security_status": -0.3,
                    "ship_type_id": 17841,
                    "weapon_type_id": 3074
                  }
                ],
                "killmail_id": 56733821,
                "killmail_time": "2016-10-22T17:13:36Z",
                "solar_system_id": 30002976,
                "victim": {
                  "alliance_id": 621338554,
                  "character_id": 92796241,
                  "corporation_id": 841363671,
                  "damage_taken": 5745,
                  "items": [
                    {
                      "flag": 20,
                      "item_type_id": 5973,
                      "quantity_dropped": 1,
                      "singleton": 0
                    }
                  ],
                  "position": {
                    "x": 452186600569.4748,
                    "y": 146704961490.90222,
                    "z": 109514596532.54477
                  },
                  "ship_type_id": 17812
                }
              }
            }
          },
          "422": {
            "description": "Invalid killmail_id and/or killmail_hash",
            "schema": {
              "$ref": "#/definitions/getKillmailsKillmailIdKillmailHashUnprocessableEntityBody"
            },
            "examples": {
              "application/json": {
                "error": "Unprocessable entity message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getKillmailsKillmailIdKillmailHashInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/loyalty/stores/{corporation_id}/offers/": {
      "get": {
        "description": "Return a list of offers from a specific corporation's loyalty store\n\n---\n\nAlternate route: ` + "`" + `/v1/loyalty/stores/{corporation_id}/offers/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/loyalty/stores/{corporation_id}/offers/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/loyalty/stores/{corporation_id}/offers/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Loyalty"
        ],
        "summary": "List loyalty store offers",
        "operationId": "get_loyalty_stores_corporation_id_offers",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "ID of a corporation",
            "name": "corporation_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of offers",
            "schema": {
              "$ref": "#/definitions/getLoyaltyStoresCorporationIdOffersOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "isk_cost": 0,
                  "lp_cost": 100,
                  "offer_id": 1,
                  "quantity": 1,
                  "required_items": [],
                  "type_id": 123
                },
                {
                  "isk_cost": 1000,
                  "lp_cost": 100,
                  "offer_id": 2,
                  "quantity": 10,
                  "required_items": [
                    {
                      "quantity": 10,
                      "type_id": 1234
                    }
                  ],
                  "type_id": 1235
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getLoyaltyStoresCorporationIdOffersInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/markets/groups/": {
      "get": {
        "description": "Get a list of item groups\n\n---\n\nAlternate route: ` + "`" + `/v1/markets/groups/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/markets/groups/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/markets/groups/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Market"
        ],
        "summary": "Get item groups",
        "operationId": "get_markets_groups",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of item group ids",
            "schema": {
              "description": "200 ok array",
              "type": "array",
              "title": "get_markets_groups_ok",
              "maxItems": 5000,
              "items": {
                "description": "200 ok integer",
                "type": "integer",
                "format": "int32",
                "title": "get_markets_groups_200_ok"
              }
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                1,
                2,
                3
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getMarketsGroupsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/markets/groups/{market_group_id}/": {
      "get": {
        "description": "Get information on an item group\n\n---\n\nAlternate route: ` + "`" + `/v1/markets/groups/{market_group_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/markets/groups/{market_group_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/markets/groups/{market_group_id}/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Market"
        ],
        "summary": "Get item group information",
        "operationId": "get_markets_groups_market_group_id",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "enum": [
              "de",
              "en-us",
              "fr",
              "ja",
              "ru",
              "zh"
            ],
            "type": "string",
            "default": "en-us",
            "description": "Language to use in the response",
            "name": "language",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "An Eve item group ID",
            "name": "market_group_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about an item group",
            "schema": {
              "$ref": "#/definitions/getMarketsGroupsMarketGroupIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Content-Language": {
                "enum": [
                  "de",
                  "en-us",
                  "fr",
                  "ja",
                  "ru",
                  "zh"
                ],
                "type": "string",
                "description": "The language used in the response"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "description": "Small, fast vessels suited to a variety of purposes.",
                "market_group_id": 5,
                "name": "Standard Frigates",
                "parent_group_id": 1361,
                "types": [
                  582,
                  583
                ]
              }
            }
          },
          "404": {
            "description": "Market group not found",
            "schema": {
              "$ref": "#/definitions/getMarketsGroupsMarketGroupIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getMarketsGroupsMarketGroupIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/markets/prices/": {
      "get": {
        "description": "Return a list of prices\n\n---\n\nAlternate route: ` + "`" + `/v1/markets/prices/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/markets/prices/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/markets/prices/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Market"
        ],
        "summary": "List market prices",
        "operationId": "get_markets_prices",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of prices",
            "schema": {
              "$ref": "#/definitions/getMarketsPricesOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "adjusted_price": 306988.09,
                  "average_price": 306292.67,
                  "type_id": 32772
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getMarketsPricesInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/markets/structures/{structure_id}/": {
      "get": {
        "description": "Return all orders in a structure\n\n---\n\nAlternate route: ` + "`" + `/v1/markets/structures/{structure_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/markets/structures/{structure_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/markets/structures/{structure_id}/` + "`" + `\n\n\n---\n\nThis route is cached for up to 300 seconds",
        "tags": [
          "Market"
        ],
        "summary": "List orders in a structure",
        "operationId": "get_markets_structures_structure_id",
        "security": [
          {
            "evesso": [
              "esi-markets.structure_markets.v1"
            ]
          }
        ],
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 1,
            "description": "Which page to query, starting at 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Return orders in this structure",
            "name": "structure_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of orders",
            "schema": {
              "$ref": "#/definitions/getMarketsStructuresStructureIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "duration": 90,
                  "is_buy_order": false,
                  "issued": "2016-09-03T05:12:25Z",
                  "location_id": 60005599,
                  "min_volume": 1,
                  "order_id": 4623824223,
                  "price": 9.9,
                  "range": "region",
                  "type_id": 34,
                  "volume_remain": 1296000,
                  "volume_total": 2000000
                }
              ]
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getMarketsStructuresStructureIdForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-markets.structure_markets.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getMarketsStructuresStructureIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 300
      }
    },
    "/markets/{region_id}/history/": {
      "get": {
        "description": "Return a list of historical market statistics for the specified type in a region\n\n---\n\nAlternate route: ` + "`" + `/v1/markets/{region_id}/history/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/markets/{region_id}/history/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/markets/{region_id}/history/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Market"
        ],
        "summary": "List historical market statistics in a region",
        "operationId": "get_markets_region_id_history",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Return statistics in this region",
            "name": "region_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Return statistics for this type",
            "name": "type_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of historical market statistics",
            "schema": {
              "$ref": "#/definitions/getMarketsRegionIdHistoryOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "average": 5.25,
                  "date": "2015-05-01",
                  "highest": 5.27,
                  "lowest": 5.11,
                  "order_count": 2267,
                  "volume": 16276782035
                }
              ]
            }
          },
          "422": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/getMarketsRegionIdHistoryUnprocessableEntityBody"
            },
            "examples": {
              "application/json": {
                "error": "Unprocessable entity message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getMarketsRegionIdHistoryInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/markets/{region_id}/orders/": {
      "get": {
        "description": "Return a list of orders in a region\n\n---\n\nAlternate route: ` + "`" + `/v1/markets/{region_id}/orders/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/markets/{region_id}/orders/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/markets/{region_id}/orders/` + "`" + `\n\n\n---\n\nThis route is cached for up to 300 seconds",
        "tags": [
          "Market"
        ],
        "summary": "List orders in a region",
        "operationId": "get_markets_region_id_orders",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "enum": [
              "buy",
              "sell",
              "all"
            ],
            "type": "string",
            "default": "all",
            "description": "Filter buy/sell orders, return all orders by default. If you query without type_id, we always return both buy and sell orders.\n",
            "name": "order_type",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 1,
            "description": "Which page to query, only used for querying without type_id. Starting at 1\n",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Return orders in this region",
            "name": "region_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Return orders only for this type",
            "name": "type_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of orders",
            "schema": {
              "$ref": "#/definitions/getMarketsRegionIdOrdersOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "duration": 90,
                  "is_buy_order": false,
                  "issued": "2016-09-03T05:12:25Z",
                  "location_id": 60005599,
                  "min_volume": 1,
                  "order_id": 4623824223,
                  "price": 9.9,
                  "range": "region",
                  "type_id": 34,
                  "volume_remain": 1296000,
                  "volume_total": 2000000
                }
              ]
            }
          },
          "422": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/getMarketsRegionIdOrdersUnprocessableEntityBody"
            },
            "examples": {
              "application/json": {
                "error": "Unprocessable entity message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getMarketsRegionIdOrdersInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 300
      }
    },
    "/opportunities/groups/": {
      "get": {
        "description": "Return a list of opportunities groups\n\n---\n\nAlternate route: ` + "`" + `/v1/opportunities/groups/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/opportunities/groups/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/opportunities/groups/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Opportunities"
        ],
        "summary": "Get opportunities groups",
        "operationId": "get_opportunities_groups",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of opportunities group ids",
            "schema": {
              "description": "200 ok array",
              "type": "array",
              "title": "get_opportunities_groups_ok",
              "maxItems": 50,
              "items": {
                "description": "200 ok integer",
                "type": "integer",
                "format": "int32",
                "title": "get_opportunities_groups_200_ok"
              }
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                100,
                101,
                102,
                103
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getOpportunitiesGroupsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/opportunities/groups/{group_id}/": {
      "get": {
        "description": "Return information of an opportunities group\n\n---\n\nAlternate route: ` + "`" + `/v1/opportunities/groups/{group_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/opportunities/groups/{group_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/opportunities/groups/{group_id}/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Opportunities"
        ],
        "summary": "Get opportunities group",
        "operationId": "get_opportunities_groups_group_id",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "ID of an opportunities group",
            "name": "group_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "de",
              "en-us",
              "fr",
              "ja",
              "ru",
              "zh"
            ],
            "type": "string",
            "default": "en-us",
            "description": "Language to use in the response",
            "name": "language",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of an opportunities group",
            "schema": {
              "$ref": "#/definitions/getOpportunitiesGroupsGroupIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Content-Language": {
                "enum": [
                  "de",
                  "en-us",
                  "fr",
                  "ja",
                  "ru",
                  "zh"
                ],
                "type": "string",
                "description": "The language used in the response"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "connected_groups": [
                  100
                ],
                "description": "As a capsuleer...",
                "group_id": 103,
                "name": "Welcome to New Eden",
                "notification": "Completed:\u003cbr\u003eWelcome to New Eden",
                "required_tasks": [
                  19
                ]
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getOpportunitiesGroupsGroupIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/opportunities/tasks/": {
      "get": {
        "description": "Return a list of opportunities tasks\n\n---\n\nAlternate route: ` + "`" + `/v1/opportunities/tasks/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/opportunities/tasks/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/opportunities/tasks/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Opportunities"
        ],
        "summary": "Get opportunities tasks",
        "operationId": "get_opportunities_tasks",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of opportunities task ids",
            "schema": {
              "description": "200 ok array",
              "type": "array",
              "title": "get_opportunities_tasks_ok",
              "maxItems": 100,
              "items": {
                "description": "200 ok integer",
                "type": "integer",
                "format": "int32",
                "title": "get_opportunities_tasks_200_ok"
              }
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                1,
                2,
                3,
                4
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getOpportunitiesTasksInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/opportunities/tasks/{task_id}/": {
      "get": {
        "description": "Return information of an opportunities task\n\n---\n\nAlternate route: ` + "`" + `/v1/opportunities/tasks/{task_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/opportunities/tasks/{task_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/opportunities/tasks/{task_id}/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Opportunities"
        ],
        "summary": "Get opportunities task",
        "operationId": "get_opportunities_tasks_task_id",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "ID of an opportunities task",
            "name": "task_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Details of an opportunities task",
            "schema": {
              "$ref": "#/definitions/getOpportunitiesTasksTaskIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "description": "To use station services...",
                "name": "Dock in the station",
                "notification": "Completed:\u003cbr\u003eDocked in a station!",
                "task_id": 10
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getOpportunitiesTasksTaskIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/search/": {
      "get": {
        "description": "Search for entities that match a given sub-string.\n\n---\n\nAlternate route: ` + "`" + `/v1/search/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/search/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Search"
        ],
        "summary": "Search on a string",
        "operationId": "get_search",
        "parameters": [
          {
            "maxItems": 10,
            "minItems": 1,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "enum": [
                "agent",
                "alliance",
                "character",
                "constellation",
                "corporation",
                "faction",
                "inventorytype",
                "region",
                "solarsystem",
                "station",
                "wormhole"
              ],
              "type": "string"
            },
            "description": "Type of entities to search for",
            "name": "categories",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "enum": [
              "en-us",
              "de",
              "fr",
              "ru",
              "ja",
              "zh"
            ],
            "type": "string",
            "default": "en-us",
            "description": "Search locale",
            "name": "language",
            "in": "query"
          },
          {
            "minLength": 3,
            "type": "string",
            "description": "The string to search on",
            "name": "search",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Whether the search should be a strict match",
            "name": "strict",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of search results",
            "schema": {
              "$ref": "#/definitions/getSearchOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "solarsystem": [
                  30002510
                ],
                "station": [
                  60004588,
                  60004594,
                  60005725,
                  60009106,
                  60012721,
                  60012724,
                  60012727
                ]
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getSearchInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/sovereignty/campaigns/": {
      "get": {
        "description": "Shows sovereignty data for campaigns.\n\n---\n\nAlternate route: ` + "`" + `/v1/sovereignty/campaigns/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/sovereignty/campaigns/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/sovereignty/campaigns/` + "`" + `\n\n\n---\n\nThis route is cached for up to 5 seconds",
        "tags": [
          "Sovereignty"
        ],
        "summary": "List sovereignty campaigns",
        "operationId": "get_sovereignty_campaigns",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of sovereignty campaigns",
            "schema": {
              "$ref": "#/definitions/getSovereigntyCampaignsOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "attackers_score": 0.4,
                  "campaign_id": 32833,
                  "constellation_id": 20000125,
                  "defender_id": 1695357456,
                  "defender_score": 0.6,
                  "event_type": "station_defense",
                  "solar_system_id": 30000856,
                  "start_time": "2016-10-29T14:34:40Z",
                  "structure_id": 61001096
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getSovereigntyCampaignsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 5
      }
    },
    "/sovereignty/map/": {
      "get": {
        "description": "Shows sovereignty information for solar systems\n\n---\n\nAlternate route: ` + "`" + `/v1/sovereignty/map/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/sovereignty/map/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/sovereignty/map/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Sovereignty"
        ],
        "summary": "List sovereignty of systems",
        "operationId": "get_sovereignty_map",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of sovereignty information for solar systems in New Eden",
            "schema": {
              "$ref": "#/definitions/getSovereigntyMapOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "faction_id": 500001,
                  "system_id": 30045334
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getSovereigntyMapInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/sovereignty/structures/": {
      "get": {
        "description": "Shows sovereignty data for structures.\n\n---\n\nAlternate route: ` + "`" + `/v1/sovereignty/structures/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/sovereignty/structures/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/sovereignty/structures/` + "`" + `\n\n\n---\n\nThis route is cached for up to 120 seconds",
        "tags": [
          "Sovereignty"
        ],
        "summary": "List sovereignty structures",
        "operationId": "get_sovereignty_structures",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of sovereignty structures",
            "schema": {
              "$ref": "#/definitions/getSovereigntyStructuresOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "alliance_id": 498125261,
                  "solar_system_id": 30000570,
                  "structure_id": 1018253388776,
                  "structure_type_id": 32226,
                  "vulnerability_occupancy_level": 2,
                  "vulnerable_end_time": "2016-10-29T05:30:00Z",
                  "vulnerable_start_time": "2016-10-28T20:30:00Z"
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getSovereigntyStructuresInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 120
      }
    },
    "/status/": {
      "get": {
        "description": "EVE Server status\n\n---\n\nAlternate route: ` + "`" + `/v1/status/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/status/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/status/` + "`" + `\n\n\n---\n\nThis route is cached for up to 30 seconds",
        "tags": [
          "Status"
        ],
        "summary": "Retrieve the uptime and player counts",
        "operationId": "get_status",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Server status",
            "schema": {
              "$ref": "#/definitions/getStatusOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "players": 12345,
                "server_version": "1132976",
                "start_time": "2017-01-02T12:34:56Z"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getStatusInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 30
      }
    },
    "/ui/autopilot/waypoint/": {
      "post": {
        "description": "Set a solar system as autopilot waypoint\n\n---\n\nAlternate route: ` + "`" + `/v2/ui/autopilot/waypoint/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/ui/autopilot/waypoint/` + "`" + `\n",
        "tags": [
          "User Interface"
        ],
        "summary": "Set Autopilot Waypoint",
        "operationId": "post_ui_autopilot_waypoint",
        "security": [
          {
            "evesso": [
              "esi-ui.write_waypoint.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "description": "Whether this solar system should be added to the beginning of all waypoints",
            "name": "add_to_beginning",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Whether clean other waypoints beforing adding this one",
            "name": "clear_other_waypoints",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The destination to travel to, can be solar system, station or structure's id",
            "name": "destination_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Open window request received"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/postUiAutopilotWaypointForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-ui.write_waypoint.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/postUiAutopilotWaypointInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "v2"
        ]
      }
    },
    "/ui/openwindow/contract/": {
      "post": {
        "description": "Open the contract window inside the client\n\n---\n\nAlternate route: ` + "`" + `/v1/ui/openwindow/contract/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/ui/openwindow/contract/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/ui/openwindow/contract/` + "`" + `\n",
        "tags": [
          "User Interface"
        ],
        "summary": "Open Contract Window",
        "operationId": "post_ui_openwindow_contract",
        "security": [
          {
            "evesso": [
              "esi-ui.open_window.v1"
            ]
          }
        ],
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "The contract to open",
            "name": "contract_id",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Open window request received"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/postUiOpenwindowContractForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-ui.open_window.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/postUiOpenwindowContractInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/ui/openwindow/information/": {
      "post": {
        "description": "Open the information window for a character, corporation or alliance inside the client\n\n---\n\nAlternate route: ` + "`" + `/v1/ui/openwindow/information/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/ui/openwindow/information/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/ui/openwindow/information/` + "`" + `\n",
        "tags": [
          "User Interface"
        ],
        "summary": "Open Information Window",
        "operationId": "post_ui_openwindow_information",
        "security": [
          {
            "evesso": [
              "esi-ui.open_window.v1"
            ]
          }
        ],
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "The target to open",
            "name": "target_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Open window request received"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/postUiOpenwindowInformationForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-ui.open_window.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/postUiOpenwindowInformationInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/ui/openwindow/marketdetails/": {
      "post": {
        "description": "Open the market details window for a specific typeID inside the client\n\n---\n\nAlternate route: ` + "`" + `/v1/ui/openwindow/marketdetails/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/ui/openwindow/marketdetails/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/ui/openwindow/marketdetails/` + "`" + `\n",
        "tags": [
          "User Interface"
        ],
        "summary": "Open Market Details",
        "operationId": "post_ui_openwindow_marketdetails",
        "security": [
          {
            "evesso": [
              "esi-ui.open_window.v1"
            ]
          }
        ],
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "The item type to open in market window",
            "name": "type_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Open window request received"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/postUiOpenwindowMarketdetailsForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-ui.open_window.v1"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/postUiOpenwindowMarketdetailsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/ui/openwindow/newmail/": {
      "post": {
        "description": "Open the New Mail window, according to settings from the request if applicable\n\n---\n\nAlternate route: ` + "`" + `/v1/ui/openwindow/newmail/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/ui/openwindow/newmail/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/ui/openwindow/newmail/` + "`" + `\n",
        "tags": [
          "User Interface"
        ],
        "summary": "Open New Mail Window",
        "operationId": "post_ui_openwindow_newmail",
        "security": [
          {
            "evesso": [
              "esi-ui.open_window.v1"
            ]
          }
        ],
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "description": "The details of mail to create",
            "name": "new_mail",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/postUiOpenwindowNewmailParamsBody"
            }
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Open window request received"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/postUiOpenwindowNewmailForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-ui.open_window.v1"
              }
            }
          },
          "422": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/postUiOpenwindowNewmailUnprocessableEntityBody"
            },
            "examples": {
              "application/json": {
                "error": "Unprocessable entity message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/postUiOpenwindowNewmailInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/universe/bloodlines/": {
      "get": {
        "description": "Get a list of bloodlines\n\n---\n\nAlternate route: ` + "`" + `/v1/universe/bloodlines/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/universe/bloodlines/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/bloodlines/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Universe"
        ],
        "summary": "Get bloodlines",
        "operationId": "get_universe_bloodlines",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "enum": [
              "de",
              "en-us",
              "fr",
              "ja",
              "ru",
              "zh"
            ],
            "type": "string",
            "default": "en-us",
            "description": "Language to use in the response",
            "name": "language",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of bloodlines",
            "schema": {
              "$ref": "#/definitions/getUniverseBloodlinesOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Content-Language": {
                "enum": [
                  "de",
                  "en-us",
                  "fr",
                  "ja",
                  "ru",
                  "zh"
                ],
                "type": "string",
                "description": "The language used in the response"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "bloodline_id": 1,
                  "charisma": 6,
                  "corporation_id": 1000006,
                  "description": "The Deteis are regarded as ...",
                  "intelligence": 7,
                  "memory": 7,
                  "name": "Deteis",
                  "perception": 5,
                  "race_id": 1,
                  "ship_type_id": 601,
                  "willpower": 5
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseBloodlinesInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/universe/categories/": {
      "get": {
        "description": "Get a list of item categories\n\n---\n\nAlternate route: ` + "`" + `/v1/universe/categories/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/universe/categories/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/categories/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Universe"
        ],
        "summary": "Get item categories",
        "operationId": "get_universe_categories",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of item category ids",
            "schema": {
              "description": "200 ok array",
              "type": "array",
              "title": "get_universe_categories_ok",
              "maxItems": 10000,
              "items": {
                "description": "200 ok integer",
                "type": "integer",
                "format": "int32",
                "title": "get_universe_categories_200_ok"
              }
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                1,
                2,
                3
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseCategoriesInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/universe/categories/{category_id}/": {
      "get": {
        "description": "Get information of an item category\n\n---\n\nAlternate route: ` + "`" + `/v1/universe/categories/{category_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/universe/categories/{category_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/categories/{category_id}/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Universe"
        ],
        "summary": "Get item category information",
        "operationId": "get_universe_categories_category_id",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "An Eve item category ID",
            "name": "category_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "enum": [
              "de",
              "en-us",
              "fr",
              "ja",
              "ru",
              "zh"
            ],
            "type": "string",
            "default": "en-us",
            "description": "Language to use in the response",
            "name": "language",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about an item category",
            "schema": {
              "$ref": "#/definitions/getUniverseCategoriesCategoryIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Content-Language": {
                "enum": [
                  "de",
                  "en-us",
                  "fr",
                  "ja",
                  "ru",
                  "zh"
                ],
                "type": "string",
                "description": "The language used in the response"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "category_id": 6,
                "groups": [
                  25,
                  26,
                  27
                ],
                "name": "Ship",
                "published": true
              }
            }
          },
          "404": {
            "description": "Category not found",
            "schema": {
              "$ref": "#/definitions/getUniverseCategoriesCategoryIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseCategoriesCategoryIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/universe/constellations/": {
      "get": {
        "description": "Get a list of constellations\n\n---\n\nAlternate route: ` + "`" + `/v1/universe/constellations/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/universe/constellations/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/constellations/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Universe"
        ],
        "summary": "Get constellations",
        "operationId": "get_universe_constellations",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of constellation ids",
            "schema": {
              "description": "200 ok array",
              "type": "array",
              "title": "get_universe_constellations_ok",
              "maxItems": 10000,
              "items": {
                "description": "200 ok integer",
                "type": "integer",
                "format": "int32",
                "title": "get_universe_constellations_200_ok"
              }
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                20000001,
                20000002
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseConstellationsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/universe/constellations/{constellation_id}/": {
      "get": {
        "description": "Get information on a constellation\n\n---\n\nAlternate route: ` + "`" + `/v1/universe/constellations/{constellation_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/universe/constellations/{constellation_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/constellations/{constellation_id}/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Universe"
        ],
        "summary": "Get constellation information",
        "operationId": "get_universe_constellations_constellation_id",
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "constellation_id integer",
            "name": "constellation_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "enum": [
              "de",
              "en-us",
              "fr",
              "ja",
              "ru",
              "zh"
            ],
            "type": "string",
            "default": "en-us",
            "description": "Language to use in the response",
            "name": "language",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about a constellation",
            "schema": {
              "$ref": "#/definitions/getUniverseConstellationsConstellationIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Content-Language": {
                "enum": [
                  "de",
                  "en-us",
                  "fr",
                  "ja",
                  "ru",
                  "zh"
                ],
                "type": "string",
                "description": "The language used in the response"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "constellation_id": 20000009,
                "name": "Mekashtad",
                "position": {
                  "x": 67796138757472320,
                  "y": -70591121348560960,
                  "z": -59587016159270070
                },
                "region_id": 10000001,
                "systems": [
                  20000302,
                  20000303
                ]
              }
            }
          },
          "404": {
            "description": "Constellation not found",
            "schema": {
              "$ref": "#/definitions/getUniverseConstellationsConstellationIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseConstellationsConstellationIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/universe/factions/": {
      "get": {
        "description": "Get a list of factions\n\n---\n\nAlternate route: ` + "`" + `/v1/universe/factions/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/universe/factions/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/factions/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Universe"
        ],
        "summary": "Get factions",
        "operationId": "get_universe_factions",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "enum": [
              "de",
              "en-us",
              "fr",
              "ja",
              "ru",
              "zh"
            ],
            "type": "string",
            "default": "en-us",
            "description": "Language to use in the response",
            "name": "language",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of factions",
            "schema": {
              "$ref": "#/definitions/getUniverseFactionsOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Content-Language": {
                "enum": [
                  "de",
                  "en-us",
                  "fr",
                  "ja",
                  "ru",
                  "zh"
                ],
                "type": "string",
                "description": "The language used in the response"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "corporation_id": 456,
                  "description": "blah blah",
                  "faction_id": 1,
                  "is_unique": true,
                  "name": "Faction",
                  "size_factor": 1,
                  "solar_system_id": 123,
                  "station_count": 1000,
                  "station_system_count": 100
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseFactionsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/universe/graphics/": {
      "get": {
        "description": "Get a list of graphics\n\n---\n\nAlternate route: ` + "`" + `/v1/universe/graphics/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/universe/graphics/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/graphics/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Universe"
        ],
        "summary": "Get graphics",
        "operationId": "get_universe_graphics",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of graphic ids",
            "schema": {
              "description": "200 ok array",
              "type": "array",
              "title": "get_universe_graphics_ok",
              "maxItems": 10000,
              "items": {
                "description": "200 ok integer",
                "type": "integer",
                "format": "int32",
                "title": "get_universe_graphics_200_ok"
              }
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                10,
                4106
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseGraphicsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/universe/graphics/{graphic_id}/": {
      "get": {
        "description": "Get information on a graphic\n\n---\n\nAlternate route: ` + "`" + `/v1/universe/graphics/{graphic_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/universe/graphics/{graphic_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/graphics/{graphic_id}/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Universe"
        ],
        "summary": "Get graphic information",
        "operationId": "get_universe_graphics_graphic_id",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "graphic_id integer",
            "name": "graphic_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about a graphic",
            "schema": {
              "$ref": "#/definitions/getUniverseGraphicsGraphicIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "graphic_file": "res:/dx9/model/worldobject/planet/moon.red",
                "graphic_id": 10
              }
            }
          },
          "404": {
            "description": "Graphic not found",
            "schema": {
              "$ref": "#/definitions/getUniverseGraphicsGraphicIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseGraphicsGraphicIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/universe/groups/": {
      "get": {
        "description": "Get a list of item groups\n\n---\n\nAlternate route: ` + "`" + `/v1/universe/groups/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/universe/groups/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/groups/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Universe"
        ],
        "summary": "Get item groups",
        "operationId": "get_universe_groups",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "description": "Which page to query",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of item group ids",
            "schema": {
              "description": "200 ok array",
              "type": "array",
              "title": "get_universe_groups_ok",
              "maxItems": 1000,
              "items": {
                "description": "200 ok integer",
                "type": "integer",
                "format": "int32",
                "title": "get_universe_groups_200_ok"
              }
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                1,
                2,
                3
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseGroupsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/universe/groups/{group_id}/": {
      "get": {
        "description": "Get information on an item group\n\n---\n\nAlternate route: ` + "`" + `/v1/universe/groups/{group_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/universe/groups/{group_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/groups/{group_id}/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Universe"
        ],
        "summary": "Get item group information",
        "operationId": "get_universe_groups_group_id",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "An Eve item group ID",
            "name": "group_id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "de",
              "en-us",
              "fr",
              "ja",
              "ru",
              "zh"
            ],
            "type": "string",
            "default": "en-us",
            "description": "Language to use in the response",
            "name": "language",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about an item group",
            "schema": {
              "$ref": "#/definitions/getUniverseGroupsGroupIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Content-Language": {
                "enum": [
                  "de",
                  "en-us",
                  "fr",
                  "ja",
                  "ru",
                  "zh"
                ],
                "type": "string",
                "description": "The language used in the response"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "category_id": 6,
                "group_id": 25,
                "name": "Frigate",
                "published": true,
                "types": [
                  587,
                  586,
                  585
                ]
              }
            }
          },
          "404": {
            "description": "Group not found",
            "schema": {
              "$ref": "#/definitions/getUniverseGroupsGroupIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseGroupsGroupIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/universe/moons/{moon_id}/": {
      "get": {
        "description": "Get information on a moon\n\n---\n\nAlternate route: ` + "`" + `/v1/universe/moons/{moon_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/universe/moons/{moon_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/moons/{moon_id}/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Universe"
        ],
        "summary": "Get moon information",
        "operationId": "get_universe_moons_moon_id",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "moon_id integer",
            "name": "moon_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about a moon",
            "schema": {
              "$ref": "#/definitions/getUniverseMoonsMoonIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "moon_id": 40000042,
                "name": "Akpivem I - Moon 1",
                "position": {
                  "x": 58605102008,
                  "y": -3066616285,
                  "z": -55193617920
                },
                "system_id": 30000003
              }
            }
          },
          "404": {
            "description": "Moon not found",
            "schema": {
              "$ref": "#/definitions/getUniverseMoonsMoonIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseMoonsMoonIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/universe/names/": {
      "post": {
        "description": "Resolve a set of IDs to names and categories. Supported ID's for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.\n\n---\n\nAlternate route: ` + "`" + `/v2/universe/names/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/names/` + "`" + `\n",
        "tags": [
          "Universe"
        ],
        "summary": "Get names and categories for a set of ID's",
        "operationId": "post_universe_names",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "description": "The ids to resolve",
            "name": "ids",
            "in": "body",
            "required": true,
            "schema": {
              "description": "ids array",
              "type": "array",
              "title": "post_universe_names_ids",
              "maxItems": 1000,
              "minItems": 1,
              "uniqueItems": true,
              "items": {
                "description": "id integer",
                "type": "integer",
                "format": "int32",
                "title": "post_universe_names_id"
              },
              "example": [
                95465499,
                30000142
              ]
            }
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "List of id/name associations for a set of ID's. ID's that cannot be resolved are not returned.",
            "schema": {
              "$ref": "#/definitions/postUniverseNamesOKBody"
            },
            "examples": {
              "application/json": [
                {
                  "category": "character",
                  "id": 95465499,
                  "name": "CCP Bartender"
                },
                {
                  "category": "solar_system",
                  "id": 30000142,
                  "name": "Jita"
                }
              ]
            }
          },
          "404": {
            "description": "no valid IDs found",
            "schema": {
              "$ref": "#/definitions/postUniverseNamesNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/postUniverseNamesInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "v2"
        ]
      }
    },
    "/universe/planets/{planet_id}/": {
      "get": {
        "description": "Get information on a planet\n\n---\n\nAlternate route: ` + "`" + `/v1/universe/planets/{planet_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/universe/planets/{planet_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/planets/{planet_id}/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Universe"
        ],
        "summary": "Get planet information",
        "operationId": "get_universe_planets_planet_id",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "planet_id integer",
            "name": "planet_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about a planet",
            "schema": {
              "$ref": "#/definitions/getUniversePlanetsPlanetIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "name": "Akpivem III",
                "planet_id": 40000046,
                "position": {
                  "x": -189226344497,
                  "y": 9901605317,
                  "z": -254852632979
                },
                "system_id": 30000003,
                "type_id": 13
              }
            }
          },
          "404": {
            "description": "Planet not found",
            "schema": {
              "$ref": "#/definitions/getUniversePlanetsPlanetIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniversePlanetsPlanetIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/universe/races/": {
      "get": {
        "description": "Get a list of character races\n\n---\n\nAlternate route: ` + "`" + `/v1/universe/races/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/universe/races/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/races/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Universe"
        ],
        "summary": "Get character races",
        "operationId": "get_universe_races",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "enum": [
              "de",
              "en-us",
              "fr",
              "ja",
              "ru",
              "zh"
            ],
            "type": "string",
            "default": "en-us",
            "description": "Language to use in the response",
            "name": "language",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of character races",
            "schema": {
              "$ref": "#/definitions/getUniverseRacesOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Content-Language": {
                "enum": [
                  "de",
                  "en-us",
                  "fr",
                  "ja",
                  "ru",
                  "zh"
                ],
                "type": "string",
                "description": "The language used in the response"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "alliance_id": 500001,
                  "description": "Founded on the tenets of patriotism and hard work...",
                  "name": "Caldari",
                  "race_id": 1
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseRacesInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/universe/regions/": {
      "get": {
        "description": "Get a list of regions\n\n---\n\nAlternate route: ` + "`" + `/v1/universe/regions/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/universe/regions/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/regions/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Universe"
        ],
        "summary": "Get regions",
        "operationId": "get_universe_regions",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of region ids",
            "schema": {
              "description": "200 ok array",
              "type": "array",
              "title": "get_universe_regions_ok",
              "maxItems": 1000,
              "items": {
                "description": "200 ok integer",
                "type": "integer",
                "format": "int32",
                "title": "get_universe_regions_200_ok"
              }
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                11000001,
                11000002
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseRegionsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/universe/regions/{region_id}/": {
      "get": {
        "description": "Get information on a region\n\n---\n\nAlternate route: ` + "`" + `/v1/universe/regions/{region_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/universe/regions/{region_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/regions/{region_id}/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Universe"
        ],
        "summary": "Get region information",
        "operationId": "get_universe_regions_region_id",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "enum": [
              "de",
              "en-us",
              "fr",
              "ja",
              "ru",
              "zh"
            ],
            "type": "string",
            "default": "en-us",
            "description": "Language to use in the response",
            "name": "language",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "region_id integer",
            "name": "region_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about a region",
            "schema": {
              "$ref": "#/definitions/getUniverseRegionsRegionIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Content-Language": {
                "enum": [
                  "de",
                  "en-us",
                  "fr",
                  "ja",
                  "ru",
                  "zh"
                ],
                "type": "string",
                "description": "The language used in the response"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "constellations": [
                  20000302,
                  20000303
                ],
                "description": "It has long been an established fact of civilization...",
                "name": "Metropolis",
                "region_id": 10000042
              }
            }
          },
          "404": {
            "description": "Region not found",
            "schema": {
              "$ref": "#/definitions/getUniverseRegionsRegionIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseRegionsRegionIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/universe/schematics/{schematic_id}/": {
      "get": {
        "description": "Get information on a planetary factory schematic\n\n---\n\nAlternate route: ` + "`" + `/v1/universe/schematics/{schematic_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/universe/schematics/{schematic_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/schematics/{schematic_id}/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Planetary Interaction"
        ],
        "summary": "Get schematic information",
        "operationId": "get_universe_schematics_schematic_id",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "A PI schematic ID",
            "name": "schematic_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Public data about a schematic",
            "schema": {
              "$ref": "#/definitions/getUniverseSchematicsSchematicIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "cycle_time": 1800,
                "schematic_name": "Bacteria"
              }
            }
          },
          "404": {
            "description": "Schematic not found",
            "schema": {
              "$ref": "#/definitions/getUniverseSchematicsSchematicIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Schematic not found"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseSchematicsSchematicIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/universe/stargates/{stargate_id}/": {
      "get": {
        "description": "Get information on a stargate\n\n---\n\nAlternate route: ` + "`" + `/v1/universe/stargates/{stargate_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/universe/stargates/{stargate_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/stargates/{stargate_id}/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Universe"
        ],
        "summary": "Get stargate information",
        "operationId": "get_universe_stargates_stargate_id",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "stargate_id integer",
            "name": "stargate_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about a stargate",
            "schema": {
              "$ref": "#/definitions/getUniverseStargatesStargateIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "destination": {
                  "stargate_id": 50000056,
                  "system_id": 30000001
                },
                "name": "Stargate (Tanoo)",
                "position": {
                  "x": -101092761600,
                  "y": 5279539200,
                  "z": 1550503403520
                },
                "stargate_id": 50000342,
                "system_id": 30000003,
                "type_id": 29624
              }
            }
          },
          "404": {
            "description": "Stargate not found",
            "schema": {
              "$ref": "#/definitions/getUniverseStargatesStargateIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseStargatesStargateIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/universe/stations/{station_id}/": {
      "get": {
        "description": "Get information on a station\n\n---\n\nAlternate route: ` + "`" + `/v2/universe/stations/{station_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/stations/{station_id}/` + "`" + `\n\n\n---\n\nThis route is cached for up to 300 seconds",
        "tags": [
          "Universe"
        ],
        "summary": "Get station information",
        "operationId": "get_universe_stations_station_id",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "station_id integer",
            "name": "station_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about a station",
            "schema": {
              "$ref": "#/definitions/getUniverseStationsStationIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "max_dockable_ship_volume": 50000000,
                "name": "Jakanerva III - Moon 15 - Prompt Delivery Storage",
                "office_rental_cost": 10000,
                "owner": 1000003,
                "position": {
                  "x": 165632286720,
                  "y": 2771804160,
                  "z": -2455331266560
                },
                "race_id": 1,
                "reprocessing_efficiency": 0.5,
                "reprocessing_stations_take": 0.05,
                "services": [
                  "courier-missions",
                  "reprocessing-plant",
                  "market",
                  "repair-facilities",
                  "fitting",
                  "news",
                  "storage",
                  "insurance",
                  "docking",
                  "office-rental",
                  "loyalty-point-store",
                  "navy-offices"
                ],
                "station_id": 60000277,
                "system_id": 30000148,
                "type_id": 1531
              }
            }
          },
          "404": {
            "description": "Station not found",
            "schema": {
              "$ref": "#/definitions/getUniverseStationsStationIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseStationsStationIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "v2"
        ],
        "x-cached-seconds": 300
      }
    },
    "/universe/structures/": {
      "get": {
        "description": "List all public structures\n\n---\n\nAlternate route: ` + "`" + `/v1/universe/structures/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/universe/structures/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/structures/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Universe"
        ],
        "summary": "List all public structures",
        "operationId": "get_universe_structures",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "List of public structure IDs",
            "schema": {
              "description": "200 ok array",
              "type": "array",
              "title": "get_universe_structures_ok",
              "maxItems": 10000,
              "uniqueItems": true,
              "items": {
                "description": "200 ok integer",
                "type": "integer",
                "format": "int64",
                "title": "get_universe_structures_200_ok",
                "minimum": 0
              }
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                1000000017013,
                1000000025062
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseStructuresInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/universe/structures/{structure_id}/": {
      "get": {
        "description": "Returns information on requested structure, if you are on the ACL. Otherwise, returns \"Forbidden\" for all inputs.\n\n---\n\nAlternate route: ` + "`" + `/v1/universe/structures/{structure_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/universe/structures/{structure_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/structures/{structure_id}/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Universe"
        ],
        "summary": "Get structure information",
        "operationId": "get_universe_structures_structure_id",
        "security": [
          {
            "evesso": [
              "esi-universe.read_structures.v1"
            ]
          }
        ],
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "An Eve structure ID",
            "name": "structure_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Access token to use, if preferred over a header",
            "name": "token",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Data about a structure",
            "schema": {
              "$ref": "#/definitions/getUniverseStructuresStructureIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "name": "V-3YG7 VI - The Capital",
                "solar_system_id": 30000142
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/getUniverseStructuresStructureIdForbiddenBody"
            },
            "examples": {
              "application/json": {
                "error": "Token is not valid for scope(s): esi-universe.read_structures.v1"
              }
            }
          },
          "404": {
            "description": "Structure not found",
            "schema": {
              "$ref": "#/definitions/getUniverseStructuresStructureIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseStructuresStructureIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/universe/system_jumps/": {
      "get": {
        "description": "Get the number of jumps in solar systems within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with jumps will be listed\n\n---\n\nAlternate route: ` + "`" + `/v1/universe/system_jumps/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/universe/system_jumps/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/system_jumps/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Universe"
        ],
        "summary": "Get system jumps",
        "operationId": "get_universe_system_jumps",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of systems and number of jumps",
            "schema": {
              "$ref": "#/definitions/getUniverseSystemJumpsOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "ship_jumps": 42,
                  "system_id": 30002410
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseSystemJumpsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/universe/system_kills/": {
      "get": {
        "description": "Get the number of ship, pod and NPC kills per solar system within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with kills will be listed\n\n---\n\nAlternate route: ` + "`" + `/v1/universe/system_kills/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/universe/system_kills/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Universe"
        ],
        "summary": "Get system kills",
        "operationId": "get_universe_system_kills",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of systems and number of ship, pod and NPC kills",
            "schema": {
              "$ref": "#/definitions/getUniverseSystemKillsOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "npc_kills": 0,
                  "pod_kills": 24,
                  "ship_kills": 42,
                  "system_id": 30002410
                }
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseSystemKillsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/universe/systems/": {
      "get": {
        "description": "Get a list of solar systems\n\n---\n\nAlternate route: ` + "`" + `/v1/universe/systems/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/universe/systems/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/systems/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Universe"
        ],
        "summary": "Get solar systems",
        "operationId": "get_universe_systems",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of solar system ids",
            "schema": {
              "description": "200 ok array",
              "type": "array",
              "title": "get_universe_systems_ok",
              "maxItems": 10000,
              "items": {
                "description": "200 ok integer",
                "type": "integer",
                "format": "int32",
                "title": "get_universe_systems_200_ok"
              }
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                30000001,
                30000002
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseSystemsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/universe/systems/{system_id}/": {
      "get": {
        "description": "Get information on a solar system\n\n---\n\nAlternate route: ` + "`" + `/v2/universe/systems/{system_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/systems/{system_id}/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Universe"
        ],
        "summary": "Get solar system information",
        "operationId": "get_universe_systems_system_id",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "enum": [
              "de",
              "en-us",
              "fr",
              "ja",
              "ru",
              "zh"
            ],
            "type": "string",
            "default": "en-us",
            "description": "Language to use in the response",
            "name": "language",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "system_id integer",
            "name": "system_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about a solar system",
            "schema": {
              "$ref": "#/definitions/getUniverseSystemsSystemIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Content-Language": {
                "enum": [
                  "de",
                  "en-us",
                  "fr",
                  "ja",
                  "ru",
                  "zh"
                ],
                "type": "string",
                "description": "The language used in the response"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "constellation_id": 20000001,
                "name": "Akpivem",
                "planets": [
                  {
                    "moons": [
                      40000042
                    ],
                    "planet_id": 40000041
                  },
                  {
                    "planet_id": 40000043
                  }
                ],
                "position": {
                  "x": -91174141133075340,
                  "y": 43938227486247170,
                  "z": -56482824383339900
                },
                "security_class": "B",
                "security_status": 0.8462923765182495,
                "stargates": [
                  50000342
                ],
                "system_id": 30000003
              }
            }
          },
          "404": {
            "description": "Solar system not found",
            "schema": {
              "$ref": "#/definitions/getUniverseSystemsSystemIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseSystemsSystemIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "v2"
        ]
      }
    },
    "/universe/types/": {
      "get": {
        "description": "Get a list of type ids\n\n---\n\nAlternate route: ` + "`" + `/v1/universe/types/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/universe/types/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/universe/types/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Universe"
        ],
        "summary": "Get types",
        "operationId": "get_universe_types",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "description": "Which page to query",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of type ids",
            "schema": {
              "description": "200 ok array",
              "type": "array",
              "title": "get_universe_types_ok",
              "maxItems": 1000,
              "items": {
                "description": "200 ok integer",
                "type": "integer",
                "format": "int32",
                "title": "get_universe_types_200_ok"
              }
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                1,
                2,
                3
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseTypesInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ]
      }
    },
    "/universe/types/{type_id}/": {
      "get": {
        "description": "Get information on a type\n\n---\n\nAlternate route: ` + "`" + `/v2/universe/types/{type_id}/` + "`" + `\n\n\n---\n\nThis route expires daily at 11:05",
        "tags": [
          "Universe"
        ],
        "summary": "Get type information",
        "operationId": "get_universe_types_type_id",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "enum": [
              "de",
              "en-us",
              "fr",
              "ja",
              "ru",
              "zh"
            ],
            "type": "string",
            "default": "en-us",
            "description": "Language to use in the response",
            "name": "language",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "An Eve item type ID",
            "name": "type_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Information about a type",
            "schema": {
              "$ref": "#/definitions/getUniverseTypesTypeIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Content-Language": {
                "enum": [
                  "de",
                  "en-us",
                  "fr",
                  "ja",
                  "ru",
                  "zh"
                ],
                "type": "string",
                "description": "The language used in the response"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "description": "The Rifter is a...",
                "group_id": 25,
                "name": "Rifter",
                "published": true,
                "type_id": 587
              }
            }
          },
          "404": {
            "description": "Type not found",
            "schema": {
              "$ref": "#/definitions/getUniverseTypesTypeIdNotFoundBody"
            },
            "examples": {
              "application/json": {
                "error": "Not found message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getUniverseTypesTypeIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "v2"
        ]
      }
    },
    "/wars/": {
      "get": {
        "description": "Return a list of wars\n\n---\n\nAlternate route: ` + "`" + `/v1/wars/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/wars/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/wars/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Wars"
        ],
        "summary": "List wars",
        "operationId": "get_wars",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Only return wars with ID smaller than this.",
            "name": "max_war_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of war IDs, in decending order by war_id.",
            "schema": {
              "description": "200 ok array",
              "type": "array",
              "title": "get_wars_ok",
              "maxItems": 2000,
              "items": {
                "description": "200 ok integer",
                "type": "integer",
                "format": "int32",
                "title": "get_wars_200_ok"
              }
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                3,
                2,
                1
              ]
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getWarsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/wars/{war_id}/": {
      "get": {
        "description": "Return details about a war\n\n---\n\nAlternate route: ` + "`" + `/v1/wars/{war_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/wars/{war_id}/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/wars/{war_id}/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Wars"
        ],
        "summary": "Get war information",
        "operationId": "get_wars_war_id",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "ID for a war",
            "name": "war_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Details about a war",
            "schema": {
              "$ref": "#/definitions/getWarsWarIdOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": {
                "aggressor": {
                  "corporation_id": 986665792,
                  "isk_destroyed": 0,
                  "ships_killed": 0
                },
                "declared": "2004-05-22T05:20:00Z",
                "defender": {
                  "corporation_id": 1001562011,
                  "isk_destroyed": 0,
                  "ships_killed": 0
                },
                "id": 1941,
                "mutual": false,
                "open_for_allies": false
              }
            }
          },
          "422": {
            "description": "War not found",
            "schema": {
              "$ref": "#/definitions/getWarsWarIdUnprocessableEntityBody"
            },
            "examples": {
              "application/json": {
                "error": "Unprocessable entity message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getWarsWarIdInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    },
    "/wars/{war_id}/killmails/": {
      "get": {
        "description": "Return a list of kills related to a war\n\n---\n\nAlternate route: ` + "`" + `/v1/wars/{war_id}/killmails/` + "`" + `\n\nAlternate route: ` + "`" + `/legacy/wars/{war_id}/killmails/` + "`" + `\n\nAlternate route: ` + "`" + `/dev/wars/{war_id}/killmails/` + "`" + `\n\n\n---\n\nThis route is cached for up to 3600 seconds",
        "tags": [
          "Wars"
        ],
        "summary": "List kills for a war",
        "operationId": "get_wars_war_id_killmails",
        "parameters": [
          {
            "enum": [
              "tranquility",
              "singularity"
            ],
            "type": "string",
            "default": "tranquility",
            "description": "The server name you would like data from",
            "name": "datasource",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 1,
            "description": "Which page to query, starting at 1",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over headers",
            "name": "user_agent",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "A valid war ID",
            "name": "war_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Client identifier, takes precedence over User-Agent",
            "name": "X-User-Agent",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of killmail IDs and hashes",
            "schema": {
              "$ref": "#/definitions/getWarsWarIdKillmailsOKBody"
            },
            "headers": {
              "Cache-Control": {
                "type": "string",
                "description": "The caching mechanism used"
              },
              "Expires": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              },
              "Last-Modified": {
                "type": "string",
                "description": "RFC7231 formatted datetime string"
              }
            },
            "examples": {
              "application/json": [
                {
                  "killmail_hash": "8eef5e8fb6b88fe3407c489df33822b2e3b57a5e",
                  "killmail_id": 2
                },
                {
                  "killmail_hash": "b41ccb498ece33d64019f64c0db392aa3aa701fb",
                  "killmail_id": 1
                }
              ]
            }
          },
          "422": {
            "description": "War not found",
            "schema": {
              "$ref": "#/definitions/getWarsWarIdKillmailsUnprocessableEntityBody"
            },
            "examples": {
              "application/json": {
                "error": "Unprocessable entity message"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/getWarsWarIdKillmailsInternalServerErrorBody"
            },
            "examples": {
              "application/json": {
                "error": "uncaught exception: IOError('out of memory')"
              }
            }
          }
        },
        "x-alternate-versions": [
          "dev",
          "legacy",
          "v1"
        ],
        "x-cached-seconds": 3600
      }
    }
  },
  "definitions": {
    "deleteCharactersCharacterIdContactsForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "delete_characters_character_id_contacts_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "delete_characters_character_id_contacts_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "deleteCharactersCharacterIdContactsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "delete_characters_character_id_contacts_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "delete_characters_character_id_contacts_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "deleteCharactersCharacterIdFittingsFittingIdForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "delete_characters_character_id_fittings_fitting_id_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "delete_characters_character_id_fittings_fitting_id_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "deleteCharactersCharacterIdFittingsFittingIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "delete_characters_character_id_fittings_fitting_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "delete_characters_character_id_fittings_fitting_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "deleteCharactersCharacterIdMailLabelsLabelIdForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "delete_characters_character_id_mail_labels_label_id_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "delete_characters_character_id_mail_labels_label_id_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "deleteCharactersCharacterIdMailLabelsLabelIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "delete_characters_character_id_mail_labels_label_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "delete_characters_character_id_mail_labels_label_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "deleteCharactersCharacterIdMailLabelsLabelIdUnprocessableEntityBody": {
      "description": "Unprocessable entity",
      "type": "object",
      "title": "delete_characters_character_id_mail_labels_label_id_unprocessable_entity",
      "properties": {
        "error": {
          "description": "Unprocessable entity message",
          "type": "string",
          "title": "delete_characters_character_id_mail_labels_label_id_422_unprocessable_entity"
        }
      },
      "x-go-gen-location": "operations"
    },
    "deleteCharactersCharacterIdMailMailIdForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "delete_characters_character_id_mail_mail_id_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "delete_characters_character_id_mail_mail_id_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "deleteCharactersCharacterIdMailMailIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "delete_characters_character_id_mail_mail_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "delete_characters_character_id_mail_mail_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "deleteFleetsFleetIdMembersMemberIdForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "delete_fleets_fleet_id_members_member_id_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "delete_fleets_fleet_id_members_member_id_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "deleteFleetsFleetIdMembersMemberIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "delete_fleets_fleet_id_members_member_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "delete_fleets_fleet_id_members_member_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "deleteFleetsFleetIdMembersMemberIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "delete_fleets_fleet_id_members_member_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "delete_fleets_fleet_id_members_member_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "deleteFleetsFleetIdSquadsSquadIdForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "delete_fleets_fleet_id_squads_squad_id_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "delete_fleets_fleet_id_squads_squad_id_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "deleteFleetsFleetIdSquadsSquadIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "delete_fleets_fleet_id_squads_squad_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "delete_fleets_fleet_id_squads_squad_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "deleteFleetsFleetIdSquadsSquadIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "delete_fleets_fleet_id_squads_squad_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "delete_fleets_fleet_id_squads_squad_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "deleteFleetsFleetIdWingsWingIdForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "delete_fleets_fleet_id_wings_wing_id_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "delete_fleets_fleet_id_wings_wing_id_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "deleteFleetsFleetIdWingsWingIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "delete_fleets_fleet_id_wings_wing_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "delete_fleets_fleet_id_wings_wing_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "deleteFleetsFleetIdWingsWingIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "delete_fleets_fleet_id_wings_wing_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "delete_fleets_fleet_id_wings_wing_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getAlliancesAllianceIdCorporationsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_alliances_alliance_id_corporations_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_alliances_alliance_id_corporations_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getAlliancesAllianceIdIconsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_alliances_alliance_id_icons_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_alliances_alliance_id_icons_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getAlliancesAllianceIdIconsNotFoundBody": {
      "description": "No image server for this datasource",
      "type": "object",
      "title": "get_alliances_alliance_id_icons_not_found",
      "properties": {
        "error": {
          "description": "error message",
          "type": "string",
          "title": "get_alliances_alliance_id_icons_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getAlliancesAllianceIdIconsOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_alliances_alliance_id_icons_ok",
      "properties": {
        "px128x128": {
          "description": "px128x128 string",
          "type": "string",
          "title": "get_alliances_alliance_id_icons_px128x128"
        },
        "px64x64": {
          "description": "px64x64 string",
          "type": "string",
          "title": "get_alliances_alliance_id_icons_px64x64"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getAlliancesAllianceIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_alliances_alliance_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_alliances_alliance_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getAlliancesAllianceIdNotFoundBody": {
      "description": "Alliance not found",
      "type": "object",
      "title": "get_alliances_alliance_id_not_found",
      "properties": {
        "error": {
          "description": "error message",
          "type": "string",
          "title": "get_alliances_alliance_id_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getAlliancesAllianceIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_alliances_alliance_id_ok",
      "required": [
        "alliance_name",
        "ticker",
        "date_founded"
      ],
      "properties": {
        "alliance_name": {
          "description": "the full name of the alliance",
          "type": "string",
          "title": "get_alliances_alliance_id_alliance_name"
        },
        "date_founded": {
          "description": "date_founded string",
          "type": "string",
          "format": "date-time",
          "title": "get_alliances_alliance_id_date_founded"
        },
        "executor_corp": {
          "description": "the executor corporation ID, if this alliance is not closed",
          "type": "integer",
          "format": "int32",
          "title": "get_alliances_alliance_id_executor_corp"
        },
        "ticker": {
          "description": "the short name of the alliance",
          "type": "string",
          "title": "get_alliances_alliance_id_ticker"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getAlliancesInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_alliances_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_alliances_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getAlliancesNamesInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_alliances_names_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_alliances_names_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getAlliancesNamesOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_alliances_names_ok",
      "maxItems": 100,
      "items": {
        "$ref": "#/definitions/getAlliancesNamesOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getAlliancesNamesOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_alliances_names_200_ok",
      "required": [
        "alliance_id",
        "alliance_name"
      ],
      "properties": {
        "alliance_id": {
          "description": "alliance_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_alliances_names_alliance_id"
        },
        "alliance_name": {
          "description": "alliance_name string",
          "type": "string",
          "title": "get_alliances_names_alliance_name"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdAgentsResearchForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_agents_research_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_agents_research_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdAgentsResearchInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_agents_research_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_agents_research_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdAgentsResearchOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_characters_character_id_agents_research_ok",
      "maxItems": 1000,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdAgentsResearchOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdAgentsResearchOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_agents_research_200_ok",
      "required": [
        "agent_id",
        "skill_type_id",
        "started_at",
        "points_per_day",
        "remainder_points"
      ],
      "properties": {
        "agent_id": {
          "description": "agent_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_agents_research_agent_id"
        },
        "points_per_day": {
          "description": "points_per_day number",
          "type": "number",
          "format": "float",
          "title": "get_characters_character_id_agents_research_points_per_day"
        },
        "remainder_points": {
          "description": "remainder_points number",
          "type": "number",
          "format": "float",
          "title": "get_characters_character_id_agents_research_remainder_points"
        },
        "skill_type_id": {
          "description": "skill_type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_agents_research_skill_type_id"
        },
        "started_at": {
          "description": "started_at string",
          "type": "string",
          "format": "date-time",
          "title": "get_characters_character_id_agents_research_started_at"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdAssetsForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_assets_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_assets_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdAssetsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_assets_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_assets_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdAssetsOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_characters_character_id_assets_ok",
      "maxItems": 100000,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdAssetsOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdAssetsOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_assets_200_ok",
      "required": [
        "type_id",
        "location_id",
        "location_type",
        "item_id",
        "location_flag",
        "is_singleton"
      ],
      "properties": {
        "is_singleton": {
          "description": "is_singleton boolean",
          "type": "boolean",
          "title": "get_characters_character_id_assets_is_singleton"
        },
        "item_id": {
          "description": "item_id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_assets_item_id"
        },
        "location_flag": {
          "description": "location_flag string",
          "type": "string",
          "title": "get_characters_character_id_assets_location_flag",
          "enum": [
            "AutoFit",
            "Cargo",
            "CorpseBay",
            "DroneBay",
            "FleetHangar",
            "Deliveries",
            "HiddenModifiers",
            "Hangar",
            "HangarAll",
            "LoSlot0",
            "LoSlot1",
            "LoSlot2",
            "LoSlot3",
            "LoSlot4",
            "LoSlot5",
            "LoSlot6",
            "LoSlot7",
            "MedSlot0",
            "MedSlot1",
            "MedSlot2",
            "MedSlot3",
            "MedSlot4",
            "MedSlot5",
            "MedSlot6",
            "MedSlot7",
            "HiSlot0",
            "HiSlot1",
            "HiSlot2",
            "HiSlot3",
            "HiSlot4",
            "HiSlot5",
            "HiSlot6",
            "HiSlot7",
            "AssetSafety",
            "Locked",
            "Unlocked",
            "Implant",
            "QuafeBay",
            "RigSlot0",
            "RigSlot1",
            "RigSlot2",
            "RigSlot3",
            "RigSlot4",
            "RigSlot5",
            "RigSlot6",
            "RigSlot7",
            "ShipHangar",
            "SpecializedFuelBay",
            "SpecializedOreHold",
            "SpecializedGasHold",
            "SpecializedMineralHold",
            "SpecializedSalvageHold",
            "SpecializedShipHold",
            "SpecializedSmallShipHold",
            "SpecializedMediumShipHold",
            "SpecializedLargeShipHold",
            "SpecializedIndustrialShipHold",
            "SpecializedAmmoHold",
            "SpecializedCommandCenterHold",
            "SpecializedPlanetaryCommoditiesHold",
            "SpecializedMaterialBay",
            "SubSystemSlot0",
            "SubSystemSlot1",
            "SubSystemSlot2",
            "SubSystemSlot3",
            "SubSystemSlot4",
            "SubSystemSlot5",
            "SubSystemSlot6",
            "SubSystemSlot7",
            "FighterBay",
            "FighterTube0",
            "FighterTube1",
            "FighterTube2",
            "FighterTube3",
            "FighterTube4",
            "Module",
            "Wardrobe"
          ]
        },
        "location_id": {
          "description": "location_id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_assets_location_id"
        },
        "location_type": {
          "description": "location_type string",
          "type": "string",
          "title": "get_characters_character_id_assets_location_type",
          "enum": [
            "station",
            "solar_system",
            "other"
          ]
        },
        "quantity": {
          "description": "quantity integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_assets_quantity"
        },
        "type_id": {
          "description": "type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_assets_type_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdBlueprintsForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_blueprints_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_blueprints_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdBlueprintsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_blueprints_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_blueprints_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdBlueprintsOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_characters_character_id_blueprints_ok",
      "maxItems": 10000,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdBlueprintsOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdBlueprintsOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_blueprints_200_ok",
      "required": [
        "item_id",
        "type_id",
        "location_id",
        "location_flag",
        "quantity",
        "time_efficiency",
        "material_efficiency",
        "runs"
      ],
      "properties": {
        "item_id": {
          "description": "Unique ID for this item. The ID of an item is stable if that item is not repackaged, stacked, detached from a stack, assembled, or otherwise altered. If an item is changed in one of these ways, then the ID will also change (see notes below).",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_blueprints_item_id"
        },
        "location_flag": {
          "description": "Indicates something about this item's storage location. The flag is used to differentiate between hangar divisions, drone bay, fitting location, and similar.",
          "type": "string",
          "title": "get_characters_character_id_blueprints_location_flag",
          "enum": [
            "AutoFit",
            "Cargo",
            "CorpseBay",
            "DroneBay",
            "FleetHangar",
            "Deliveries",
            "HiddenModifiers",
            "Hangar",
            "HangarAll",
            "LoSlot0",
            "LoSlot1",
            "LoSlot2",
            "LoSlot3",
            "LoSlot4",
            "LoSlot5",
            "LoSlot6",
            "LoSlot7",
            "MedSlot0",
            "MedSlot1",
            "MedSlot2",
            "MedSlot3",
            "MedSlot4",
            "MedSlot5",
            "MedSlot6",
            "MedSlot7",
            "HiSlot0",
            "HiSlot1",
            "HiSlot2",
            "HiSlot3",
            "HiSlot4",
            "HiSlot5",
            "HiSlot6",
            "HiSlot7",
            "AssetSafety",
            "Locked",
            "Unlocked",
            "Implant",
            "QuafeBay",
            "RigSlot0",
            "RigSlot1",
            "RigSlot2",
            "RigSlot3",
            "RigSlot4",
            "RigSlot5",
            "RigSlot6",
            "RigSlot7",
            "ShipHangar",
            "SpecializedFuelBay",
            "SpecializedOreHold",
            "SpecializedGasHold",
            "SpecializedMineralHold",
            "SpecializedSalvageHold",
            "SpecializedShipHold",
            "SpecializedSmallShipHold",
            "SpecializedMediumShipHold",
            "SpecializedLargeShipHold",
            "SpecializedIndustrialShipHold",
            "SpecializedAmmoHold",
            "SpecializedCommandCenterHold",
            "SpecializedPlanetaryCommoditiesHold",
            "SpecializedMaterialBay",
            "SubSystemSlot0",
            "SubSystemSlot1",
            "SubSystemSlot2",
            "SubSystemSlot3",
            "SubSystemSlot4",
            "SubSystemSlot5",
            "SubSystemSlot6",
            "SubSystemSlot7",
            "FighterBay",
            "FighterTube0",
            "FighterTube1",
            "FighterTube2",
            "FighterTube3",
            "FighterTube4",
            "Module"
          ]
        },
        "location_id": {
          "description": "References a solar system, station or itemID if this blueprint is located within a container. If an itemID the Character - AssetList API must be queried to find the container using the itemID, from which the correct location of the Blueprint can be derived.",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_blueprints_location_id"
        },
        "material_efficiency": {
          "description": "Material Efficiency Level of the blueprint, can be any integer between 0 and 10.",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_blueprints_material_efficiency"
        },
        "quantity": {
          "description": "Typically will be -1 or -2 designating a singleton item, where -1 is an original and -2 is a copy. It can be a positive integer if it is a stack of blueprint originals fresh from the market (no activities performed on them yet).",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_blueprints_quantity"
        },
        "runs": {
          "description": "Number of runs remaining if the blueprint is a copy, -1 if it is an original.",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_blueprints_runs"
        },
        "time_efficiency": {
          "description": "Time Efficiency Level of the blueprint, can be any even integer between 0 and 20.",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_blueprints_time_efficiency"
        },
        "type_id": {
          "description": "type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_blueprints_type_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdBookmarksFoldersForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_bookmarks_folders_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_bookmarks_folders_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdBookmarksFoldersInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_bookmarks_folders_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_bookmarks_folders_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdBookmarksFoldersOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_characters_character_id_bookmarks_folders_ok",
      "maxItems": 10000,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdBookmarksFoldersOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdBookmarksFoldersOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_bookmarks_folders_200_ok",
      "properties": {
        "folder_id": {
          "description": "folder_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_bookmarks_folders_folder_id"
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_characters_character_id_bookmarks_folders_name"
        },
        "owner_id": {
          "description": "owner_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_bookmarks_folders_owner_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdBookmarksForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_bookmarks_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_bookmarks_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdBookmarksInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_bookmarks_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_bookmarks_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdBookmarksOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_characters_character_id_bookmarks_ok",
      "maxItems": 13000,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdBookmarksOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdBookmarksOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_bookmarks_200_ok",
      "required": [
        "bookmark_id",
        "creator_id",
        "owner_id",
        "create_date",
        "memo",
        "note",
        "target"
      ],
      "properties": {
        "bookmark_id": {
          "description": "bookmark_id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_bookmarks_bookmark_id"
        },
        "create_date": {
          "description": "create_date string",
          "type": "string",
          "format": "date-time",
          "title": "get_characters_character_id_bookmarks_create_date"
        },
        "creator_id": {
          "description": "creator_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_bookmarks_creator_id"
        },
        "folder_id": {
          "description": "folder_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_bookmarks_folder_id"
        },
        "memo": {
          "description": "memo string",
          "type": "string",
          "title": "get_characters_character_id_bookmarks_memo"
        },
        "note": {
          "description": "note string",
          "type": "string",
          "title": "get_characters_character_id_bookmarks_note"
        },
        "owner_id": {
          "description": "owner_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_bookmarks_owner_id"
        },
        "target": {
          "$ref": "#/definitions/getCharactersCharacterIdBookmarksOKBodyItemsTarget"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdBookmarksOKBodyItemsTarget": {
      "description": "target object",
      "type": "object",
      "title": "get_characters_character_id_bookmarks_target",
      "required": [
        "location_id"
      ],
      "properties": {
        "coordinates": {
          "$ref": "#/definitions/getCharactersCharacterIdBookmarksOKBodyItemsTargetCoordinates"
        },
        "item": {
          "$ref": "#/definitions/getCharactersCharacterIdBookmarksOKBodyItemsTargetItem"
        },
        "location_id": {
          "description": "location_id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_bookmarks_location_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdBookmarksOKBodyItemsTargetCoordinates": {
      "description": "coordinates object",
      "type": "object",
      "title": "get_characters_character_id_bookmarks_coordinates",
      "required": [
        "x",
        "y",
        "z"
      ],
      "properties": {
        "x": {
          "description": "x number",
          "type": "number",
          "format": "double",
          "title": "get_characters_character_id_bookmarks_x"
        },
        "y": {
          "description": "y number",
          "type": "number",
          "format": "double",
          "title": "get_characters_character_id_bookmarks_y"
        },
        "z": {
          "description": "z number",
          "type": "number",
          "format": "double",
          "title": "get_characters_character_id_bookmarks_z"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdBookmarksOKBodyItemsTargetItem": {
      "description": "item object",
      "type": "object",
      "title": "get_characters_character_id_bookmarks_item",
      "required": [
        "item_id",
        "type_id"
      ],
      "properties": {
        "item_id": {
          "description": "item_id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_bookmarks_item_id"
        },
        "type_id": {
          "description": "type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_bookmarks_type_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdCalendarEventIdForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_calendar_event_id_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_calendar_event_id_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdCalendarEventIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_calendar_event_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_calendar_event_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdCalendarEventIdOKBody": {
      "description": "Full details of a specific event",
      "type": "object",
      "title": "get_characters_character_id_calendar_event_id_ok",
      "required": [
        "event_id",
        "owner_id",
        "owner_name",
        "date",
        "title",
        "duration",
        "importance",
        "response",
        "text",
        "owner_type"
      ],
      "properties": {
        "date": {
          "description": "date string",
          "type": "string",
          "format": "date-time",
          "title": "get_characters_character_id_calendar_event_id_date"
        },
        "duration": {
          "description": "Length in minutes",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_calendar_event_id_duration"
        },
        "event_id": {
          "description": "event_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_calendar_event_id_event_id"
        },
        "importance": {
          "description": "importance integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_calendar_event_id_importance"
        },
        "owner_id": {
          "description": "owner_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_calendar_event_id_owner_id"
        },
        "owner_name": {
          "description": "owner_name string",
          "type": "string",
          "title": "get_characters_character_id_calendar_event_id_owner_name"
        },
        "owner_type": {
          "description": "owner_type string",
          "type": "string",
          "title": "get_characters_character_id_calendar_event_id_owner_type",
          "enum": [
            "eve_server",
            "corporation",
            "faction",
            "character",
            "alliance"
          ]
        },
        "response": {
          "description": "response string",
          "type": "string",
          "title": "get_characters_character_id_calendar_event_id_response"
        },
        "text": {
          "description": "text string",
          "type": "string",
          "title": "get_characters_character_id_calendar_event_id_text"
        },
        "title": {
          "description": "title string",
          "type": "string",
          "title": "get_characters_character_id_calendar_event_id_title"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdCalendarForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_calendar_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_calendar_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdCalendarInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_calendar_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_calendar_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdCalendarOKBody": {
      "description": "Up to 50 events from now or the event you requested",
      "type": "array",
      "title": "get_characters_character_id_calendar_ok",
      "maxItems": 50,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdCalendarOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdCalendarOKBodyItems": {
      "description": "event",
      "type": "object",
      "title": "get_characters_character_id_calendar_200_ok",
      "properties": {
        "event_date": {
          "description": "event_date string",
          "type": "string",
          "format": "date-time",
          "title": "get_characters_character_id_calendar_event_date"
        },
        "event_id": {
          "description": "event_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_calendar_event_id"
        },
        "event_response": {
          "description": "event_response string",
          "type": "string",
          "title": "get_characters_character_id_calendar_event_response",
          "enum": [
            "declined",
            "not_responded",
            "accepted",
            "tentative"
          ]
        },
        "importance": {
          "description": "importance integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_calendar_importance"
        },
        "title": {
          "description": "title string",
          "type": "string",
          "title": "get_characters_character_id_calendar_title"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdChatChannelsForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_chat_channels_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_chat_channels_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdChatChannelsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_chat_channels_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_chat_channels_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdChatChannelsOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_characters_character_id_chat_channels_ok",
      "maxItems": 1000,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdChatChannelsOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdChatChannelsOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_chat_channels_200_ok",
      "required": [
        "channel_id",
        "name",
        "owner_id",
        "comparison_key",
        "has_password",
        "motd",
        "allowed",
        "operators",
        "blocked",
        "muted"
      ],
      "properties": {
        "allowed": {
          "$ref": "#/definitions/getCharactersCharacterIdChatChannelsOKBodyItemsAllowed"
        },
        "blocked": {
          "$ref": "#/definitions/getCharactersCharacterIdChatChannelsOKBodyItemsBlocked"
        },
        "channel_id": {
          "description": "Unique channel ID. Always negative for player-created channels. Permanent (CCP created) channels have a positive ID, but don't appear in the API",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_chat_channels_channel_id"
        },
        "comparison_key": {
          "description": "Normalized, unique string used to compare channel names",
          "type": "string",
          "title": "get_characters_character_id_chat_channels_comparison_key"
        },
        "has_password": {
          "description": "Whether this is a password protected channel",
          "type": "boolean",
          "title": "get_characters_character_id_chat_channels_has_password"
        },
        "motd": {
          "description": "Message of the day for this channel",
          "type": "string",
          "title": "get_characters_character_id_chat_channels_motd"
        },
        "muted": {
          "$ref": "#/definitions/getCharactersCharacterIdChatChannelsOKBodyItemsMuted"
        },
        "name": {
          "description": "Displayed name of channel",
          "type": "string",
          "title": "get_characters_character_id_chat_channels_name"
        },
        "operators": {
          "$ref": "#/definitions/getCharactersCharacterIdChatChannelsOKBodyItemsOperators"
        },
        "owner_id": {
          "description": "owner_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_chat_channels_owner_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdChatChannelsOKBodyItemsAllowed": {
      "description": "allowed array",
      "type": "array",
      "title": "get_characters_character_id_chat_channels_allowed",
      "maxItems": 1000,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdChatChannelsOKBodyItemsAllowedItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdChatChannelsOKBodyItemsAllowedItems": {
      "description": "allowed object",
      "type": "object",
      "title": "get_characters_character_id_chat_channels_allowed",
      "required": [
        "accessor_id",
        "accessor_type"
      ],
      "properties": {
        "accessor_id": {
          "description": "ID of an allowed channel member",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_chat_channels_accessor_id"
        },
        "accessor_type": {
          "description": "accessor_type string",
          "type": "string",
          "title": "get_characters_character_id_chat_channels_accessor_type",
          "enum": [
            "character",
            "corporation",
            "alliance"
          ]
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdChatChannelsOKBodyItemsBlocked": {
      "description": "blocked array",
      "type": "array",
      "title": "get_characters_character_id_chat_channels_blocked",
      "maxItems": 1000,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdChatChannelsOKBodyItemsBlockedItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdChatChannelsOKBodyItemsBlockedItems": {
      "description": "blocked object",
      "type": "object",
      "title": "get_characters_character_id_chat_channels_blocked",
      "required": [
        "accessor_id",
        "accessor_type"
      ],
      "properties": {
        "accessor_id": {
          "description": "ID of a blocked channel member",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_chat_channels_accessor_id"
        },
        "accessor_type": {
          "description": "accessor_type string",
          "type": "string",
          "title": "get_characters_character_id_chat_channels_accessor_type",
          "enum": [
            "character",
            "corporation",
            "alliance"
          ]
        },
        "end_at": {
          "description": "Time at which this accessor will no longer be blocked",
          "type": "string",
          "format": "date-time",
          "title": "get_characters_character_id_chat_channels_end_at"
        },
        "reason": {
          "description": "Reason this accessor is blocked",
          "type": "string",
          "title": "get_characters_character_id_chat_channels_reason"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdChatChannelsOKBodyItemsMuted": {
      "description": "muted array",
      "type": "array",
      "title": "get_characters_character_id_chat_channels_muted",
      "maxItems": 1000,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdChatChannelsOKBodyItemsMutedItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdChatChannelsOKBodyItemsMutedItems": {
      "description": "muted object",
      "type": "object",
      "title": "get_characters_character_id_chat_channels_muted",
      "required": [
        "accessor_id",
        "accessor_type"
      ],
      "properties": {
        "accessor_id": {
          "description": "ID of a muted channel member",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_chat_channels_accessor_id"
        },
        "accessor_type": {
          "description": "accessor_type string",
          "type": "string",
          "title": "get_characters_character_id_chat_channels_accessor_type",
          "enum": [
            "character",
            "corporation",
            "alliance"
          ]
        },
        "end_at": {
          "description": "Time at which this accessor will no longer be muted",
          "type": "string",
          "format": "date-time",
          "title": "get_characters_character_id_chat_channels_end_at"
        },
        "reason": {
          "description": "Reason this accessor is muted",
          "type": "string",
          "title": "get_characters_character_id_chat_channels_reason"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdChatChannelsOKBodyItemsOperators": {
      "description": "operators array",
      "type": "array",
      "title": "get_characters_character_id_chat_channels_operators",
      "maxItems": 1000,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdChatChannelsOKBodyItemsOperatorsItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdChatChannelsOKBodyItemsOperatorsItems": {
      "description": "operator object",
      "type": "object",
      "title": "get_characters_character_id_chat_channels_operator",
      "required": [
        "accessor_id",
        "accessor_type"
      ],
      "properties": {
        "accessor_id": {
          "description": "ID of a channel operator",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_chat_channels_accessor_id"
        },
        "accessor_type": {
          "description": "accessor_type string",
          "type": "string",
          "title": "get_characters_character_id_chat_channels_accessor_type",
          "enum": [
            "character",
            "corporation",
            "alliance"
          ]
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdClonesForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_clones_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_clones_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdClonesInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_clones_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_clones_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdClonesOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_clones_ok",
      "required": [
        "jump_clones"
      ],
      "properties": {
        "home_location": {
          "$ref": "#/definitions/getCharactersCharacterIdClonesOKBodyHomeLocation"
        },
        "jump_clones": {
          "$ref": "#/definitions/getCharactersCharacterIdClonesOKBodyJumpClones"
        },
        "last_jump_date": {
          "description": "last_jump_date string",
          "type": "string",
          "format": "date-time",
          "title": "get_characters_character_id_clones_last_jump_date"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdClonesOKBodyHomeLocation": {
      "description": "home_location object",
      "type": "object",
      "title": "get_characters_character_id_clones_home_location",
      "properties": {
        "location_id": {
          "description": "location_id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_clones_location_id"
        },
        "location_type": {
          "description": "location_type string",
          "type": "string",
          "title": "get_characters_character_id_clones_location_type",
          "enum": [
            "station",
            "structure"
          ]
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdClonesOKBodyJumpClones": {
      "description": "jump_clones array",
      "type": "array",
      "title": "get_characters_character_id_clones_jump_clones",
      "maxItems": 10,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdClonesOKBodyJumpClonesItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdClonesOKBodyJumpClonesItems": {
      "description": "jump_clone object",
      "type": "object",
      "title": "get_characters_character_id_clones_jump_clone",
      "properties": {
        "implants": {
          "description": "implants array",
          "type": "array",
          "title": "get_characters_character_id_clones_implants",
          "maxItems": 11,
          "items": {
            "description": "implant integer",
            "type": "integer",
            "format": "int32",
            "title": "get_characters_character_id_clones_implant"
          }
        },
        "location_id": {
          "description": "location_id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_clones_location_id"
        },
        "location_type": {
          "description": "location_type string",
          "type": "string",
          "title": "get_characters_character_id_clones_location_type",
          "enum": [
            "station",
            "structure"
          ]
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdContactsForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_contacts_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_contacts_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdContactsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_contacts_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_contacts_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdContactsLabelsForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_contacts_labels_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_contacts_labels_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdContactsLabelsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_contacts_labels_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_contacts_labels_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdContactsLabelsOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_characters_character_id_contacts_labels_ok",
      "maxItems": 64,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdContactsLabelsOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdContactsLabelsOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_contacts_labels_200_ok",
      "required": [
        "label_id",
        "label_name"
      ],
      "properties": {
        "label_id": {
          "description": "label_id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_contacts_labels_label_id"
        },
        "label_name": {
          "description": "label_name string",
          "type": "string",
          "title": "get_characters_character_id_contacts_labels_label_name"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdContactsOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_characters_character_id_contacts_ok",
      "maxItems": 1024,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdContactsOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdContactsOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_contacts_200_ok",
      "required": [
        "standing",
        "contact_type",
        "contact_id"
      ],
      "properties": {
        "contact_id": {
          "description": "contact_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_contacts_contact_id"
        },
        "contact_type": {
          "description": "contact_type string",
          "type": "string",
          "title": "get_characters_character_id_contacts_contact_type",
          "enum": [
            "character",
            "corporation",
            "alliance",
            "faction"
          ]
        },
        "is_blocked": {
          "description": "Whether this contact is in the blocked list. Note a missing value denotes unknown, not true or false",
          "type": "boolean",
          "title": "get_characters_character_id_contacts_is_blocked"
        },
        "is_watched": {
          "description": "Whether this contact is being watched",
          "type": "boolean",
          "title": "get_characters_character_id_contacts_is_watched"
        },
        "label_id": {
          "description": "Custom label of the contact",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_contacts_label_id"
        },
        "standing": {
          "description": "Standing of the contact",
          "type": "number",
          "format": "float",
          "title": "get_characters_character_id_contacts_standing"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdCorporationhistoryInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_corporationhistory_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_corporationhistory_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdCorporationhistoryOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_characters_character_id_corporationhistory_ok",
      "maxItems": 1000,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdCorporationhistoryOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdCorporationhistoryOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_corporationhistory_200_ok",
      "properties": {
        "corporation_id": {
          "description": "corporation_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_corporationhistory_corporation_id"
        },
        "is_deleted": {
          "description": "True if the corporation has been deleted",
          "type": "boolean",
          "title": "get_characters_character_id_corporationhistory_is_deleted"
        },
        "record_id": {
          "description": "An incrementing ID that can be used to canonically establish order of records in cases where dates may be ambiguous",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_corporationhistory_record_id"
        },
        "start_date": {
          "description": "start_date string",
          "type": "string",
          "format": "date-time",
          "title": "get_characters_character_id_corporationhistory_start_date"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdFittingsForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_fittings_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_fittings_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdFittingsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_fittings_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_fittings_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdFittingsOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_characters_character_id_fittings_ok",
      "maxItems": 250,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdFittingsOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdFittingsOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_fittings_200_ok",
      "required": [
        "fitting_id",
        "name",
        "description",
        "ship_type_id",
        "items"
      ],
      "properties": {
        "description": {
          "description": "description string",
          "type": "string",
          "title": "get_characters_character_id_fittings_description"
        },
        "fitting_id": {
          "description": "fitting_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_fittings_fitting_id"
        },
        "items": {
          "$ref": "#/definitions/getCharactersCharacterIdFittingsOKBodyItemsItems"
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_characters_character_id_fittings_name"
        },
        "ship_type_id": {
          "description": "ship_type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_fittings_ship_type_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdFittingsOKBodyItemsItems": {
      "description": "items array",
      "type": "array",
      "title": "get_characters_character_id_fittings_items",
      "maxItems": 255,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdFittingsOKBodyItemsItemsItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdFittingsOKBodyItemsItemsItems": {
      "description": "item object",
      "type": "object",
      "title": "get_characters_character_id_fittings_item",
      "required": [
        "type_id",
        "flag",
        "quantity"
      ],
      "properties": {
        "flag": {
          "description": "flag integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_fittings_flag"
        },
        "quantity": {
          "description": "quantity integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_fittings_quantity"
        },
        "type_id": {
          "description": "type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_fittings_type_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdIndustryJobsForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_industry_jobs_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_industry_jobs_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdIndustryJobsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_industry_jobs_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_industry_jobs_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdIndustryJobsOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_characters_character_id_industry_jobs_ok",
      "maxItems": 2000,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdIndustryJobsOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdIndustryJobsOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_industry_jobs_200_ok",
      "required": [
        "job_id",
        "installer_id",
        "facility_id",
        "station_id",
        "activity_id",
        "blueprint_id",
        "blueprint_type_id",
        "blueprint_location_id",
        "output_location_id",
        "runs",
        "status",
        "duration",
        "start_date",
        "end_date"
      ],
      "properties": {
        "activity_id": {
          "description": "Job activity ID",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_industry_jobs_activity_id"
        },
        "blueprint_id": {
          "description": "blueprint_id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_industry_jobs_blueprint_id"
        },
        "blueprint_location_id": {
          "description": "Location ID of the location from which the blueprint was installed. Normally a station ID, but can also be an asset (e.g. container) or corporation facility",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_industry_jobs_blueprint_location_id"
        },
        "blueprint_type_id": {
          "description": "blueprint_type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_industry_jobs_blueprint_type_id"
        },
        "completed_character_id": {
          "description": "ID of the character which completed this job",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_industry_jobs_completed_character_id"
        },
        "completed_date": {
          "description": "Date and time when this job was completed",
          "type": "string",
          "format": "date-time",
          "title": "get_characters_character_id_industry_jobs_completed_date"
        },
        "cost": {
          "description": "The sume of job installation fee and industry facility tax",
          "type": "number",
          "format": "float",
          "title": "get_characters_character_id_industry_jobs_cost"
        },
        "duration": {
          "description": "Job duration in seconds",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_industry_jobs_duration"
        },
        "end_date": {
          "description": "Date and time when this job finished",
          "type": "string",
          "format": "date-time",
          "title": "get_characters_character_id_industry_jobs_end_date"
        },
        "facility_id": {
          "description": "ID of the facility where this job is running",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_industry_jobs_facility_id"
        },
        "installer_id": {
          "description": "ID of the character which installed this job",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_industry_jobs_installer_id"
        },
        "job_id": {
          "description": "Unique job ID",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_industry_jobs_job_id"
        },
        "licensed_runs": {
          "description": "Number of runs blueprint is licensed for",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_industry_jobs_licensed_runs"
        },
        "output_location_id": {
          "description": "Location ID of the location to which the output of the job will be delivered. Normally a station ID, but can also be a corporation facility",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_industry_jobs_output_location_id"
        },
        "pause_date": {
          "description": "Date and time when this job was paused (i.e. time when the facility where this job was installed went offline)",
          "type": "string",
          "format": "date-time",
          "title": "get_characters_character_id_industry_jobs_pause_date"
        },
        "probability": {
          "description": "Chance of success for invention",
          "type": "number",
          "format": "float",
          "title": "get_characters_character_id_industry_jobs_probability"
        },
        "product_type_id": {
          "description": "Type ID of product (manufactured, copied or invented)",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_industry_jobs_product_type_id"
        },
        "runs": {
          "description": "Number of runs for a manufacturing job, or number of copies to make for a blueprint copy",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_industry_jobs_runs"
        },
        "start_date": {
          "description": "Date and time when this job started",
          "type": "string",
          "format": "date-time",
          "title": "get_characters_character_id_industry_jobs_start_date"
        },
        "station_id": {
          "description": "ID of the station where industry facility is located",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_industry_jobs_station_id"
        },
        "status": {
          "description": "status string",
          "type": "string",
          "title": "get_characters_character_id_industry_jobs_status",
          "enum": [
            "active",
            "paused",
            "ready",
            "delivered",
            "cancelled",
            "reverted"
          ]
        },
        "successful_runs": {
          "description": "Number of successful runs for this job. Equal to runs unless this is an invention job",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_industry_jobs_successful_runs"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdKillmailsRecentForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_killmails_recent_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_killmails_recent_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdKillmailsRecentInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_killmails_recent_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_killmails_recent_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdKillmailsRecentOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_characters_character_id_killmails_recent_ok",
      "maxItems": 5000,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdKillmailsRecentOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdKillmailsRecentOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_killmails_recent_200_ok",
      "required": [
        "killmail_id",
        "killmail_hash"
      ],
      "properties": {
        "killmail_hash": {
          "description": "A hash of this killmail",
          "type": "string",
          "title": "get_characters_character_id_killmails_recent_killmail_hash"
        },
        "killmail_id": {
          "description": "ID of this killmail",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_killmails_recent_killmail_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdLocationForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_location_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_location_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdLocationInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_location_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_location_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdLocationOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_location_ok",
      "required": [
        "solar_system_id"
      ],
      "properties": {
        "solar_system_id": {
          "description": "solar_system_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_location_solar_system_id"
        },
        "station_id": {
          "description": "station_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_location_station_id"
        },
        "structure_id": {
          "description": "structure_id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_location_structure_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdLoyaltyPointsForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_loyalty_points_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_loyalty_points_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdLoyaltyPointsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_loyalty_points_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_loyalty_points_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdLoyaltyPointsOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_characters_character_id_loyalty_points_ok",
      "maxItems": 500,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdLoyaltyPointsOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdLoyaltyPointsOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_loyalty_points_200_ok",
      "required": [
        "corporation_id",
        "loyalty_points"
      ],
      "properties": {
        "corporation_id": {
          "description": "corporation_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_loyalty_points_corporation_id"
        },
        "loyalty_points": {
          "description": "loyalty_points integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_loyalty_points_loyalty_points"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMailForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_mail_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_mail_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMailInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_mail_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_mail_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMailLabelsForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_mail_labels_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_mail_labels_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMailLabelsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_mail_labels_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_mail_labels_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMailLabelsOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_mail_labels_ok",
      "properties": {
        "labels": {
          "$ref": "#/definitions/getCharactersCharacterIdMailLabelsOKBodyLabels"
        },
        "total_unread_count": {
          "description": "total_unread_count integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_mail_labels_total_unread_count",
          "minimum": 0
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMailLabelsOKBodyLabels": {
      "description": "labels array",
      "type": "array",
      "title": "get_characters_character_id_mail_labels_labels",
      "maxItems": 30,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdMailLabelsOKBodyLabelsItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMailLabelsOKBodyLabelsItems": {
      "description": "label object",
      "type": "object",
      "title": "get_characters_character_id_mail_labels_label",
      "properties": {
        "color": {
          "description": "color string",
          "type": "string",
          "title": "get_characters_character_id_mail_labels_color",
          "default": "#ffffff",
          "enum": [
            "#ffffff",
            "#ffff01",
            "#ff6600",
            "#fe0000",
            "#9a0000",
            "#660066",
            "#0000fe",
            "#0099ff",
            "#01ffff",
            "#00ff33",
            "#349800",
            "#006634",
            "#666666",
            "#999999",
            "#e6e6e6",
            "#ffffcd",
            "#99ffff",
            "#ccff9a"
          ]
        },
        "label_id": {
          "description": "label_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_mail_labels_label_id",
          "minimum": 0
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_characters_character_id_mail_labels_name",
          "maxLength": 40
        },
        "unread_count": {
          "description": "unread_count integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_mail_labels_unread_count",
          "minimum": 0
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMailListsForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_mail_lists_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_mail_lists_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMailListsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_mail_lists_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_mail_lists_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMailListsOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_characters_character_id_mail_lists_ok",
      "maxItems": 1000,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdMailListsOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMailListsOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_mail_lists_200_ok",
      "required": [
        "mailing_list_id",
        "name"
      ],
      "properties": {
        "mailing_list_id": {
          "description": "Mailing list ID",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_mail_lists_mailing_list_id"
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_characters_character_id_mail_lists_name"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMailMailIdForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_mail_mail_id_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_mail_mail_id_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMailMailIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_mail_mail_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_mail_mail_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMailMailIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "get_characters_character_id_mail_mail_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "get_characters_character_id_mail_mail_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMailMailIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_mail_mail_id_ok",
      "properties": {
        "body": {
          "description": "Mail's body",
          "type": "string",
          "title": "get_characters_character_id_mail_mail_id_body"
        },
        "from": {
          "description": "From whom the mail was sent",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_mail_mail_id_from"
        },
        "labels": {
          "description": "Labels attached to the mail",
          "type": "array",
          "title": "get_characters_character_id_mail_mail_id_labels",
          "maxItems": 25,
          "items": {
            "description": "label integer",
            "type": "integer",
            "format": "int64",
            "title": "get_characters_character_id_mail_mail_id_label",
            "minimum": 0,
            "uniqueItems": true
          }
        },
        "read": {
          "description": "Whether the mail is flagged as read",
          "type": "boolean",
          "title": "get_characters_character_id_mail_mail_id_read"
        },
        "recipients": {
          "$ref": "#/definitions/getCharactersCharacterIdMailMailIdOKBodyRecipients"
        },
        "subject": {
          "description": "Mail subject",
          "type": "string",
          "title": "get_characters_character_id_mail_mail_id_subject"
        },
        "timestamp": {
          "description": "When the mail was sent",
          "type": "string",
          "format": "date-time",
          "title": "get_characters_character_id_mail_mail_id_timestamp"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMailMailIdOKBodyRecipients": {
      "description": "Recipients of the mail",
      "type": "array",
      "title": "get_characters_character_id_mail_mail_id_recipients",
      "maxItems": 50,
      "minItems": 1,
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdMailMailIdOKBodyRecipientsItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMailMailIdOKBodyRecipientsItems": {
      "description": "recipient object",
      "type": "object",
      "title": "get_characters_character_id_mail_mail_id_recipient",
      "required": [
        "recipient_type",
        "recipient_id"
      ],
      "properties": {
        "recipient_id": {
          "description": "recipient_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_mail_mail_id_recipient_id"
        },
        "recipient_type": {
          "description": "recipient_type string",
          "type": "string",
          "title": "get_characters_character_id_mail_mail_id_recipient_type",
          "enum": [
            "alliance",
            "character",
            "corporation",
            "mailing_list"
          ]
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMailOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_characters_character_id_mail_ok",
      "maxItems": 50,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdMailOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMailOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_mail_200_ok",
      "properties": {
        "from": {
          "description": "From whom the mail was sent",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_mail_from"
        },
        "is_read": {
          "description": "is_read boolean",
          "type": "boolean",
          "title": "get_characters_character_id_mail_is_read"
        },
        "labels": {
          "description": "labels array",
          "type": "array",
          "title": "get_characters_character_id_mail_labels",
          "minimum": 0,
          "maxItems": 25,
          "uniqueItems": true,
          "items": {
            "description": "label integer",
            "type": "integer",
            "format": "int64",
            "title": "get_characters_character_id_mail_label"
          }
        },
        "mail_id": {
          "description": "mail_id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_mail_mail_id"
        },
        "recipients": {
          "$ref": "#/definitions/getCharactersCharacterIdMailOKBodyItemsRecipients"
        },
        "subject": {
          "description": "Mail subject",
          "type": "string",
          "title": "get_characters_character_id_mail_subject"
        },
        "timestamp": {
          "description": "When the mail was sent",
          "type": "string",
          "format": "date-time",
          "title": "get_characters_character_id_mail_timestamp"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMailOKBodyItemsRecipients": {
      "description": "Recipients of the mail",
      "type": "array",
      "title": "get_characters_character_id_mail_recipients",
      "maxItems": 50,
      "minItems": 1,
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdMailOKBodyItemsRecipientsItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMailOKBodyItemsRecipientsItems": {
      "description": "recipient object",
      "type": "object",
      "title": "get_characters_character_id_mail_recipient",
      "required": [
        "recipient_type",
        "recipient_id"
      ],
      "properties": {
        "recipient_id": {
          "description": "recipient_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_mail_recipient_id"
        },
        "recipient_type": {
          "description": "recipient_type string",
          "type": "string",
          "title": "get_characters_character_id_mail_recipient_type",
          "enum": [
            "alliance",
            "character",
            "corporation",
            "mailing_list"
          ]
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMedalsForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_medals_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_medals_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMedalsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_medals_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_medals_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMedalsOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_characters_character_id_medals_ok",
      "maxItems": 1000,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdMedalsOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMedalsOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_medals_200_ok",
      "required": [
        "medal_id",
        "title",
        "description",
        "corporation_id",
        "issuer_id",
        "date",
        "reason",
        "status",
        "graphics"
      ],
      "properties": {
        "corporation_id": {
          "description": "corporation_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_medals_corporation_id"
        },
        "date": {
          "description": "date string",
          "type": "string",
          "format": "date-time",
          "title": "get_characters_character_id_medals_date"
        },
        "description": {
          "description": "description string",
          "type": "string",
          "title": "get_characters_character_id_medals_description"
        },
        "graphics": {
          "$ref": "#/definitions/getCharactersCharacterIdMedalsOKBodyItemsGraphics"
        },
        "issuer_id": {
          "description": "issuer_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_medals_issuer_id"
        },
        "medal_id": {
          "description": "medal_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_medals_medal_id"
        },
        "reason": {
          "description": "reason string",
          "type": "string",
          "title": "get_characters_character_id_medals_reason"
        },
        "status": {
          "description": "status string",
          "type": "string",
          "title": "get_characters_character_id_medals_status",
          "enum": [
            "public",
            "private"
          ]
        },
        "title": {
          "description": "title string",
          "type": "string",
          "title": "get_characters_character_id_medals_title"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMedalsOKBodyItemsGraphics": {
      "description": "graphics array",
      "type": "array",
      "title": "get_characters_character_id_medals_graphics",
      "maxItems": 10,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdMedalsOKBodyItemsGraphicsItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdMedalsOKBodyItemsGraphicsItems": {
      "description": "graphic object",
      "type": "object",
      "title": "get_characters_character_id_medals_graphic",
      "required": [
        "part",
        "layer",
        "graphic"
      ],
      "properties": {
        "color": {
          "description": "color integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_medals_color"
        },
        "graphic": {
          "description": "graphic string",
          "type": "string",
          "title": "get_characters_character_id_medals_graphic"
        },
        "layer": {
          "description": "layer integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_medals_layer"
        },
        "part": {
          "description": "part integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_medals_part"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "get_characters_character_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "get_characters_character_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_ok",
      "required": [
        "corporation_id",
        "birthday",
        "name",
        "gender",
        "race_id",
        "bloodline_id"
      ],
      "properties": {
        "alliance_id": {
          "description": "The character's alliance ID",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_alliance_id"
        },
        "ancestry_id": {
          "description": "ancestry_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_ancestry_id"
        },
        "birthday": {
          "description": "Creation date of the character",
          "type": "string",
          "format": "date-time",
          "title": "get_characters_character_id_birthday"
        },
        "bloodline_id": {
          "description": "bloodline_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_bloodline_id"
        },
        "corporation_id": {
          "description": "The character's corporation ID",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_corporation_id"
        },
        "description": {
          "description": "description string",
          "type": "string",
          "title": "get_characters_character_id_description"
        },
        "gender": {
          "description": "gender string",
          "type": "string",
          "title": "get_characters_character_id_gender",
          "enum": [
            "female",
            "male"
          ]
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_characters_character_id_name"
        },
        "race_id": {
          "description": "race_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_race_id"
        },
        "security_status": {
          "description": "security_status number",
          "type": "number",
          "format": "float",
          "title": "get_characters_character_id_security_status",
          "maximum": 10,
          "minimum": -10
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdOnlineForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_online_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_online_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdOnlineInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_online_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_online_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdOpportunitiesForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_opportunities_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_opportunities_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdOpportunitiesInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_opportunities_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_opportunities_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdOpportunitiesOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_characters_character_id_opportunities_ok",
      "maxItems": 100,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdOpportunitiesOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdOpportunitiesOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_opportunities_200_ok",
      "required": [
        "task_id",
        "completed_at"
      ],
      "properties": {
        "completed_at": {
          "description": "completed_at string",
          "type": "string",
          "format": "date-time",
          "title": "get_characters_character_id_opportunities_completed_at"
        },
        "task_id": {
          "description": "task_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_opportunities_task_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdOrdersForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_orders_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_orders_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdOrdersInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_orders_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_orders_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdOrdersOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_characters_character_id_orders_ok",
      "maxItems": 500,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdOrdersOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdOrdersOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_orders_200_ok",
      "required": [
        "order_id",
        "type_id",
        "region_id",
        "location_id",
        "range",
        "is_buy_order",
        "price",
        "volume_total",
        "volume_remain",
        "issued",
        "state",
        "min_volume",
        "account_id",
        "duration",
        "is_corp",
        "escrow"
      ],
      "properties": {
        "account_id": {
          "description": "Wallet division for the buyer or seller of this order. Always 1000 for characters. Currently 1000 through 1006 for corporations",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_orders_account_id"
        },
        "duration": {
          "description": "Numer of days for which order is valid (starting from the issued date). An order expires at time issued + duration",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_orders_duration"
        },
        "escrow": {
          "description": "For buy orders, the amount of ISK in escrow",
          "type": "number",
          "format": "float",
          "title": "get_characters_character_id_orders_escrow"
        },
        "is_buy_order": {
          "description": "True for a bid (buy) order. False for an offer (sell) order",
          "type": "boolean",
          "title": "get_characters_character_id_orders_is_buy_order"
        },
        "is_corp": {
          "description": "is_corp boolean",
          "type": "boolean",
          "title": "get_characters_character_id_orders_is_corp"
        },
        "issued": {
          "description": "Date and time when this order was issued",
          "type": "string",
          "format": "date-time",
          "title": "get_characters_character_id_orders_issued"
        },
        "location_id": {
          "description": "ID of the location where order was placed",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_orders_location_id"
        },
        "min_volume": {
          "description": "For bids (buy orders), the minimum quantity that will be accepted in a matching offer (sell order)",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_orders_min_volume"
        },
        "order_id": {
          "description": "Unique order ID",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_orders_order_id"
        },
        "price": {
          "description": "Cost per unit for this order",
          "type": "number",
          "format": "float",
          "title": "get_characters_character_id_orders_price"
        },
        "range": {
          "description": "Valid order range, numbers are ranges in jumps",
          "type": "string",
          "title": "get_characters_character_id_orders_range",
          "enum": [
            "station",
            "region",
            "solarsystem",
            "1",
            "2",
            "3",
            "4",
            "5",
            "10",
            "20",
            "30",
            "40"
          ]
        },
        "region_id": {
          "description": "ID of the region where order was placed",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_orders_region_id"
        },
        "state": {
          "description": "Current order state",
          "type": "string",
          "title": "get_characters_character_id_orders_state",
          "enum": [
            "open",
            "closed",
            "expired",
            "cancelled",
            "pending",
            "character_deleted"
          ]
        },
        "type_id": {
          "description": "The type ID of the item transacted in this order",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_orders_type_id"
        },
        "volume_remain": {
          "description": "Quantity of items still required or offered",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_orders_volume_remain"
        },
        "volume_total": {
          "description": "Quantity of items required or offered at time order was placed",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_orders_volume_total"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdPlanetsForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_planets_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_planets_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdPlanetsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_planets_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_planets_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdPlanetsOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_characters_character_id_planets_ok",
      "maxItems": 10,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdPlanetsOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdPlanetsOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_planets_200_ok",
      "required": [
        "solar_system_id",
        "planet_id",
        "planet_type",
        "owner_id",
        "last_update",
        "upgrade_level",
        "num_pins"
      ],
      "properties": {
        "last_update": {
          "description": "last_update string",
          "type": "string",
          "format": "date-time",
          "title": "get_characters_character_id_planets_last_update"
        },
        "num_pins": {
          "description": "num_pins integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_planets_num_pins",
          "minimum": 1
        },
        "owner_id": {
          "description": "owner_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_planets_owner_id"
        },
        "planet_id": {
          "description": "planet_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_planets_planet_id"
        },
        "planet_type": {
          "description": "planet_type string",
          "type": "string",
          "title": "get_characters_character_id_planets_planet_type",
          "enum": [
            "temperate",
            "barren",
            "oceanic",
            "ice",
            "gas",
            "lava",
            "storm",
            "plasma"
          ]
        },
        "solar_system_id": {
          "description": "solar_system_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_planets_solar_system_id"
        },
        "upgrade_level": {
          "description": "upgrade_level integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_planets_upgrade_level",
          "maximum": 5,
          "minimum": 0
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdPlanetsPlanetIdForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_planets_planet_id_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_planets_planet_id_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdPlanetsPlanetIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_planets_planet_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_planets_planet_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdPlanetsPlanetIdNotFoundBody": {
      "description": "Colony not found",
      "type": "object",
      "title": "get_characters_character_id_planets_planet_id_not_found",
      "properties": {
        "error": {
          "description": "error message",
          "type": "string",
          "title": "get_characters_character_id_planets_planet_id_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdPlanetsPlanetIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_planets_planet_id_ok",
      "required": [
        "links",
        "pins",
        "routes"
      ],
      "properties": {
        "links": {
          "$ref": "#/definitions/getCharactersCharacterIdPlanetsPlanetIdOKBodyLinks"
        },
        "pins": {
          "$ref": "#/definitions/getCharactersCharacterIdPlanetsPlanetIdOKBodyPins"
        },
        "routes": {
          "$ref": "#/definitions/getCharactersCharacterIdPlanetsPlanetIdOKBodyRoutes"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdPlanetsPlanetIdOKBodyLinks": {
      "description": "links array",
      "type": "array",
      "title": "get_characters_character_id_planets_planet_id_links",
      "maxItems": 500,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdPlanetsPlanetIdOKBodyLinksItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdPlanetsPlanetIdOKBodyLinksItems": {
      "description": "link object",
      "type": "object",
      "title": "get_characters_character_id_planets_planet_id_link",
      "required": [
        "source_pin_id",
        "destination_pin_id",
        "link_level"
      ],
      "properties": {
        "destination_pin_id": {
          "description": "destination_pin_id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_planets_planet_id_destination_pin_id"
        },
        "link_level": {
          "description": "link_level integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_planets_planet_id_link_level",
          "maximum": 10,
          "minimum": 0
        },
        "source_pin_id": {
          "description": "source_pin_id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_planets_planet_id_source_pin_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdPlanetsPlanetIdOKBodyPins": {
      "description": "pins array",
      "type": "array",
      "title": "get_characters_character_id_planets_planet_id_pins",
      "maxItems": 100,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdPlanetsPlanetIdOKBodyPinsItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdPlanetsPlanetIdOKBodyPinsItems": {
      "description": "pin object",
      "type": "object",
      "title": "get_characters_character_id_planets_planet_id_pin",
      "required": [
        "pin_id",
        "type_id",
        "latitude",
        "longitude"
      ],
      "properties": {
        "expiry_time": {
          "description": "expiry_time string",
          "type": "string",
          "format": "date-time",
          "title": "get_characters_character_id_planets_planet_id_expiry_time"
        },
        "extractor_details": {
          "$ref": "#/definitions/getCharactersCharacterIdPlanetsPlanetIdOKBodyPinsItemsExtractorDetails"
        },
        "factory_details": {
          "$ref": "#/definitions/getCharactersCharacterIdPlanetsPlanetIdOKBodyPinsItemsFactoryDetails"
        },
        "install_time": {
          "description": "install_time string",
          "type": "string",
          "format": "date-time",
          "title": "get_characters_character_id_planets_planet_id_install_time"
        },
        "last_cycle_start": {
          "description": "last_cycle_start string",
          "type": "string",
          "format": "date-time",
          "title": "get_characters_character_id_planets_planet_id_last_cycle_start"
        },
        "latitude": {
          "description": "latitude number",
          "type": "number",
          "format": "float",
          "title": "get_characters_character_id_planets_planet_id_latitude"
        },
        "longitude": {
          "description": "longitude number",
          "type": "number",
          "format": "float",
          "title": "get_characters_character_id_planets_planet_id_longitude"
        },
        "pin_id": {
          "description": "pin_id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_planets_planet_id_pin_id"
        },
        "schematic_id": {
          "description": "schematic_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_planets_planet_id_schematic_id"
        },
        "type_id": {
          "description": "type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_planets_planet_id_type_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdPlanetsPlanetIdOKBodyPinsItemsExtractorDetails": {
      "description": "extractor_details object",
      "type": "object",
      "title": "get_characters_character_id_planets_planet_id_extractor_details",
      "required": [
        "heads"
      ],
      "properties": {
        "cycle_time": {
          "description": "in seconds",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_planets_planet_id_cycle_time"
        },
        "head_radius": {
          "description": "head_radius number",
          "type": "number",
          "format": "float",
          "title": "get_characters_character_id_planets_planet_id_head_radius"
        },
        "heads": {
          "$ref": "#/definitions/getCharactersCharacterIdPlanetsPlanetIdOKBodyPinsItemsExtractorDetailsHeads"
        },
        "product_type_id": {
          "description": "product_type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_planets_planet_id_product_type_id"
        },
        "qty_per_cycle": {
          "description": "qty_per_cycle integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_planets_planet_id_qty_per_cycle"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdPlanetsPlanetIdOKBodyPinsItemsExtractorDetailsHeads": {
      "description": "heads array",
      "type": "array",
      "title": "get_characters_character_id_planets_planet_id_heads",
      "maxItems": 10,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdPlanetsPlanetIdOKBodyPinsItemsExtractorDetailsHeadsItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdPlanetsPlanetIdOKBodyPinsItemsExtractorDetailsHeadsItems": {
      "description": "head object",
      "type": "object",
      "title": "get_characters_character_id_planets_planet_id_head",
      "required": [
        "head_id",
        "latitude",
        "longitude"
      ],
      "properties": {
        "head_id": {
          "description": "head_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_planets_planet_id_head_id",
          "maximum": 9,
          "minimum": 0
        },
        "latitude": {
          "description": "latitude number",
          "type": "number",
          "format": "float",
          "title": "get_characters_character_id_planets_planet_id_latitude"
        },
        "longitude": {
          "description": "longitude number",
          "type": "number",
          "format": "float",
          "title": "get_characters_character_id_planets_planet_id_longitude"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdPlanetsPlanetIdOKBodyPinsItemsFactoryDetails": {
      "description": "factory_details object",
      "type": "object",
      "title": "get_characters_character_id_planets_planet_id_factory_details",
      "required": [
        "schematic_id"
      ],
      "properties": {
        "schematic_id": {
          "description": "schematic_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_planets_planet_id_schematic_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdPlanetsPlanetIdOKBodyRoutes": {
      "description": "routes array",
      "type": "array",
      "title": "get_characters_character_id_planets_planet_id_routes",
      "maxItems": 1000,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdPlanetsPlanetIdOKBodyRoutesItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdPlanetsPlanetIdOKBodyRoutesItems": {
      "description": "route object",
      "type": "object",
      "title": "get_characters_character_id_planets_planet_id_route",
      "required": [
        "route_id",
        "source_pin_id",
        "destination_pin_id",
        "content_type_id",
        "quantity"
      ],
      "properties": {
        "content_type_id": {
          "description": "content_type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_planets_planet_id_content_type_id"
        },
        "destination_pin_id": {
          "description": "destination_pin_id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_planets_planet_id_destination_pin_id"
        },
        "quantity": {
          "description": "quantity number",
          "type": "number",
          "format": "float",
          "title": "get_characters_character_id_planets_planet_id_quantity"
        },
        "route_id": {
          "description": "route_id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_planets_planet_id_route_id"
        },
        "source_pin_id": {
          "description": "source_pin_id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_planets_planet_id_source_pin_id"
        },
        "waypoints": {
          "$ref": "#/definitions/getCharactersCharacterIdPlanetsPlanetIdOKBodyRoutesItemsWaypoints"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdPlanetsPlanetIdOKBodyRoutesItemsWaypoints": {
      "description": "waypoints array",
      "type": "array",
      "title": "get_characters_character_id_planets_planet_id_waypoints",
      "maxItems": 5,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdPlanetsPlanetIdOKBodyRoutesItemsWaypointsItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdPlanetsPlanetIdOKBodyRoutesItemsWaypointsItems": {
      "description": "waypoint object",
      "type": "object",
      "title": "get_characters_character_id_planets_planet_id_waypoint",
      "required": [
        "pin_id",
        "order"
      ],
      "properties": {
        "order": {
          "description": "order integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_planets_planet_id_order",
          "maximum": 5,
          "minimum": 1
        },
        "pin_id": {
          "description": "pin_id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_planets_planet_id_pin_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdPortraitInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_portrait_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_portrait_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdPortraitNotFoundBody": {
      "description": "No image server for this datasource",
      "type": "object",
      "title": "get_characters_character_id_portrait_not_found",
      "properties": {
        "error": {
          "description": "error message",
          "type": "string",
          "title": "get_characters_character_id_portrait_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdPortraitOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_portrait_ok",
      "properties": {
        "px128x128": {
          "description": "px128x128 string",
          "type": "string",
          "title": "get_characters_character_id_portrait_px128x128"
        },
        "px256x256": {
          "description": "px256x256 string",
          "type": "string",
          "title": "get_characters_character_id_portrait_px256x256"
        },
        "px512x512": {
          "description": "px512x512 string",
          "type": "string",
          "title": "get_characters_character_id_portrait_px512x512"
        },
        "px64x64": {
          "description": "px64x64 string",
          "type": "string",
          "title": "get_characters_character_id_portrait_px64x64"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdRolesForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_roles_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_roles_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdRolesInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_roles_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_roles_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdSearchForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_search_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_search_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdSearchInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_search_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_search_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdSearchOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_search_ok",
      "properties": {
        "agent": {
          "description": "agent array",
          "type": "array",
          "title": "get_characters_character_id_search_agent",
          "maxItems": 500,
          "items": {
            "description": "agent integer",
            "type": "integer",
            "format": "int32",
            "title": "get_characters_character_id_search_agent"
          }
        },
        "alliance": {
          "description": "alliance array",
          "type": "array",
          "title": "get_characters_character_id_search_alliance",
          "maxItems": 500,
          "items": {
            "description": "alliance integer",
            "type": "integer",
            "format": "int32",
            "title": "get_characters_character_id_search_alliance"
          }
        },
        "character": {
          "description": "character array",
          "type": "array",
          "title": "get_characters_character_id_search_character",
          "maxItems": 500,
          "items": {
            "description": "character integer",
            "type": "integer",
            "format": "int32",
            "title": "get_characters_character_id_search_character"
          }
        },
        "constellation": {
          "description": "constellation array",
          "type": "array",
          "title": "get_characters_character_id_search_constellation",
          "maxItems": 500,
          "items": {
            "description": "constellation integer",
            "type": "integer",
            "format": "int32",
            "title": "get_characters_character_id_search_constellation"
          }
        },
        "corporation": {
          "description": "corporation array",
          "type": "array",
          "title": "get_characters_character_id_search_corporation",
          "maxItems": 500,
          "items": {
            "description": "corporation integer",
            "type": "integer",
            "format": "int32",
            "title": "get_characters_character_id_search_corporation"
          }
        },
        "faction": {
          "description": "faction array",
          "type": "array",
          "title": "get_characters_character_id_search_faction",
          "maxItems": 500,
          "items": {
            "description": "faction integer",
            "type": "integer",
            "format": "int32",
            "title": "get_characters_character_id_search_faction"
          }
        },
        "inventorytype": {
          "description": "inventorytype array",
          "type": "array",
          "title": "get_characters_character_id_search_inventorytype",
          "maxItems": 500,
          "items": {
            "description": "inventorytype integer",
            "type": "integer",
            "format": "int32",
            "title": "get_characters_character_id_search_inventorytype"
          }
        },
        "region": {
          "description": "region array",
          "type": "array",
          "title": "get_characters_character_id_search_region",
          "maxItems": 500,
          "items": {
            "description": "region integer",
            "type": "integer",
            "format": "int32",
            "title": "get_characters_character_id_search_region"
          }
        },
        "solarsystem": {
          "description": "solarsystem array",
          "type": "array",
          "title": "get_characters_character_id_search_solarsystem",
          "maxItems": 500,
          "items": {
            "description": "solarsystem integer",
            "type": "integer",
            "format": "int32",
            "title": "get_characters_character_id_search_solarsystem"
          }
        },
        "station": {
          "description": "station array",
          "type": "array",
          "title": "get_characters_character_id_search_station",
          "maxItems": 500,
          "items": {
            "description": "station integer",
            "type": "integer",
            "format": "int32",
            "title": "get_characters_character_id_search_station"
          }
        },
        "structure": {
          "description": "structure array",
          "type": "array",
          "title": "get_characters_character_id_search_structure",
          "maxItems": 500,
          "items": {
            "description": "structure integer",
            "type": "integer",
            "format": "int64",
            "title": "get_characters_character_id_search_structure"
          }
        },
        "wormhole": {
          "description": "wormhole array",
          "type": "array",
          "title": "get_characters_character_id_search_wormhole",
          "maxItems": 500,
          "items": {
            "description": "wormhole integer",
            "type": "integer",
            "format": "int32",
            "title": "get_characters_character_id_search_wormhole"
          }
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdShipForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_ship_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_ship_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdShipInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_ship_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_ship_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdShipOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_ship_ok",
      "required": [
        "ship_type_id",
        "ship_item_id",
        "ship_name"
      ],
      "properties": {
        "ship_item_id": {
          "description": "Item id's are unique to a ship and persist until it is repackaged. This value can be used to track repeated uses of a ship, or detect when a pilot changes into a different instance of the same ship type.",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_ship_ship_item_id"
        },
        "ship_name": {
          "description": "ship_name string",
          "type": "string",
          "title": "get_characters_character_id_ship_ship_name"
        },
        "ship_type_id": {
          "description": "ship_type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_ship_ship_type_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdSkillqueueForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_skillqueue_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_skillqueue_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdSkillqueueInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_skillqueue_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_skillqueue_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdSkillqueueOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_characters_character_id_skillqueue_ok",
      "maxItems": 50,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdSkillqueueOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdSkillqueueOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_skillqueue_200_ok",
      "required": [
        "skill_id",
        "finished_level",
        "queue_position"
      ],
      "properties": {
        "finish_date": {
          "description": "finish_date string",
          "type": "string",
          "format": "date-time",
          "title": "get_characters_character_id_skillqueue_finish_date"
        },
        "finished_level": {
          "description": "finished_level integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_skillqueue_finished_level",
          "maximum": 5,
          "minimum": 0
        },
        "level_end_sp": {
          "description": "level_end_sp integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_skillqueue_level_end_sp"
        },
        "level_start_sp": {
          "description": "Amount of SP that was in the skill when it started training it's current level. Used to calculate % of current level complete.",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_skillqueue_level_start_sp"
        },
        "queue_position": {
          "description": "queue_position integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_skillqueue_queue_position"
        },
        "skill_id": {
          "description": "skill_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_skillqueue_skill_id"
        },
        "start_date": {
          "description": "start_date string",
          "type": "string",
          "format": "date-time",
          "title": "get_characters_character_id_skillqueue_start_date"
        },
        "training_start_sp": {
          "description": "training_start_sp integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_skillqueue_training_start_sp"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdSkillsForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_skills_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_skills_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdSkillsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_skills_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_skills_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdSkillsOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_skills_ok",
      "properties": {
        "skills": {
          "$ref": "#/definitions/getCharactersCharacterIdSkillsOKBodySkills"
        },
        "total_sp": {
          "description": "total_sp integer",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_skills_total_sp"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdSkillsOKBodySkills": {
      "description": "skills array",
      "type": "array",
      "title": "get_characters_character_id_skills_skills",
      "maxItems": 1000,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdSkillsOKBodySkillsItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdSkillsOKBodySkillsItems": {
      "description": "skill object",
      "type": "object",
      "title": "get_characters_character_id_skills_skill",
      "properties": {
        "current_skill_level": {
          "description": "current_skill_level integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_skills_current_skill_level"
        },
        "skill_id": {
          "description": "skill_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_skills_skill_id"
        },
        "skillpoints_in_skill": {
          "description": "skillpoints_in_skill integer",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_skills_skillpoints_in_skill"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdStandingsForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_standings_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_standings_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdStandingsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_standings_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_standings_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdStandingsOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_characters_character_id_standings_ok",
      "maxItems": 10000,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdStandingsOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdStandingsOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_standings_200_ok",
      "required": [
        "from_id",
        "from_type",
        "standing"
      ],
      "properties": {
        "from_id": {
          "description": "from_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_standings_from_id"
        },
        "from_type": {
          "description": "from_type string",
          "type": "string",
          "title": "get_characters_character_id_standings_from_type",
          "enum": [
            "agent",
            "npc_corp",
            "faction"
          ]
        },
        "standing": {
          "description": "standing number",
          "type": "number",
          "format": "float",
          "title": "get_characters_character_id_standings_standing",
          "maximum": 10,
          "minimum": -10
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdWalletsForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_characters_character_id_wallets_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_characters_character_id_wallets_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdWalletsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_character_id_wallets_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_character_id_wallets_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdWalletsOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_characters_character_id_wallets_ok",
      "maxItems": 10,
      "items": {
        "$ref": "#/definitions/getCharactersCharacterIdWalletsOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersCharacterIdWalletsOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_character_id_wallets_200_ok",
      "properties": {
        "balance": {
          "description": "Wallet's balance in ISK hundredths.",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_character_id_wallets_balance"
        },
        "wallet_id": {
          "description": "wallet_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_characters_character_id_wallets_wallet_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersNamesInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_characters_names_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_characters_names_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersNamesOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_characters_names_ok",
      "maxItems": 1000,
      "items": {
        "$ref": "#/definitions/getCharactersNamesOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCharactersNamesOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_characters_names_200_ok",
      "required": [
        "character_id",
        "character_name"
      ],
      "properties": {
        "character_id": {
          "description": "character_id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_characters_names_character_id"
        },
        "character_name": {
          "description": "character_name string",
          "type": "string",
          "title": "get_characters_names_character_name"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdAlliancehistoryInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_corporations_corporation_id_alliancehistory_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_corporations_corporation_id_alliancehistory_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdAlliancehistoryOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_corporations_corporation_id_alliancehistory_ok",
      "maxItems": 10000,
      "items": {
        "$ref": "#/definitions/getCorporationsCorporationIdAlliancehistoryOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdAlliancehistoryOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_corporations_corporation_id_alliancehistory_200_ok",
      "required": [
        "start_date",
        "record_id"
      ],
      "properties": {
        "alliance": {
          "$ref": "#/definitions/getCorporationsCorporationIdAlliancehistoryOKBodyItemsAlliance"
        },
        "record_id": {
          "description": "An incrementing ID that can be used to canonically establish order of records in cases where dates may be ambiguous",
          "type": "integer",
          "format": "int32",
          "title": "get_corporations_corporation_id_alliancehistory_record_id"
        },
        "start_date": {
          "description": "start_date string",
          "type": "string",
          "format": "date-time",
          "title": "get_corporations_corporation_id_alliancehistory_start_date"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdAlliancehistoryOKBodyItemsAlliance": {
      "description": "alliance object",
      "type": "object",
      "title": "get_corporations_corporation_id_alliancehistory_alliance",
      "required": [
        "alliance_id",
        "is_deleted"
      ],
      "properties": {
        "alliance_id": {
          "description": "alliance_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_corporations_corporation_id_alliancehistory_alliance_id"
        },
        "is_deleted": {
          "description": "True if the alliance has been deleted",
          "type": "boolean",
          "title": "get_corporations_corporation_id_alliancehistory_is_deleted"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdIconsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_corporations_corporation_id_icons_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_corporations_corporation_id_icons_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdIconsNotFoundBody": {
      "description": "No image server for this datasource",
      "type": "object",
      "title": "get_corporations_corporation_id_icons_not_found",
      "properties": {
        "error": {
          "description": "error message",
          "type": "string",
          "title": "get_corporations_corporation_id_icons_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdIconsOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_corporations_corporation_id_icons_ok",
      "properties": {
        "px128x128": {
          "description": "px128x128 string",
          "type": "string",
          "title": "get_corporations_corporation_id_icons_px128x128"
        },
        "px256x256": {
          "description": "px256x256 string",
          "type": "string",
          "title": "get_corporations_corporation_id_icons_px256x256"
        },
        "px64x64": {
          "description": "px64x64 string",
          "type": "string",
          "title": "get_corporations_corporation_id_icons_px64x64"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_corporations_corporation_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_corporations_corporation_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdMembersForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_corporations_corporation_id_members_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_corporations_corporation_id_members_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdMembersInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_corporations_corporation_id_members_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_corporations_corporation_id_members_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdMembersOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_corporations_corporation_id_members_ok",
      "maxItems": 12601,
      "items": {
        "$ref": "#/definitions/getCorporationsCorporationIdMembersOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdMembersOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_corporations_corporation_id_members_200_ok",
      "required": [
        "character_id"
      ],
      "properties": {
        "character_id": {
          "description": "character_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_corporations_corporation_id_members_character_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "get_corporations_corporation_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "get_corporations_corporation_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_corporations_corporation_id_ok",
      "required": [
        "corporation_name",
        "ticker",
        "member_count",
        "ceo_id",
        "corporation_description",
        "tax_rate",
        "creator_id",
        "url"
      ],
      "properties": {
        "alliance_id": {
          "description": "id of alliance that corporation is a member of, if any",
          "type": "integer",
          "format": "int32",
          "title": "get_corporations_corporation_id_alliance_id"
        },
        "ceo_id": {
          "description": "ceo_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_corporations_corporation_id_ceo_id"
        },
        "corporation_description": {
          "description": "corporation_description string",
          "type": "string",
          "title": "get_corporations_corporation_id_corporation_description"
        },
        "corporation_name": {
          "description": "the full name of the corporation",
          "type": "string",
          "title": "get_corporations_corporation_id_corporation_name"
        },
        "creation_date": {
          "description": "creation_date string",
          "type": "string",
          "format": "date-time",
          "title": "get_corporations_corporation_id_creation_date"
        },
        "creator_id": {
          "description": "creator_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_corporations_corporation_id_creator_id"
        },
        "faction": {
          "description": "faction string",
          "type": "string",
          "title": "get_corporations_corporation_id_faction",
          "enum": [
            "Minmatar",
            "Gallente",
            "Caldari",
            "Amarr"
          ]
        },
        "member_count": {
          "description": "member_count integer",
          "type": "integer",
          "format": "int32",
          "title": "get_corporations_corporation_id_member_count"
        },
        "tax_rate": {
          "description": "tax_rate number",
          "type": "number",
          "format": "float",
          "title": "get_corporations_corporation_id_tax_rate",
          "maximum": 1,
          "minimum": 0
        },
        "ticker": {
          "description": "the short name of the corporation",
          "type": "string",
          "title": "get_corporations_corporation_id_ticker"
        },
        "url": {
          "description": "url string",
          "type": "string",
          "title": "get_corporations_corporation_id_url"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdRolesForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_corporations_corporation_id_roles_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_corporations_corporation_id_roles_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdRolesInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_corporations_corporation_id_roles_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_corporations_corporation_id_roles_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdRolesOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_corporations_corporation_id_roles_ok",
      "maxItems": 12601,
      "items": {
        "$ref": "#/definitions/getCorporationsCorporationIdRolesOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdRolesOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_corporations_corporation_id_roles_200_ok",
      "required": [
        "character_id"
      ],
      "properties": {
        "character_id": {
          "description": "character_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_corporations_corporation_id_roles_character_id"
        },
        "grantable_roles": {
          "description": "grantable_roles array",
          "type": "array",
          "title": "get_corporations_corporation_id_roles_grantable_roles",
          "maxItems": 50,
          "items": {
            "description": "grantable_role string",
            "type": "string",
            "title": "get_corporations_corporation_id_roles_grantable_role",
            "uniqueItems": true,
            "enum": [
              "Director",
              "Personnel_Manager",
              "Accountant",
              "Security_Officer",
              "Factory_Manager",
              "Station_Manager",
              "Auditor",
              "Hangar_Take_1",
              "Hangar_Take_2",
              "Hangar_Take_3",
              "Hangar_Take_4",
              "Hangar_Take_5",
              "Hangar_Take_6",
              "Hangar_Take_7",
              "Hangar_Query_1",
              "Hangar_Query_2",
              "Hangar_Query_3",
              "Hangar_Query_4",
              "Hangar_Query_5",
              "Hangar_Query_6",
              "Hangar_Query_7",
              "Account_Take_1",
              "Account_Take_2",
              "Account_Take_3",
              "Account_Take_4",
              "Account_Take_5",
              "Account_Take_6",
              "Account_Take_7",
              "Diplomat",
              "Config_Equipment",
              "Container_Take_1",
              "Container_Take_2",
              "Container_Take_3",
              "Container_Take_4",
              "Container_Take_5",
              "Container_Take_6",
              "Container_Take_7",
              "Rent_Office",
              "Rent_Factory_Facility",
              "Rent_Research_Facility",
              "Junior_Accountant",
              "Config_Starbase_Equipment",
              "Trader",
              "Communications_Officer",
              "Contract_Manager",
              "Starbase_Defense_Operator",
              "Starbase_Fuel_Technician",
              "Fitting_Manager",
              "Terrestrial_Combat_Officer",
              "Terrestrial_Logistics_Officer"
            ]
          }
        },
        "grantable_roles_at_base": {
          "description": "grantable_roles_at_base array",
          "type": "array",
          "title": "get_corporations_corporation_id_roles_grantable_roles_at_base",
          "maxItems": 50,
          "items": {
            "description": "grantable_roles_at_base string",
            "type": "string",
            "title": "get_corporations_corporation_id_roles_grantable_roles_at_base",
            "uniqueItems": true,
            "enum": [
              "Director",
              "Personnel_Manager",
              "Accountant",
              "Security_Officer",
              "Factory_Manager",
              "Station_Manager",
              "Auditor",
              "Hangar_Take_1",
              "Hangar_Take_2",
              "Hangar_Take_3",
              "Hangar_Take_4",
              "Hangar_Take_5",
              "Hangar_Take_6",
              "Hangar_Take_7",
              "Hangar_Query_1",
              "Hangar_Query_2",
              "Hangar_Query_3",
              "Hangar_Query_4",
              "Hangar_Query_5",
              "Hangar_Query_6",
              "Hangar_Query_7",
              "Account_Take_1",
              "Account_Take_2",
              "Account_Take_3",
              "Account_Take_4",
              "Account_Take_5",
              "Account_Take_6",
              "Account_Take_7",
              "Diplomat",
              "Config_Equipment",
              "Container_Take_1",
              "Container_Take_2",
              "Container_Take_3",
              "Container_Take_4",
              "Container_Take_5",
              "Container_Take_6",
              "Container_Take_7",
              "Rent_Office",
              "Rent_Factory_Facility",
              "Rent_Research_Facility",
              "Junior_Accountant",
              "Config_Starbase_Equipment",
              "Trader",
              "Communications_Officer",
              "Contract_Manager",
              "Starbase_Defense_Operator",
              "Starbase_Fuel_Technician",
              "Fitting_Manager",
              "Terrestrial_Combat_Officer",
              "Terrestrial_Logistics_Officer"
            ]
          }
        },
        "grantable_roles_at_hq": {
          "description": "grantable_roles_at_hq array",
          "type": "array",
          "title": "get_corporations_corporation_id_roles_grantable_roles_at_hq",
          "maxItems": 50,
          "items": {
            "description": "grantable_roles_at_hq string",
            "type": "string",
            "title": "get_corporations_corporation_id_roles_grantable_roles_at_hq",
            "uniqueItems": true,
            "enum": [
              "Director",
              "Personnel_Manager",
              "Accountant",
              "Security_Officer",
              "Factory_Manager",
              "Station_Manager",
              "Auditor",
              "Hangar_Take_1",
              "Hangar_Take_2",
              "Hangar_Take_3",
              "Hangar_Take_4",
              "Hangar_Take_5",
              "Hangar_Take_6",
              "Hangar_Take_7",
              "Hangar_Query_1",
              "Hangar_Query_2",
              "Hangar_Query_3",
              "Hangar_Query_4",
              "Hangar_Query_5",
              "Hangar_Query_6",
              "Hangar_Query_7",
              "Account_Take_1",
              "Account_Take_2",
              "Account_Take_3",
              "Account_Take_4",
              "Account_Take_5",
              "Account_Take_6",
              "Account_Take_7",
              "Diplomat",
              "Config_Equipment",
              "Container_Take_1",
              "Container_Take_2",
              "Container_Take_3",
              "Container_Take_4",
              "Container_Take_5",
              "Container_Take_6",
              "Container_Take_7",
              "Rent_Office",
              "Rent_Factory_Facility",
              "Rent_Research_Facility",
              "Junior_Accountant",
              "Config_Starbase_Equipment",
              "Trader",
              "Communications_Officer",
              "Contract_Manager",
              "Starbase_Defense_Operator",
              "Starbase_Fuel_Technician",
              "Fitting_Manager",
              "Terrestrial_Combat_Officer",
              "Terrestrial_Logistics_Officer"
            ]
          }
        },
        "grantable_roles_at_other": {
          "description": "grantable_roles_at_other array",
          "type": "array",
          "title": "get_corporations_corporation_id_roles_grantable_roles_at_other",
          "maxItems": 50,
          "items": {
            "description": "grantable_roles_at_other string",
            "type": "string",
            "title": "get_corporations_corporation_id_roles_grantable_roles_at_other",
            "uniqueItems": true,
            "enum": [
              "Director",
              "Personnel_Manager",
              "Accountant",
              "Security_Officer",
              "Factory_Manager",
              "Station_Manager",
              "Auditor",
              "Hangar_Take_1",
              "Hangar_Take_2",
              "Hangar_Take_3",
              "Hangar_Take_4",
              "Hangar_Take_5",
              "Hangar_Take_6",
              "Hangar_Take_7",
              "Hangar_Query_1",
              "Hangar_Query_2",
              "Hangar_Query_3",
              "Hangar_Query_4",
              "Hangar_Query_5",
              "Hangar_Query_6",
              "Hangar_Query_7",
              "Account_Take_1",
              "Account_Take_2",
              "Account_Take_3",
              "Account_Take_4",
              "Account_Take_5",
              "Account_Take_6",
              "Account_Take_7",
              "Diplomat",
              "Config_Equipment",
              "Container_Take_1",
              "Container_Take_2",
              "Container_Take_3",
              "Container_Take_4",
              "Container_Take_5",
              "Container_Take_6",
              "Container_Take_7",
              "Rent_Office",
              "Rent_Factory_Facility",
              "Rent_Research_Facility",
              "Junior_Accountant",
              "Config_Starbase_Equipment",
              "Trader",
              "Communications_Officer",
              "Contract_Manager",
              "Starbase_Defense_Operator",
              "Starbase_Fuel_Technician",
              "Fitting_Manager",
              "Terrestrial_Combat_Officer",
              "Terrestrial_Logistics_Officer"
            ]
          }
        },
        "roles": {
          "description": "roles array",
          "type": "array",
          "title": "get_corporations_corporation_id_roles_roles",
          "maxItems": 50,
          "items": {
            "description": "role string",
            "type": "string",
            "title": "get_corporations_corporation_id_roles_role",
            "uniqueItems": true,
            "enum": [
              "Director",
              "Personnel_Manager",
              "Accountant",
              "Security_Officer",
              "Factory_Manager",
              "Station_Manager",
              "Auditor",
              "Hangar_Take_1",
              "Hangar_Take_2",
              "Hangar_Take_3",
              "Hangar_Take_4",
              "Hangar_Take_5",
              "Hangar_Take_6",
              "Hangar_Take_7",
              "Hangar_Query_1",
              "Hangar_Query_2",
              "Hangar_Query_3",
              "Hangar_Query_4",
              "Hangar_Query_5",
              "Hangar_Query_6",
              "Hangar_Query_7",
              "Account_Take_1",
              "Account_Take_2",
              "Account_Take_3",
              "Account_Take_4",
              "Account_Take_5",
              "Account_Take_6",
              "Account_Take_7",
              "Diplomat",
              "Config_Equipment",
              "Container_Take_1",
              "Container_Take_2",
              "Container_Take_3",
              "Container_Take_4",
              "Container_Take_5",
              "Container_Take_6",
              "Container_Take_7",
              "Rent_Office",
              "Rent_Factory_Facility",
              "Rent_Research_Facility",
              "Junior_Accountant",
              "Config_Starbase_Equipment",
              "Trader",
              "Communications_Officer",
              "Contract_Manager",
              "Starbase_Defense_Operator",
              "Starbase_Fuel_Technician",
              "Fitting_Manager",
              "Terrestrial_Combat_Officer",
              "Terrestrial_Logistics_Officer"
            ]
          }
        },
        "roles_at_base": {
          "description": "roles_at_base array",
          "type": "array",
          "title": "get_corporations_corporation_id_roles_roles_at_base",
          "maxItems": 50,
          "items": {
            "description": "roles_at_base string",
            "type": "string",
            "title": "get_corporations_corporation_id_roles_roles_at_base",
            "uniqueItems": true,
            "enum": [
              "Director",
              "Personnel_Manager",
              "Accountant",
              "Security_Officer",
              "Factory_Manager",
              "Station_Manager",
              "Auditor",
              "Hangar_Take_1",
              "Hangar_Take_2",
              "Hangar_Take_3",
              "Hangar_Take_4",
              "Hangar_Take_5",
              "Hangar_Take_6",
              "Hangar_Take_7",
              "Hangar_Query_1",
              "Hangar_Query_2",
              "Hangar_Query_3",
              "Hangar_Query_4",
              "Hangar_Query_5",
              "Hangar_Query_6",
              "Hangar_Query_7",
              "Account_Take_1",
              "Account_Take_2",
              "Account_Take_3",
              "Account_Take_4",
              "Account_Take_5",
              "Account_Take_6",
              "Account_Take_7",
              "Diplomat",
              "Config_Equipment",
              "Container_Take_1",
              "Container_Take_2",
              "Container_Take_3",
              "Container_Take_4",
              "Container_Take_5",
              "Container_Take_6",
              "Container_Take_7",
              "Rent_Office",
              "Rent_Factory_Facility",
              "Rent_Research_Facility",
              "Junior_Accountant",
              "Config_Starbase_Equipment",
              "Trader",
              "Communications_Officer",
              "Contract_Manager",
              "Starbase_Defense_Operator",
              "Starbase_Fuel_Technician",
              "Fitting_Manager",
              "Terrestrial_Combat_Officer",
              "Terrestrial_Logistics_Officer"
            ]
          }
        },
        "roles_at_hq": {
          "description": "roles_at_hq array",
          "type": "array",
          "title": "get_corporations_corporation_id_roles_roles_at_hq",
          "maxItems": 50,
          "items": {
            "description": "roles_at_hq string",
            "type": "string",
            "title": "get_corporations_corporation_id_roles_roles_at_hq",
            "uniqueItems": true,
            "enum": [
              "Director",
              "Personnel_Manager",
              "Accountant",
              "Security_Officer",
              "Factory_Manager",
              "Station_Manager",
              "Auditor",
              "Hangar_Take_1",
              "Hangar_Take_2",
              "Hangar_Take_3",
              "Hangar_Take_4",
              "Hangar_Take_5",
              "Hangar_Take_6",
              "Hangar_Take_7",
              "Hangar_Query_1",
              "Hangar_Query_2",
              "Hangar_Query_3",
              "Hangar_Query_4",
              "Hangar_Query_5",
              "Hangar_Query_6",
              "Hangar_Query_7",
              "Account_Take_1",
              "Account_Take_2",
              "Account_Take_3",
              "Account_Take_4",
              "Account_Take_5",
              "Account_Take_6",
              "Account_Take_7",
              "Diplomat",
              "Config_Equipment",
              "Container_Take_1",
              "Container_Take_2",
              "Container_Take_3",
              "Container_Take_4",
              "Container_Take_5",
              "Container_Take_6",
              "Container_Take_7",
              "Rent_Office",
              "Rent_Factory_Facility",
              "Rent_Research_Facility",
              "Junior_Accountant",
              "Config_Starbase_Equipment",
              "Trader",
              "Communications_Officer",
              "Contract_Manager",
              "Starbase_Defense_Operator",
              "Starbase_Fuel_Technician",
              "Fitting_Manager",
              "Terrestrial_Combat_Officer",
              "Terrestrial_Logistics_Officer"
            ]
          }
        },
        "roles_at_other": {
          "description": "roles_at_other array",
          "type": "array",
          "title": "get_corporations_corporation_id_roles_roles_at_other",
          "maxItems": 50,
          "items": {
            "description": "roles_at_other string",
            "type": "string",
            "title": "get_corporations_corporation_id_roles_roles_at_other",
            "uniqueItems": true,
            "enum": [
              "Director",
              "Personnel_Manager",
              "Accountant",
              "Security_Officer",
              "Factory_Manager",
              "Station_Manager",
              "Auditor",
              "Hangar_Take_1",
              "Hangar_Take_2",
              "Hangar_Take_3",
              "Hangar_Take_4",
              "Hangar_Take_5",
              "Hangar_Take_6",
              "Hangar_Take_7",
              "Hangar_Query_1",
              "Hangar_Query_2",
              "Hangar_Query_3",
              "Hangar_Query_4",
              "Hangar_Query_5",
              "Hangar_Query_6",
              "Hangar_Query_7",
              "Account_Take_1",
              "Account_Take_2",
              "Account_Take_3",
              "Account_Take_4",
              "Account_Take_5",
              "Account_Take_6",
              "Account_Take_7",
              "Diplomat",
              "Config_Equipment",
              "Container_Take_1",
              "Container_Take_2",
              "Container_Take_3",
              "Container_Take_4",
              "Container_Take_5",
              "Container_Take_6",
              "Container_Take_7",
              "Rent_Office",
              "Rent_Factory_Facility",
              "Rent_Research_Facility",
              "Junior_Accountant",
              "Config_Starbase_Equipment",
              "Trader",
              "Communications_Officer",
              "Contract_Manager",
              "Starbase_Defense_Operator",
              "Starbase_Fuel_Technician",
              "Fitting_Manager",
              "Terrestrial_Combat_Officer",
              "Terrestrial_Logistics_Officer"
            ]
          }
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdStructuresForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_corporations_corporation_id_structures_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_corporations_corporation_id_structures_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdStructuresInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_corporations_corporation_id_structures_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_corporations_corporation_id_structures_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdStructuresOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_corporations_corporation_id_structures_ok",
      "maxItems": 250,
      "items": {
        "$ref": "#/definitions/getCorporationsCorporationIdStructuresOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdStructuresOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_corporations_corporation_id_structures_200_ok",
      "required": [
        "structure_id",
        "type_id",
        "corporation_id",
        "system_id",
        "profile_id",
        "current_vul",
        "next_vul"
      ],
      "properties": {
        "corporation_id": {
          "description": "ID of the corporation that owns the structure",
          "type": "integer",
          "format": "int32",
          "title": "get_corporations_corporation_id_structures_corporation_id"
        },
        "current_vul": {
          "$ref": "#/definitions/getCorporationsCorporationIdStructuresOKBodyItemsCurrentVul"
        },
        "fuel_expires": {
          "description": "Date on which the structure will run out of fuel",
          "type": "string",
          "format": "date",
          "title": "get_corporations_corporation_id_structures_fuel_expires"
        },
        "next_vul": {
          "$ref": "#/definitions/getCorporationsCorporationIdStructuresOKBodyItemsNextVul"
        },
        "profile_id": {
          "description": "The id of the ACL profile for this citadel",
          "type": "integer",
          "format": "int32",
          "title": "get_corporations_corporation_id_structures_profile_id"
        },
        "services": {
          "$ref": "#/definitions/getCorporationsCorporationIdStructuresOKBodyItemsServices"
        },
        "state_timer_end": {
          "description": "Date at which the structure will move to it's next state",
          "type": "string",
          "format": "date",
          "title": "get_corporations_corporation_id_structures_state_timer_end"
        },
        "state_timer_start": {
          "description": "Date at which the structure entered it's current state",
          "type": "string",
          "format": "date",
          "title": "get_corporations_corporation_id_structures_state_timer_start"
        },
        "structure_id": {
          "description": "The Item ID of the structure",
          "type": "integer",
          "format": "int64",
          "title": "get_corporations_corporation_id_structures_structure_id"
        },
        "system_id": {
          "description": "The solar system the structure is in",
          "type": "integer",
          "format": "int32",
          "title": "get_corporations_corporation_id_structures_system_id"
        },
        "type_id": {
          "description": "The type id of the structure",
          "type": "integer",
          "format": "int32",
          "title": "get_corporations_corporation_id_structures_type_id"
        },
        "unanchors_at": {
          "description": "Date at which the structure will unanchor",
          "type": "string",
          "format": "date",
          "title": "get_corporations_corporation_id_structures_unanchors_at"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdStructuresOKBodyItemsCurrentVul": {
      "description": "This week's vulnerability windows, Monday is day 0",
      "type": "array",
      "title": "get_corporations_corporation_id_structures_current_vul",
      "maxItems": 168,
      "items": {
        "$ref": "#/definitions/getCorporationsCorporationIdStructuresOKBodyItemsCurrentVulItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdStructuresOKBodyItemsCurrentVulItems": {
      "description": "current_vul object",
      "type": "object",
      "title": "get_corporations_corporation_id_structures_current_vul",
      "required": [
        "day",
        "hour"
      ],
      "properties": {
        "day": {
          "description": "day integer",
          "type": "integer",
          "format": "int32",
          "title": "get_corporations_corporation_id_structures_day"
        },
        "hour": {
          "description": "hour integer",
          "type": "integer",
          "format": "int32",
          "title": "get_corporations_corporation_id_structures_hour"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdStructuresOKBodyItemsNextVul": {
      "description": "Next week's vulnerability windows, Monday is day 0",
      "type": "array",
      "title": "get_corporations_corporation_id_structures_next_vul",
      "maxItems": 168,
      "items": {
        "$ref": "#/definitions/getCorporationsCorporationIdStructuresOKBodyItemsNextVulItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdStructuresOKBodyItemsNextVulItems": {
      "description": "next_vul object",
      "type": "object",
      "title": "get_corporations_corporation_id_structures_next_vul",
      "required": [
        "day",
        "hour"
      ],
      "properties": {
        "day": {
          "description": "day integer",
          "type": "integer",
          "format": "int32",
          "title": "get_corporations_corporation_id_structures_day"
        },
        "hour": {
          "description": "hour integer",
          "type": "integer",
          "format": "int32",
          "title": "get_corporations_corporation_id_structures_hour"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdStructuresOKBodyItemsServices": {
      "description": "Contains a list of service upgrades, and their state",
      "type": "array",
      "title": "get_corporations_corporation_id_structures_services",
      "maxItems": 10,
      "items": {
        "$ref": "#/definitions/getCorporationsCorporationIdStructuresOKBodyItemsServicesItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsCorporationIdStructuresOKBodyItemsServicesItems": {
      "description": "service object",
      "type": "object",
      "title": "get_corporations_corporation_id_structures_service",
      "required": [
        "name",
        "state"
      ],
      "properties": {
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_corporations_corporation_id_structures_name"
        },
        "state": {
          "description": "state string",
          "type": "string",
          "title": "get_corporations_corporation_id_structures_state",
          "enum": [
            "online",
            "offline",
            "cleanup"
          ]
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsNamesInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_corporations_names_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_corporations_names_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsNamesOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_corporations_names_ok",
      "maxItems": 100,
      "items": {
        "$ref": "#/definitions/getCorporationsNamesOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsNamesOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_corporations_names_200_ok",
      "required": [
        "corporation_id",
        "corporation_name"
      ],
      "properties": {
        "corporation_id": {
          "description": "corporation_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_corporations_names_corporation_id"
        },
        "corporation_name": {
          "description": "corporation_name string",
          "type": "string",
          "title": "get_corporations_names_corporation_name"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getCorporationsNpccorpsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_corporations_npccorps_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_corporations_npccorps_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getDogmaAttributesAttributeIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_dogma_attributes_attribute_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_dogma_attributes_attribute_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getDogmaAttributesAttributeIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "get_dogma_attributes_attribute_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "get_dogma_attributes_attribute_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getDogmaAttributesAttributeIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_dogma_attributes_attribute_id_ok",
      "required": [
        "attribute_id"
      ],
      "properties": {
        "attribute_id": {
          "description": "attribute_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_dogma_attributes_attribute_id_attribute_id"
        },
        "default_value": {
          "description": "default_value number",
          "type": "number",
          "format": "float",
          "title": "get_dogma_attributes_attribute_id_default_value"
        },
        "description": {
          "description": "description string",
          "type": "string",
          "title": "get_dogma_attributes_attribute_id_description"
        },
        "display_name": {
          "description": "display_name string",
          "type": "string",
          "title": "get_dogma_attributes_attribute_id_display_name"
        },
        "high_is_good": {
          "description": "high_is_good boolean",
          "type": "boolean",
          "title": "get_dogma_attributes_attribute_id_high_is_good"
        },
        "icon_id": {
          "description": "icon_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_dogma_attributes_attribute_id_icon_id"
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_dogma_attributes_attribute_id_name"
        },
        "published": {
          "description": "published boolean",
          "type": "boolean",
          "title": "get_dogma_attributes_attribute_id_published"
        },
        "stackable": {
          "description": "stackable boolean",
          "type": "boolean",
          "title": "get_dogma_attributes_attribute_id_stackable"
        },
        "unit_id": {
          "description": "unit_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_dogma_attributes_attribute_id_unit_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getDogmaAttributesInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_dogma_attributes_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_dogma_attributes_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getDogmaEffectsEffectIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_dogma_effects_effect_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_dogma_effects_effect_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getDogmaEffectsEffectIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "get_dogma_effects_effect_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "get_dogma_effects_effect_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getDogmaEffectsEffectIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_dogma_effects_effect_id_ok",
      "required": [
        "effect_id"
      ],
      "properties": {
        "description": {
          "description": "description string",
          "type": "string",
          "title": "get_dogma_effects_effect_id_description"
        },
        "disallow_auto_repeat": {
          "description": "disallow_auto_repeat boolean",
          "type": "boolean",
          "title": "get_dogma_effects_effect_id_disallow_auto_repeat"
        },
        "discharge_attribute_id": {
          "description": "discharge_attribute_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_dogma_effects_effect_id_discharge_attribute_id"
        },
        "display_name": {
          "description": "display_name string",
          "type": "string",
          "title": "get_dogma_effects_effect_id_display_name"
        },
        "duration_attribute_id": {
          "description": "duration_attribute_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_dogma_effects_effect_id_duration_attribute_id"
        },
        "effect_category": {
          "description": "effect_category integer",
          "type": "integer",
          "format": "int32",
          "title": "get_dogma_effects_effect_id_effect_category"
        },
        "effect_id": {
          "description": "effect_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_dogma_effects_effect_id_effect_id"
        },
        "electronic_chance": {
          "description": "electronic_chance boolean",
          "type": "boolean",
          "title": "get_dogma_effects_effect_id_electronic_chance"
        },
        "falloff_attribute_id": {
          "description": "falloff_attribute_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_dogma_effects_effect_id_falloff_attribute_id"
        },
        "icon_id": {
          "description": "icon_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_dogma_effects_effect_id_icon_id"
        },
        "is_assistance": {
          "description": "is_assistance boolean",
          "type": "boolean",
          "title": "get_dogma_effects_effect_id_is_assistance"
        },
        "is_offensive": {
          "description": "is_offensive boolean",
          "type": "boolean",
          "title": "get_dogma_effects_effect_id_is_offensive"
        },
        "is_warp_safe": {
          "description": "is_warp_safe boolean",
          "type": "boolean",
          "title": "get_dogma_effects_effect_id_is_warp_safe"
        },
        "modifiers": {
          "$ref": "#/definitions/getDogmaEffectsEffectIdOKBodyModifiers"
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_dogma_effects_effect_id_name"
        },
        "post_expression": {
          "description": "post_expression integer",
          "type": "integer",
          "format": "int32",
          "title": "get_dogma_effects_effect_id_post_expression"
        },
        "pre_expression": {
          "description": "pre_expression integer",
          "type": "integer",
          "format": "int32",
          "title": "get_dogma_effects_effect_id_pre_expression"
        },
        "published": {
          "description": "published boolean",
          "type": "boolean",
          "title": "get_dogma_effects_effect_id_published"
        },
        "range_attribute_id": {
          "description": "range_attribute_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_dogma_effects_effect_id_range_attribute_id"
        },
        "range_chance": {
          "description": "range_chance boolean",
          "type": "boolean",
          "title": "get_dogma_effects_effect_id_range_chance"
        },
        "tracking_speed_attribute_id": {
          "description": "tracking_speed_attribute_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_dogma_effects_effect_id_tracking_speed_attribute_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getDogmaEffectsEffectIdOKBodyModifiers": {
      "description": "modifiers array",
      "type": "array",
      "title": "get_dogma_effects_effect_id_modifiers",
      "maxItems": 100,
      "items": {
        "$ref": "#/definitions/getDogmaEffectsEffectIdOKBodyModifiersItems"
      },
      "x-go-gen-location": "operations"
    },
    "getDogmaEffectsEffectIdOKBodyModifiersItems": {
      "description": "modifier object",
      "type": "object",
      "title": "get_dogma_effects_effect_id_modifier",
      "required": [
        "func",
        "domain",
        "modified_attribute_id",
        "modifying_attribute_id",
        "operator"
      ],
      "properties": {
        "domain": {
          "description": "domain string",
          "type": "string",
          "title": "get_dogma_effects_effect_id_domain"
        },
        "func": {
          "description": "func string",
          "type": "string",
          "title": "get_dogma_effects_effect_id_func"
        },
        "modified_attribute_id": {
          "description": "modified_attribute_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_dogma_effects_effect_id_modified_attribute_id"
        },
        "modifying_attribute_id": {
          "description": "modifying_attribute_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_dogma_effects_effect_id_modifying_attribute_id"
        },
        "operator": {
          "description": "operator integer",
          "type": "integer",
          "format": "int32",
          "title": "get_dogma_effects_effect_id_operator"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getDogmaEffectsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_dogma_effects_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_dogma_effects_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getFleetsFleetIdForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_fleets_fleet_id_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_fleets_fleet_id_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getFleetsFleetIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_fleets_fleet_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_fleets_fleet_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getFleetsFleetIdMembersForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_fleets_fleet_id_members_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_fleets_fleet_id_members_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getFleetsFleetIdMembersInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_fleets_fleet_id_members_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_fleets_fleet_id_members_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getFleetsFleetIdMembersNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "get_fleets_fleet_id_members_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "get_fleets_fleet_id_members_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getFleetsFleetIdMembersOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_fleets_fleet_id_members_ok",
      "maxItems": 256,
      "items": {
        "$ref": "#/definitions/getFleetsFleetIdMembersOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getFleetsFleetIdMembersOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_fleets_fleet_id_members_200_ok",
      "required": [
        "character_id",
        "ship_type_id",
        "wing_id",
        "squad_id",
        "role",
        "role_name",
        "join_time",
        "takes_fleet_warp",
        "solar_system_id"
      ],
      "properties": {
        "character_id": {
          "description": "character_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_fleets_fleet_id_members_character_id"
        },
        "join_time": {
          "description": "join_time string",
          "type": "string",
          "format": "date-time",
          "title": "get_fleets_fleet_id_members_join_time"
        },
        "role": {
          "description": "Member’s role in fleet",
          "type": "string",
          "title": "get_fleets_fleet_id_members_role",
          "enum": [
            "fleet_commander",
            "wing_commander",
            "squad_commander",
            "squad_member"
          ]
        },
        "role_name": {
          "description": "Localized role names",
          "type": "string",
          "title": "get_fleets_fleet_id_members_role_name"
        },
        "ship_type_id": {
          "description": "ship_type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_fleets_fleet_id_members_ship_type_id"
        },
        "solar_system_id": {
          "description": "Solar system the member is located in",
          "type": "integer",
          "format": "int32",
          "title": "get_fleets_fleet_id_members_solar_system_id"
        },
        "squad_id": {
          "description": "ID of the squad the member is in. If not applicable, will be set to -1",
          "type": "integer",
          "format": "int64",
          "title": "get_fleets_fleet_id_members_squad_id"
        },
        "station_id": {
          "description": "Station in which the member is docked in, if applicable",
          "type": "integer",
          "format": "int64",
          "title": "get_fleets_fleet_id_members_station_id"
        },
        "takes_fleet_warp": {
          "description": "Whether the member take fleet warps",
          "type": "boolean",
          "title": "get_fleets_fleet_id_members_takes_fleet_warp"
        },
        "wing_id": {
          "description": "ID of the wing the member is in. If not applicable, will be set to -1",
          "type": "integer",
          "format": "int64",
          "title": "get_fleets_fleet_id_members_wing_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getFleetsFleetIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "get_fleets_fleet_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "get_fleets_fleet_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getFleetsFleetIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_fleets_fleet_id_ok",
      "required": [
        "motd",
        "is_free_move",
        "is_registered",
        "is_voice_enabled"
      ],
      "properties": {
        "is_free_move": {
          "description": "Is free-move enabled",
          "type": "boolean",
          "title": "get_fleets_fleet_id_is_free_move"
        },
        "is_registered": {
          "description": "Does the fleet have an active fleet advertisement",
          "type": "boolean",
          "title": "get_fleets_fleet_id_is_registered"
        },
        "is_voice_enabled": {
          "description": "Is EVE Voice enabled",
          "type": "boolean",
          "title": "get_fleets_fleet_id_is_voice_enabled"
        },
        "motd": {
          "description": "Fleet MOTD in CCP flavoured HTML",
          "type": "string",
          "title": "get_fleets_fleet_id_motd"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getFleetsFleetIdWingsForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_fleets_fleet_id_wings_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_fleets_fleet_id_wings_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getFleetsFleetIdWingsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_fleets_fleet_id_wings_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_fleets_fleet_id_wings_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getFleetsFleetIdWingsNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "get_fleets_fleet_id_wings_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "get_fleets_fleet_id_wings_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getFleetsFleetIdWingsOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_fleets_fleet_id_wings_ok",
      "maxItems": 25,
      "items": {
        "$ref": "#/definitions/getFleetsFleetIdWingsOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getFleetsFleetIdWingsOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_fleets_fleet_id_wings_200_ok",
      "required": [
        "name",
        "id",
        "squads"
      ],
      "properties": {
        "id": {
          "description": "id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_fleets_fleet_id_wings_id"
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_fleets_fleet_id_wings_name"
        },
        "squads": {
          "$ref": "#/definitions/getFleetsFleetIdWingsOKBodyItemsSquads"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getFleetsFleetIdWingsOKBodyItemsSquads": {
      "description": "squads array",
      "type": "array",
      "title": "get_fleets_fleet_id_wings_squads",
      "maxItems": 25,
      "items": {
        "$ref": "#/definitions/getFleetsFleetIdWingsOKBodyItemsSquadsItems"
      },
      "x-go-gen-location": "operations"
    },
    "getFleetsFleetIdWingsOKBodyItemsSquadsItems": {
      "description": "squad object",
      "type": "object",
      "title": "get_fleets_fleet_id_wings_squad",
      "required": [
        "name",
        "id"
      ],
      "properties": {
        "id": {
          "description": "id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_fleets_fleet_id_wings_id"
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_fleets_fleet_id_wings_name"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getIncursionsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_incursions_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_incursions_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getIncursionsOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_incursions_ok",
      "maxItems": 100,
      "items": {
        "$ref": "#/definitions/getIncursionsOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getIncursionsOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_incursions_200_ok",
      "required": [
        "type",
        "state",
        "influence",
        "has_boss",
        "faction_id",
        "constellation_id",
        "staging_solar_system_id",
        "infested_solar_systems"
      ],
      "properties": {
        "constellation_id": {
          "description": "The constellation id in which this incursion takes place",
          "type": "integer",
          "format": "int32",
          "title": "get_incursions_constellation_id"
        },
        "faction_id": {
          "description": "The attacking faction's id",
          "type": "integer",
          "format": "int32",
          "title": "get_incursions_faction_id"
        },
        "has_boss": {
          "description": "Whether the final encounter has boss or not",
          "type": "boolean",
          "title": "get_incursions_has_boss"
        },
        "infested_solar_systems": {
          "description": "A list of infested solar system ids that are a part of this incursion",
          "type": "array",
          "title": "get_incursions_infested_solar_systems",
          "maxItems": 100,
          "items": {
            "description": "infested_solar_system integer",
            "type": "integer",
            "format": "int32",
            "title": "get_incursions_infested_solar_system"
          }
        },
        "influence": {
          "description": "Influence of this incursion as a float from 0 to 1",
          "type": "number",
          "format": "float",
          "title": "get_incursions_influence"
        },
        "staging_solar_system_id": {
          "description": "Staging solar system for this incursion",
          "type": "integer",
          "format": "int32",
          "title": "get_incursions_staging_solar_system_id"
        },
        "state": {
          "description": "The state of this incursion",
          "type": "string",
          "title": "get_incursions_state",
          "enum": [
            "withdrawing",
            "mobilizing",
            "established"
          ]
        },
        "type": {
          "description": "The type of this incursion",
          "type": "string",
          "title": "get_incursions_type"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getIndustryFacilitiesInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_industry_facilities_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_industry_facilities_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getIndustryFacilitiesOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_industry_facilities_ok",
      "maxItems": 10000,
      "items": {
        "$ref": "#/definitions/getIndustryFacilitiesOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getIndustryFacilitiesOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_industry_facilities_200_ok",
      "required": [
        "facility_id",
        "owner_id",
        "type_id",
        "solar_system_id",
        "region_id"
      ],
      "properties": {
        "facility_id": {
          "description": "ID of the facility",
          "type": "integer",
          "format": "int64",
          "title": "get_industry_facilities_facility_id"
        },
        "owner_id": {
          "description": "Owner of the facility",
          "type": "integer",
          "format": "int32",
          "title": "get_industry_facilities_owner_id"
        },
        "region_id": {
          "description": "Region ID where the facility is",
          "type": "integer",
          "format": "int32",
          "title": "get_industry_facilities_region_id"
        },
        "solar_system_id": {
          "description": "Solar system ID where the facility is",
          "type": "integer",
          "format": "int32",
          "title": "get_industry_facilities_solar_system_id"
        },
        "tax": {
          "description": "Tax imposed by the facility",
          "type": "number",
          "format": "float",
          "title": "get_industry_facilities_tax"
        },
        "type_id": {
          "description": "Type ID of the facility",
          "type": "integer",
          "format": "int32",
          "title": "get_industry_facilities_type_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getIndustrySystemsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_industry_systems_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_industry_systems_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getIndustrySystemsOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_industry_systems_ok",
      "maxItems": 10000,
      "items": {
        "$ref": "#/definitions/getIndustrySystemsOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getIndustrySystemsOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_industry_systems_200_ok",
      "required": [
        "solar_system_id",
        "cost_indices"
      ],
      "properties": {
        "cost_indices": {
          "$ref": "#/definitions/getIndustrySystemsOKBodyItemsCostIndices"
        },
        "solar_system_id": {
          "description": "solar_system_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_industry_systems_solar_system_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getIndustrySystemsOKBodyItemsCostIndices": {
      "description": "cost_indices array",
      "type": "array",
      "title": "get_industry_systems_cost_indices",
      "maxItems": 10,
      "items": {
        "$ref": "#/definitions/getIndustrySystemsOKBodyItemsCostIndicesItems"
      },
      "x-go-gen-location": "operations"
    },
    "getIndustrySystemsOKBodyItemsCostIndicesItems": {
      "description": "cost_indice object",
      "type": "object",
      "title": "get_industry_systems_cost_indice",
      "required": [
        "activity",
        "cost_index"
      ],
      "properties": {
        "activity": {
          "description": "activity string",
          "type": "string",
          "title": "get_industry_systems_activity",
          "enum": [
            "none",
            "manufacturing",
            "researching_technology",
            "researching_time_efficiency",
            "researching_material_efficiency",
            "copying",
            "duplicating",
            "invention",
            "reverse_engineering"
          ]
        },
        "cost_index": {
          "description": "cost_index number",
          "type": "number",
          "format": "float",
          "title": "get_industry_systems_cost_index"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getInsurancePricesInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_insurance_prices_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_insurance_prices_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getInsurancePricesOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_insurance_prices_ok",
      "maxItems": 1000,
      "items": {
        "$ref": "#/definitions/getInsurancePricesOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getInsurancePricesOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_insurance_prices_200_ok",
      "required": [
        "type_id",
        "levels"
      ],
      "properties": {
        "levels": {
          "$ref": "#/definitions/getInsurancePricesOKBodyItemsLevels"
        },
        "type_id": {
          "description": "type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_insurance_prices_type_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getInsurancePricesOKBodyItemsLevels": {
      "description": "A list of a available insurance levels for this ship type",
      "type": "array",
      "title": "get_insurance_prices_levels",
      "maxItems": 6,
      "items": {
        "$ref": "#/definitions/getInsurancePricesOKBodyItemsLevelsItems"
      },
      "x-go-gen-location": "operations"
    },
    "getInsurancePricesOKBodyItemsLevelsItems": {
      "description": "level object",
      "type": "object",
      "title": "get_insurance_prices_level",
      "required": [
        "cost",
        "payout",
        "name"
      ],
      "properties": {
        "cost": {
          "description": "cost number",
          "type": "number",
          "format": "float",
          "title": "get_insurance_prices_cost"
        },
        "name": {
          "description": "Localized insurance level",
          "type": "string",
          "title": "get_insurance_prices_name"
        },
        "payout": {
          "description": "payout number",
          "type": "number",
          "format": "float",
          "title": "get_insurance_prices_payout"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getKillmailsKillmailIdKillmailHashInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_killmails_killmail_id_killmail_hash_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_killmails_killmail_id_killmail_hash_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getKillmailsKillmailIdKillmailHashOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_killmails_killmail_id_killmail_hash_ok",
      "required": [
        "killmail_id",
        "killmail_time",
        "victim",
        "attackers",
        "solar_system_id"
      ],
      "properties": {
        "attackers": {
          "$ref": "#/definitions/getKillmailsKillmailIdKillmailHashOKBodyAttackers"
        },
        "killmail_id": {
          "description": "ID of the killmail",
          "type": "integer",
          "format": "int32",
          "title": "get_killmails_killmail_id_killmail_hash_killmail_id"
        },
        "killmail_time": {
          "description": "Time that the victim was killed and the killmail generated\n",
          "type": "string",
          "format": "date-time",
          "title": "get_killmails_killmail_id_killmail_hash_killmail_time"
        },
        "moon_id": {
          "description": "Moon if the kill took place at one",
          "type": "integer",
          "format": "int32",
          "title": "get_killmails_killmail_id_killmail_hash_moon_id"
        },
        "solar_system_id": {
          "description": "Solar system that the kill took place in\n",
          "type": "integer",
          "format": "int32",
          "title": "get_killmails_killmail_id_killmail_hash_solar_system_id"
        },
        "victim": {
          "$ref": "#/definitions/getKillmailsKillmailIdKillmailHashOKBodyVictim"
        },
        "war_id": {
          "description": "War if the killmail is generated in relation to an official war\n",
          "type": "integer",
          "format": "int32",
          "title": "get_killmails_killmail_id_killmail_hash_war_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getKillmailsKillmailIdKillmailHashOKBodyAttackers": {
      "description": "attackers array",
      "type": "array",
      "title": "get_killmails_killmail_id_killmail_hash_attackers",
      "maxItems": 10000,
      "items": {
        "$ref": "#/definitions/getKillmailsKillmailIdKillmailHashOKBodyAttackersItems"
      },
      "x-go-gen-location": "operations"
    },
    "getKillmailsKillmailIdKillmailHashOKBodyAttackersItems": {
      "description": "attacker object",
      "type": "object",
      "title": "get_killmails_killmail_id_killmail_hash_attacker",
      "required": [
        "security_status",
        "final_blow",
        "damage_done"
      ],
      "properties": {
        "alliance_id": {
          "description": "alliance_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_killmails_killmail_id_killmail_hash_alliance_id"
        },
        "character_id": {
          "description": "character_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_killmails_killmail_id_killmail_hash_character_id"
        },
        "corporation_id": {
          "description": "corporation_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_killmails_killmail_id_killmail_hash_corporation_id"
        },
        "damage_done": {
          "description": "damage_done integer",
          "type": "integer",
          "format": "int32",
          "title": "get_killmails_killmail_id_killmail_hash_damage_done"
        },
        "faction_id": {
          "description": "faction_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_killmails_killmail_id_killmail_hash_faction_id"
        },
        "final_blow": {
          "description": "Was the attacker the one to achieve the final blow\n",
          "type": "boolean",
          "title": "get_killmails_killmail_id_killmail_hash_final_blow"
        },
        "security_status": {
          "description": "Security status for the attacker\n",
          "type": "number",
          "format": "float",
          "title": "get_killmails_killmail_id_killmail_hash_security_status"
        },
        "ship_type_id": {
          "description": "What ship was the attacker flying\n",
          "type": "integer",
          "format": "int32",
          "title": "get_killmails_killmail_id_killmail_hash_ship_type_id"
        },
        "weapon_type_id": {
          "description": "What weapon was used by the attacker for the kill\n",
          "type": "integer",
          "format": "int32",
          "title": "get_killmails_killmail_id_killmail_hash_weapon_type_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getKillmailsKillmailIdKillmailHashOKBodyVictim": {
      "description": "victim object",
      "type": "object",
      "title": "get_killmails_killmail_id_killmail_hash_victim",
      "required": [
        "damage_taken",
        "ship_type_id"
      ],
      "properties": {
        "alliance_id": {
          "description": "alliance_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_killmails_killmail_id_killmail_hash_alliance_id"
        },
        "character_id": {
          "description": "character_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_killmails_killmail_id_killmail_hash_character_id"
        },
        "corporation_id": {
          "description": "corporation_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_killmails_killmail_id_killmail_hash_corporation_id"
        },
        "damage_taken": {
          "description": "How much total damage was taken by the victim\n",
          "type": "integer",
          "format": "int32",
          "title": "get_killmails_killmail_id_killmail_hash_damage_taken"
        },
        "faction_id": {
          "description": "faction_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_killmails_killmail_id_killmail_hash_faction_id"
        },
        "items": {
          "$ref": "#/definitions/getKillmailsKillmailIdKillmailHashOKBodyVictimItems"
        },
        "position": {
          "$ref": "#/definitions/getKillmailsKillmailIdKillmailHashOKBodyVictimPosition"
        },
        "ship_type_id": {
          "description": "The ship that the victim was piloting and was destroyed\n",
          "type": "integer",
          "format": "int32",
          "title": "get_killmails_killmail_id_killmail_hash_ship_type_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getKillmailsKillmailIdKillmailHashOKBodyVictimItems": {
      "description": "items array",
      "type": "array",
      "title": "get_killmails_killmail_id_killmail_hash_items",
      "maxItems": 10000,
      "items": {
        "$ref": "#/definitions/getKillmailsKillmailIdKillmailHashOKBodyVictimItemsItems"
      },
      "x-go-gen-location": "operations"
    },
    "getKillmailsKillmailIdKillmailHashOKBodyVictimItemsItems": {
      "description": "item object",
      "type": "object",
      "title": "get_killmails_killmail_id_killmail_hash_item",
      "required": [
        "item_type_id",
        "singleton",
        "flag"
      ],
      "properties": {
        "flag": {
          "description": "Flag for the location of the item\n",
          "type": "integer",
          "format": "int32",
          "title": "get_killmails_killmail_id_killmail_hash_flag"
        },
        "item_type_id": {
          "description": "item_type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_killmails_killmail_id_killmail_hash_item_type_id"
        },
        "items": {
          "$ref": "#/definitions/getKillmailsKillmailIdKillmailHashOKBodyVictimItemsItemsItems"
        },
        "quantity_destroyed": {
          "description": "How many of the item were destroyed if any\n",
          "type": "integer",
          "format": "int64",
          "title": "get_killmails_killmail_id_killmail_hash_quantity_destroyed"
        },
        "quantity_dropped": {
          "description": "How many of the item were dropped if any\n",
          "type": "integer",
          "format": "int64",
          "title": "get_killmails_killmail_id_killmail_hash_quantity_dropped"
        },
        "singleton": {
          "description": "singleton integer",
          "type": "integer",
          "format": "int32",
          "title": "get_killmails_killmail_id_killmail_hash_singleton"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getKillmailsKillmailIdKillmailHashOKBodyVictimItemsItemsItems": {
      "description": "items array",
      "type": "array",
      "title": "get_killmails_killmail_id_killmail_hash_items",
      "maxItems": 10000,
      "items": {
        "$ref": "#/definitions/getKillmailsKillmailIdKillmailHashOKBodyVictimItemsItemsItemsItems"
      },
      "x-go-gen-location": "operations"
    },
    "getKillmailsKillmailIdKillmailHashOKBodyVictimItemsItemsItemsItems": {
      "description": "item object",
      "type": "object",
      "title": "get_killmails_killmail_id_killmail_hash_item",
      "required": [
        "item_type_id",
        "singleton",
        "flag"
      ],
      "properties": {
        "flag": {
          "description": "flag integer",
          "type": "integer",
          "format": "int32",
          "title": "get_killmails_killmail_id_killmail_hash_flag"
        },
        "item_type_id": {
          "description": "item_type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_killmails_killmail_id_killmail_hash_item_type_id"
        },
        "quantity_destroyed": {
          "description": "quantity_destroyed integer",
          "type": "integer",
          "format": "int64",
          "title": "get_killmails_killmail_id_killmail_hash_quantity_destroyed"
        },
        "quantity_dropped": {
          "description": "quantity_dropped integer",
          "type": "integer",
          "format": "int64",
          "title": "get_killmails_killmail_id_killmail_hash_quantity_dropped"
        },
        "singleton": {
          "description": "singleton integer",
          "type": "integer",
          "format": "int32",
          "title": "get_killmails_killmail_id_killmail_hash_singleton"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getKillmailsKillmailIdKillmailHashOKBodyVictimPosition": {
      "description": "Coordinates of the victim in Cartesian space relative to the Sun\n",
      "type": "object",
      "title": "get_killmails_killmail_id_killmail_hash_position",
      "required": [
        "x",
        "y",
        "z"
      ],
      "properties": {
        "x": {
          "description": "x number",
          "type": "number",
          "format": "float",
          "title": "get_killmails_killmail_id_killmail_hash_x"
        },
        "y": {
          "description": "y number",
          "type": "number",
          "format": "float",
          "title": "get_killmails_killmail_id_killmail_hash_y"
        },
        "z": {
          "description": "z number",
          "type": "number",
          "format": "float",
          "title": "get_killmails_killmail_id_killmail_hash_z"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getKillmailsKillmailIdKillmailHashUnprocessableEntityBody": {
      "description": "Unprocessable entity",
      "type": "object",
      "title": "get_killmails_killmail_id_killmail_hash_unprocessable_entity",
      "properties": {
        "error": {
          "description": "Unprocessable entity message",
          "type": "string",
          "title": "get_killmails_killmail_id_killmail_hash_422_unprocessable_entity"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getLoyaltyStoresCorporationIdOffersInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_loyalty_stores_corporation_id_offers_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_loyalty_stores_corporation_id_offers_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getLoyaltyStoresCorporationIdOffersOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_loyalty_stores_corporation_id_offers_ok",
      "maxItems": 10000,
      "items": {
        "$ref": "#/definitions/getLoyaltyStoresCorporationIdOffersOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getLoyaltyStoresCorporationIdOffersOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_loyalty_stores_corporation_id_offers_200_ok",
      "required": [
        "offer_id",
        "type_id",
        "quantity",
        "lp_cost",
        "isk_cost",
        "required_items"
      ],
      "properties": {
        "isk_cost": {
          "description": "isk_cost number",
          "type": "number",
          "format": "int32",
          "title": "get_loyalty_stores_corporation_id_offers_isk_cost"
        },
        "lp_cost": {
          "description": "lp_cost integer",
          "type": "integer",
          "format": "int32",
          "title": "get_loyalty_stores_corporation_id_offers_lp_cost"
        },
        "offer_id": {
          "description": "offer_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_loyalty_stores_corporation_id_offers_offer_id"
        },
        "quantity": {
          "description": "quantity integer",
          "type": "integer",
          "format": "int32",
          "title": "get_loyalty_stores_corporation_id_offers_quantity"
        },
        "required_items": {
          "$ref": "#/definitions/getLoyaltyStoresCorporationIdOffersOKBodyItemsRequiredItems"
        },
        "type_id": {
          "description": "type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_loyalty_stores_corporation_id_offers_type_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getLoyaltyStoresCorporationIdOffersOKBodyItemsRequiredItems": {
      "description": "required_items array",
      "type": "array",
      "title": "get_loyalty_stores_corporation_id_offers_required_items",
      "maxItems": 100,
      "items": {
        "$ref": "#/definitions/getLoyaltyStoresCorporationIdOffersOKBodyItemsRequiredItemsItems"
      },
      "x-go-gen-location": "operations"
    },
    "getLoyaltyStoresCorporationIdOffersOKBodyItemsRequiredItemsItems": {
      "description": "required_item object",
      "type": "object",
      "title": "get_loyalty_stores_corporation_id_offers_required_item",
      "required": [
        "type_id",
        "quantity"
      ],
      "properties": {
        "quantity": {
          "description": "quantity integer",
          "type": "integer",
          "format": "int32",
          "title": "get_loyalty_stores_corporation_id_offers_quantity"
        },
        "type_id": {
          "description": "type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_loyalty_stores_corporation_id_offers_type_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getMarketsGroupsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_markets_groups_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_markets_groups_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getMarketsGroupsMarketGroupIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_markets_groups_market_group_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_markets_groups_market_group_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getMarketsGroupsMarketGroupIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "get_markets_groups_market_group_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "get_markets_groups_market_group_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getMarketsGroupsMarketGroupIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_markets_groups_market_group_id_ok",
      "required": [
        "market_group_id",
        "name",
        "description",
        "types"
      ],
      "properties": {
        "description": {
          "description": "description string",
          "type": "string",
          "title": "get_markets_groups_market_group_id_description"
        },
        "market_group_id": {
          "description": "market_group_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_markets_groups_market_group_id_market_group_id"
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_markets_groups_market_group_id_name"
        },
        "parent_group_id": {
          "description": "parent_group_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_markets_groups_market_group_id_parent_group_id"
        },
        "types": {
          "description": "types array",
          "type": "array",
          "title": "get_markets_groups_market_group_id_types",
          "maxItems": 5000,
          "items": {
            "description": "type integer",
            "type": "integer",
            "format": "int32",
            "title": "get_markets_groups_market_group_id_type"
          }
        }
      },
      "x-go-gen-location": "operations"
    },
    "getMarketsPricesInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_markets_prices_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_markets_prices_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getMarketsPricesOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_markets_prices_ok",
      "maxItems": 20000,
      "items": {
        "$ref": "#/definitions/getMarketsPricesOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getMarketsPricesOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_markets_prices_200_ok",
      "required": [
        "type_id"
      ],
      "properties": {
        "adjusted_price": {
          "description": "adjusted_price number",
          "type": "number",
          "format": "float",
          "title": "get_markets_prices_adjusted_price"
        },
        "average_price": {
          "description": "average_price number",
          "type": "number",
          "format": "float",
          "title": "get_markets_prices_average_price"
        },
        "type_id": {
          "description": "type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_markets_prices_type_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getMarketsRegionIdHistoryInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_markets_region_id_history_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_markets_region_id_history_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getMarketsRegionIdHistoryOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_markets_region_id_history_ok",
      "maxItems": 500,
      "items": {
        "$ref": "#/definitions/getMarketsRegionIdHistoryOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getMarketsRegionIdHistoryOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_markets_region_id_history_200_ok",
      "required": [
        "date",
        "order_count",
        "volume",
        "highest",
        "average",
        "lowest"
      ],
      "properties": {
        "average": {
          "description": "average number",
          "type": "number",
          "format": "float",
          "title": "get_markets_region_id_history_average"
        },
        "date": {
          "description": "The date of this historical statistic entry",
          "type": "string",
          "format": "date",
          "title": "get_markets_region_id_history_date"
        },
        "highest": {
          "description": "highest number",
          "type": "number",
          "format": "float",
          "title": "get_markets_region_id_history_highest"
        },
        "lowest": {
          "description": "lowest number",
          "type": "number",
          "format": "float",
          "title": "get_markets_region_id_history_lowest"
        },
        "order_count": {
          "description": "Total number of orders happened that day",
          "type": "integer",
          "format": "int64",
          "title": "get_markets_region_id_history_order_count"
        },
        "volume": {
          "description": "Total",
          "type": "integer",
          "format": "int64",
          "title": "get_markets_region_id_history_volume"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getMarketsRegionIdHistoryUnprocessableEntityBody": {
      "description": "Unprocessable entity",
      "type": "object",
      "title": "get_markets_region_id_history_unprocessable_entity",
      "properties": {
        "error": {
          "description": "Unprocessable entity message",
          "type": "string",
          "title": "get_markets_region_id_history_422_unprocessable_entity"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getMarketsRegionIdOrdersInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_markets_region_id_orders_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_markets_region_id_orders_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getMarketsRegionIdOrdersOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_markets_region_id_orders_ok",
      "maxItems": 10000,
      "items": {
        "$ref": "#/definitions/getMarketsRegionIdOrdersOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getMarketsRegionIdOrdersOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_markets_region_id_orders_200_ok",
      "required": [
        "order_id",
        "type_id",
        "location_id",
        "volume_total",
        "volume_remain",
        "min_volume",
        "price",
        "is_buy_order",
        "duration",
        "issued",
        "range"
      ],
      "properties": {
        "duration": {
          "description": "duration integer",
          "type": "integer",
          "format": "int32",
          "title": "get_markets_region_id_orders_duration"
        },
        "is_buy_order": {
          "description": "is_buy_order boolean",
          "type": "boolean",
          "title": "get_markets_region_id_orders_is_buy_order"
        },
        "issued": {
          "description": "issued string",
          "type": "string",
          "format": "date-time",
          "title": "get_markets_region_id_orders_issued"
        },
        "location_id": {
          "description": "location_id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_markets_region_id_orders_location_id"
        },
        "min_volume": {
          "description": "min_volume integer",
          "type": "integer",
          "format": "int32",
          "title": "get_markets_region_id_orders_min_volume"
        },
        "order_id": {
          "description": "order_id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_markets_region_id_orders_order_id"
        },
        "price": {
          "description": "price number",
          "type": "number",
          "format": "float",
          "title": "get_markets_region_id_orders_price"
        },
        "range": {
          "description": "range string",
          "type": "string",
          "title": "get_markets_region_id_orders_range",
          "enum": [
            "station",
            "region",
            "solarsystem",
            "1",
            "2",
            "3",
            "4",
            "5",
            "10",
            "20",
            "30",
            "40"
          ]
        },
        "type_id": {
          "description": "type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_markets_region_id_orders_type_id"
        },
        "volume_remain": {
          "description": "volume_remain integer",
          "type": "integer",
          "format": "int32",
          "title": "get_markets_region_id_orders_volume_remain"
        },
        "volume_total": {
          "description": "volume_total integer",
          "type": "integer",
          "format": "int32",
          "title": "get_markets_region_id_orders_volume_total"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getMarketsRegionIdOrdersUnprocessableEntityBody": {
      "description": "Unprocessable entity",
      "type": "object",
      "title": "get_markets_region_id_orders_unprocessable_entity",
      "properties": {
        "error": {
          "description": "Unprocessable entity message",
          "type": "string",
          "title": "get_markets_region_id_orders_422_unprocessable_entity"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getMarketsStructuresStructureIdForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_markets_structures_structure_id_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_markets_structures_structure_id_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getMarketsStructuresStructureIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_markets_structures_structure_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_markets_structures_structure_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getMarketsStructuresStructureIdOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_markets_structures_structure_id_ok",
      "maxItems": 5000,
      "items": {
        "$ref": "#/definitions/getMarketsStructuresStructureIdOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getMarketsStructuresStructureIdOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_markets_structures_structure_id_200_ok",
      "required": [
        "order_id",
        "type_id",
        "location_id",
        "volume_total",
        "volume_remain",
        "min_volume",
        "price",
        "is_buy_order",
        "duration",
        "issued",
        "range"
      ],
      "properties": {
        "duration": {
          "description": "duration integer",
          "type": "integer",
          "format": "int32",
          "title": "get_markets_structures_structure_id_duration"
        },
        "is_buy_order": {
          "description": "is_buy_order boolean",
          "type": "boolean",
          "title": "get_markets_structures_structure_id_is_buy_order"
        },
        "issued": {
          "description": "issued string",
          "type": "string",
          "format": "date-time",
          "title": "get_markets_structures_structure_id_issued"
        },
        "location_id": {
          "description": "location_id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_markets_structures_structure_id_location_id"
        },
        "min_volume": {
          "description": "min_volume integer",
          "type": "integer",
          "format": "int32",
          "title": "get_markets_structures_structure_id_min_volume"
        },
        "order_id": {
          "description": "order_id integer",
          "type": "integer",
          "format": "int64",
          "title": "get_markets_structures_structure_id_order_id"
        },
        "price": {
          "description": "price number",
          "type": "number",
          "format": "float",
          "title": "get_markets_structures_structure_id_price"
        },
        "range": {
          "description": "range string",
          "type": "string",
          "title": "get_markets_structures_structure_id_range",
          "enum": [
            "station",
            "region",
            "solarsystem",
            "1",
            "2",
            "3",
            "4",
            "5",
            "10",
            "20",
            "30",
            "40"
          ]
        },
        "type_id": {
          "description": "type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_markets_structures_structure_id_type_id"
        },
        "volume_remain": {
          "description": "volume_remain integer",
          "type": "integer",
          "format": "int32",
          "title": "get_markets_structures_structure_id_volume_remain"
        },
        "volume_total": {
          "description": "volume_total integer",
          "type": "integer",
          "format": "int32",
          "title": "get_markets_structures_structure_id_volume_total"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getOpportunitiesGroupsGroupIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_opportunities_groups_group_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_opportunities_groups_group_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getOpportunitiesGroupsGroupIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_opportunities_groups_group_id_ok",
      "required": [
        "group_id",
        "name",
        "description",
        "notification",
        "required_tasks",
        "connected_groups"
      ],
      "properties": {
        "connected_groups": {
          "description": "The groups that are connected to this group on the opportunities map",
          "type": "array",
          "title": "get_opportunities_groups_group_id_connected_groups",
          "maxItems": 50,
          "items": {
            "description": "connected_group integer",
            "type": "integer",
            "format": "int32",
            "title": "get_opportunities_groups_group_id_connected_group"
          }
        },
        "description": {
          "description": "description string",
          "type": "string",
          "title": "get_opportunities_groups_group_id_description"
        },
        "group_id": {
          "description": "group_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_opportunities_groups_group_id_group_id"
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_opportunities_groups_group_id_name"
        },
        "notification": {
          "description": "notification string",
          "type": "string",
          "title": "get_opportunities_groups_group_id_notification"
        },
        "required_tasks": {
          "description": "Tasks need to complete for this group",
          "type": "array",
          "title": "get_opportunities_groups_group_id_required_tasks",
          "maxItems": 100,
          "items": {
            "description": "required_task integer",
            "type": "integer",
            "format": "int32",
            "title": "get_opportunities_groups_group_id_required_task"
          }
        }
      },
      "x-go-gen-location": "operations"
    },
    "getOpportunitiesGroupsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_opportunities_groups_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_opportunities_groups_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getOpportunitiesTasksInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_opportunities_tasks_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_opportunities_tasks_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getOpportunitiesTasksTaskIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_opportunities_tasks_task_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_opportunities_tasks_task_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getOpportunitiesTasksTaskIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_opportunities_tasks_task_id_ok",
      "required": [
        "task_id",
        "name",
        "description",
        "notification"
      ],
      "properties": {
        "description": {
          "description": "description string",
          "type": "string",
          "title": "get_opportunities_tasks_task_id_description"
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_opportunities_tasks_task_id_name"
        },
        "notification": {
          "description": "notification string",
          "type": "string",
          "title": "get_opportunities_tasks_task_id_notification"
        },
        "task_id": {
          "description": "task_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_opportunities_tasks_task_id_task_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getRouteOriginDestinationInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_route_origin_destination_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_route_origin_destination_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getRouteOriginDestinationNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "get_route_origin_destination_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "get_route_origin_destination_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getSearchInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_search_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_search_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getSearchOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_search_ok",
      "properties": {
        "agent": {
          "description": "agent array",
          "type": "array",
          "title": "get_search_agent",
          "maxItems": 500,
          "items": {
            "description": "agent integer",
            "type": "integer",
            "format": "int32",
            "title": "get_search_agent"
          }
        },
        "alliance": {
          "description": "alliance array",
          "type": "array",
          "title": "get_search_alliance",
          "maxItems": 500,
          "items": {
            "description": "alliance integer",
            "type": "integer",
            "format": "int32",
            "title": "get_search_alliance"
          }
        },
        "character": {
          "description": "character array",
          "type": "array",
          "title": "get_search_character",
          "maxItems": 500,
          "items": {
            "description": "character integer",
            "type": "integer",
            "format": "int32",
            "title": "get_search_character"
          }
        },
        "constellation": {
          "description": "constellation array",
          "type": "array",
          "title": "get_search_constellation",
          "maxItems": 500,
          "items": {
            "description": "constellation integer",
            "type": "integer",
            "format": "int32",
            "title": "get_search_constellation"
          }
        },
        "corporation": {
          "description": "corporation array",
          "type": "array",
          "title": "get_search_corporation",
          "maxItems": 500,
          "items": {
            "description": "corporation integer",
            "type": "integer",
            "format": "int32",
            "title": "get_search_corporation"
          }
        },
        "faction": {
          "description": "faction array",
          "type": "array",
          "title": "get_search_faction",
          "maxItems": 500,
          "items": {
            "description": "faction integer",
            "type": "integer",
            "format": "int32",
            "title": "get_search_faction"
          }
        },
        "inventorytype": {
          "description": "inventorytype array",
          "type": "array",
          "title": "get_search_inventorytype",
          "maxItems": 500,
          "items": {
            "description": "inventorytype integer",
            "type": "integer",
            "format": "int32",
            "title": "get_search_inventorytype"
          }
        },
        "region": {
          "description": "region array",
          "type": "array",
          "title": "get_search_region",
          "maxItems": 500,
          "items": {
            "description": "region integer",
            "type": "integer",
            "format": "int32",
            "title": "get_search_region"
          }
        },
        "solarsystem": {
          "description": "solarsystem array",
          "type": "array",
          "title": "get_search_solarsystem",
          "maxItems": 500,
          "items": {
            "description": "solarsystem integer",
            "type": "integer",
            "format": "int32",
            "title": "get_search_solarsystem"
          }
        },
        "station": {
          "description": "station array",
          "type": "array",
          "title": "get_search_station",
          "maxItems": 500,
          "items": {
            "description": "station integer",
            "type": "integer",
            "format": "int32",
            "title": "get_search_station"
          }
        },
        "wormhole": {
          "description": "wormhole array",
          "type": "array",
          "title": "get_search_wormhole",
          "maxItems": 500,
          "items": {
            "description": "wormhole integer",
            "type": "integer",
            "format": "int32",
            "title": "get_search_wormhole"
          }
        }
      },
      "x-go-gen-location": "operations"
    },
    "getSovereigntyCampaignsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_sovereignty_campaigns_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_sovereignty_campaigns_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getSovereigntyCampaignsOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_sovereignty_campaigns_ok",
      "maxItems": 10000,
      "items": {
        "$ref": "#/definitions/getSovereigntyCampaignsOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getSovereigntyCampaignsOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_sovereignty_campaigns_200_ok",
      "required": [
        "campaign_id",
        "structure_id",
        "solar_system_id",
        "constellation_id",
        "event_type",
        "start_time"
      ],
      "properties": {
        "attackers_score": {
          "description": "Score for all attacking parties, only present in Defense Events.\n",
          "type": "number",
          "format": "float",
          "title": "get_sovereignty_campaigns_attackers_score"
        },
        "campaign_id": {
          "description": "Unique ID for this campaign.",
          "type": "integer",
          "format": "int32",
          "title": "get_sovereignty_campaigns_campaign_id"
        },
        "constellation_id": {
          "description": "The constellation in which the campaign will take place.\n",
          "type": "integer",
          "format": "int32",
          "title": "get_sovereignty_campaigns_constellation_id"
        },
        "defender_id": {
          "description": "Defending alliance, only present in Defense Events\n",
          "type": "integer",
          "format": "int32",
          "title": "get_sovereignty_campaigns_defender_id"
        },
        "defender_score": {
          "description": "Score for the defending alliance, only present in Defense Events.\n",
          "type": "number",
          "format": "float",
          "title": "get_sovereignty_campaigns_defender_score"
        },
        "event_type": {
          "description": "Type of event this campaign is for. tcu_defense, ihub_defense and station_defense are referred to as \"Defense Events\", station_freeport as \"Freeport Events\".\n",
          "type": "string",
          "title": "get_sovereignty_campaigns_event_type",
          "enum": [
            "tcu_defense",
            "ihub_defense",
            "station_defense",
            "station_freeport"
          ]
        },
        "participants": {
          "$ref": "#/definitions/getSovereigntyCampaignsOKBodyItemsParticipants"
        },
        "solar_system_id": {
          "description": "The solar system the structure is located in.\n",
          "type": "integer",
          "format": "int32",
          "title": "get_sovereignty_campaigns_solar_system_id"
        },
        "start_time": {
          "description": "Time the event is scheduled to start.\n",
          "type": "string",
          "format": "date-time",
          "title": "get_sovereignty_campaigns_start_time"
        },
        "structure_id": {
          "description": "The structure item ID that is related to this campaign.\n",
          "type": "integer",
          "format": "int64",
          "title": "get_sovereignty_campaigns_structure_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getSovereigntyCampaignsOKBodyItemsParticipants": {
      "description": "Alliance participating and their respective scores, only present in Freeport Events.\n",
      "type": "array",
      "title": "get_sovereignty_campaigns_participants",
      "maxItems": 5000,
      "items": {
        "$ref": "#/definitions/getSovereigntyCampaignsOKBodyItemsParticipantsItems"
      },
      "x-go-gen-location": "operations"
    },
    "getSovereigntyCampaignsOKBodyItemsParticipantsItems": {
      "description": "participant object",
      "type": "object",
      "title": "get_sovereignty_campaigns_participant",
      "required": [
        "alliance_id",
        "score"
      ],
      "properties": {
        "alliance_id": {
          "description": "alliance_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_sovereignty_campaigns_alliance_id"
        },
        "score": {
          "description": "score number",
          "type": "number",
          "format": "float",
          "title": "get_sovereignty_campaigns_score"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getSovereigntyMapInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_sovereignty_map_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_sovereignty_map_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getSovereigntyMapOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_sovereignty_map_ok",
      "maxItems": 10000,
      "items": {
        "$ref": "#/definitions/getSovereigntyMapOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getSovereigntyMapOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_sovereignty_map_200_ok",
      "required": [
        "system_id"
      ],
      "properties": {
        "alliance_id": {
          "description": "alliance_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_sovereignty_map_alliance_id"
        },
        "corporation_id": {
          "description": "corporation_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_sovereignty_map_corporation_id"
        },
        "faction_id": {
          "description": "faction_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_sovereignty_map_faction_id"
        },
        "system_id": {
          "description": "system_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_sovereignty_map_system_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getSovereigntyStructuresInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_sovereignty_structures_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_sovereignty_structures_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getSovereigntyStructuresOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_sovereignty_structures_ok",
      "maxItems": 10000,
      "items": {
        "$ref": "#/definitions/getSovereigntyStructuresOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getSovereigntyStructuresOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_sovereignty_structures_200_ok",
      "required": [
        "alliance_id",
        "solar_system_id",
        "structure_id",
        "structure_type_id"
      ],
      "properties": {
        "alliance_id": {
          "description": "The alliance that owns the structure.\n",
          "type": "integer",
          "format": "int32",
          "title": "get_sovereignty_structures_alliance_id"
        },
        "solar_system_id": {
          "description": "Solar system in which the structure is located.\n",
          "type": "integer",
          "format": "int32",
          "title": "get_sovereignty_structures_solar_system_id"
        },
        "structure_id": {
          "description": "Unique item ID for this structure.",
          "type": "integer",
          "format": "int64",
          "title": "get_sovereignty_structures_structure_id"
        },
        "structure_type_id": {
          "description": "A reference to the type of structure this is.\n",
          "type": "integer",
          "format": "int32",
          "title": "get_sovereignty_structures_structure_type_id"
        },
        "vulnerability_occupancy_level": {
          "description": "The occupancy level for the next or current vulnerability window. This takes into account all development indexes and capital system bonuses. Also known as Activity Defense Multiplier from in the client. It increases the time that attackers must spend using their entosis links on the structure.\n",
          "type": "number",
          "format": "float",
          "title": "get_sovereignty_structures_vulnerability_occupancy_level"
        },
        "vulnerable_end_time": {
          "description": "The time at which the next or current vulnerability window ends. At the end of a vulnerability window the next window is recalculated and locked in along with the vulnerabilityOccupancyLevel. If the structure is not in 100% entosis control of the defender, it will go in to 'overtime' and stay vulnerable for as long as that situation persists. Only once the defenders have 100% entosis control and has the vulnerableEndTime passed does the vulnerability interval expire and a new one is calculated.\n",
          "type": "string",
          "format": "date-time",
          "title": "get_sovereignty_structures_vulnerable_end_time"
        },
        "vulnerable_start_time": {
          "description": "The next time at which the structure will become vulnerable. Or the start time of the current window if current time is between this and vulnerableEndTime.\n",
          "type": "string",
          "format": "date-time",
          "title": "get_sovereignty_structures_vulnerable_start_time"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getStatusInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_status_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_status_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getStatusOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_status_ok",
      "required": [
        "start_time",
        "players",
        "server_version"
      ],
      "properties": {
        "players": {
          "description": "Current online player count",
          "type": "integer",
          "title": "get_status_players"
        },
        "server_version": {
          "description": "Running version as string",
          "type": "string",
          "title": "get_status_server_version"
        },
        "start_time": {
          "description": "Server start timestamp",
          "type": "string",
          "format": "date-time",
          "title": "get_status_start_time"
        },
        "vip": {
          "description": "If the server is in VIP mode",
          "type": "boolean",
          "title": "get_status_vip"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseBloodlinesInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_bloodlines_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_bloodlines_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseBloodlinesOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_universe_bloodlines_ok",
      "maxItems": 100,
      "items": {
        "$ref": "#/definitions/getUniverseBloodlinesOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseBloodlinesOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_universe_bloodlines_200_ok",
      "required": [
        "bloodline_id",
        "name",
        "description",
        "race_id",
        "ship_type_id",
        "corporation_id",
        "perception",
        "willpower",
        "charisma",
        "memory",
        "intelligence"
      ],
      "properties": {
        "bloodline_id": {
          "description": "bloodline_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_bloodlines_bloodline_id"
        },
        "charisma": {
          "description": "charisma integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_bloodlines_charisma"
        },
        "corporation_id": {
          "description": "corporation_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_bloodlines_corporation_id"
        },
        "description": {
          "description": "description string",
          "type": "string",
          "title": "get_universe_bloodlines_description"
        },
        "intelligence": {
          "description": "intelligence integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_bloodlines_intelligence"
        },
        "memory": {
          "description": "memory integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_bloodlines_memory"
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_universe_bloodlines_name"
        },
        "perception": {
          "description": "perception integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_bloodlines_perception"
        },
        "race_id": {
          "description": "race_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_bloodlines_race_id"
        },
        "ship_type_id": {
          "description": "ship_type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_bloodlines_ship_type_id"
        },
        "willpower": {
          "description": "willpower integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_bloodlines_willpower"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseCategoriesCategoryIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_categories_category_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_categories_category_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseCategoriesCategoryIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "get_universe_categories_category_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "get_universe_categories_category_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseCategoriesCategoryIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_universe_categories_category_id_ok",
      "required": [
        "category_id",
        "name",
        "published",
        "groups"
      ],
      "properties": {
        "category_id": {
          "description": "category_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_categories_category_id_category_id"
        },
        "groups": {
          "description": "groups array",
          "type": "array",
          "title": "get_universe_categories_category_id_groups",
          "maxItems": 10000,
          "items": {
            "description": "group integer",
            "type": "integer",
            "format": "int32",
            "title": "get_universe_categories_category_id_group"
          }
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_universe_categories_category_id_name"
        },
        "published": {
          "description": "published boolean",
          "type": "boolean",
          "title": "get_universe_categories_category_id_published"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseCategoriesInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_categories_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_categories_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseConstellationsConstellationIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_constellations_constellation_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_constellations_constellation_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseConstellationsConstellationIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "get_universe_constellations_constellation_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "get_universe_constellations_constellation_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseConstellationsConstellationIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_universe_constellations_constellation_id_ok",
      "required": [
        "constellation_id",
        "name",
        "position",
        "region_id",
        "systems"
      ],
      "properties": {
        "constellation_id": {
          "description": "constellation_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_constellations_constellation_id_constellation_id"
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_universe_constellations_constellation_id_name"
        },
        "position": {
          "$ref": "#/definitions/getUniverseConstellationsConstellationIdOKBodyPosition"
        },
        "region_id": {
          "description": "The region this constellation is in",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_constellations_constellation_id_region_id"
        },
        "systems": {
          "description": "systems array",
          "type": "array",
          "title": "get_universe_constellations_constellation_id_systems",
          "maxItems": 10000,
          "items": {
            "description": "system integer",
            "type": "integer",
            "format": "int32",
            "title": "get_universe_constellations_constellation_id_system"
          }
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseConstellationsConstellationIdOKBodyPosition": {
      "description": "position object",
      "type": "object",
      "title": "get_universe_constellations_constellation_id_position",
      "required": [
        "x",
        "y",
        "z"
      ],
      "properties": {
        "x": {
          "description": "x number",
          "type": "number",
          "format": "float",
          "title": "get_universe_constellations_constellation_id_x"
        },
        "y": {
          "description": "y number",
          "type": "number",
          "format": "float",
          "title": "get_universe_constellations_constellation_id_y"
        },
        "z": {
          "description": "z number",
          "type": "number",
          "format": "float",
          "title": "get_universe_constellations_constellation_id_z"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseConstellationsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_constellations_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_constellations_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseFactionsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_factions_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_factions_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseFactionsOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_universe_factions_ok",
      "maxItems": 10000,
      "items": {
        "$ref": "#/definitions/getUniverseFactionsOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseFactionsOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_universe_factions_200_ok",
      "required": [
        "faction_id",
        "name",
        "description",
        "solar_system_id",
        "corporation_id",
        "size_factor",
        "station_count",
        "station_system_count",
        "is_unique"
      ],
      "properties": {
        "corporation_id": {
          "description": "corporation_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_factions_corporation_id"
        },
        "description": {
          "description": "description string",
          "type": "string",
          "title": "get_universe_factions_description"
        },
        "faction_id": {
          "description": "faction_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_factions_faction_id"
        },
        "is_unique": {
          "description": "is_unique boolean",
          "type": "boolean",
          "title": "get_universe_factions_is_unique"
        },
        "militia_corporation_id": {
          "description": "militia_corporation_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_factions_militia_corporation_id"
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_universe_factions_name"
        },
        "size_factor": {
          "description": "size_factor number",
          "type": "number",
          "format": "float",
          "title": "get_universe_factions_size_factor"
        },
        "solar_system_id": {
          "description": "solar_system_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_factions_solar_system_id"
        },
        "station_count": {
          "description": "station_count integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_factions_station_count"
        },
        "station_system_count": {
          "description": "station_system_count integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_factions_station_system_count"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseGraphicsGraphicIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_graphics_graphic_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_graphics_graphic_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseGraphicsGraphicIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "get_universe_graphics_graphic_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "get_universe_graphics_graphic_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseGraphicsGraphicIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_universe_graphics_graphic_id_ok",
      "required": [
        "graphic_id"
      ],
      "properties": {
        "collision_file": {
          "description": "collision_file string",
          "type": "string",
          "title": "get_universe_graphics_graphic_id_collision_file"
        },
        "graphic_file": {
          "description": "graphic_file string",
          "type": "string",
          "title": "get_universe_graphics_graphic_id_graphic_file"
        },
        "graphic_id": {
          "description": "graphic_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_graphics_graphic_id_graphic_id"
        },
        "icon_folder": {
          "description": "icon_folder string",
          "type": "string",
          "title": "get_universe_graphics_graphic_id_icon_folder"
        },
        "sof_dna": {
          "description": "sof_dna string",
          "type": "string",
          "title": "get_universe_graphics_graphic_id_sof_dna"
        },
        "sof_fation_name": {
          "description": "sof_fation_name string",
          "type": "string",
          "title": "get_universe_graphics_graphic_id_sof_fation_name"
        },
        "sof_hull_name": {
          "description": "sof_hull_name string",
          "type": "string",
          "title": "get_universe_graphics_graphic_id_sof_hull_name"
        },
        "sof_race_name": {
          "description": "sof_race_name string",
          "type": "string",
          "title": "get_universe_graphics_graphic_id_sof_race_name"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseGraphicsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_graphics_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_graphics_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseGroupsGroupIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_groups_group_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_groups_group_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseGroupsGroupIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "get_universe_groups_group_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "get_universe_groups_group_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseGroupsGroupIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_universe_groups_group_id_ok",
      "required": [
        "group_id",
        "name",
        "published",
        "category_id",
        "types"
      ],
      "properties": {
        "category_id": {
          "description": "category_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_groups_group_id_category_id"
        },
        "group_id": {
          "description": "group_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_groups_group_id_group_id"
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_universe_groups_group_id_name"
        },
        "published": {
          "description": "published boolean",
          "type": "boolean",
          "title": "get_universe_groups_group_id_published"
        },
        "types": {
          "description": "types array",
          "type": "array",
          "title": "get_universe_groups_group_id_types",
          "maxItems": 10000,
          "items": {
            "description": "type integer",
            "type": "integer",
            "format": "int32",
            "title": "get_universe_groups_group_id_type"
          }
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseGroupsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_groups_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_groups_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseMoonsMoonIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_moons_moon_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_moons_moon_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseMoonsMoonIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "get_universe_moons_moon_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "get_universe_moons_moon_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseMoonsMoonIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_universe_moons_moon_id_ok",
      "required": [
        "moon_id",
        "name",
        "position",
        "system_id"
      ],
      "properties": {
        "moon_id": {
          "description": "moon_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_moons_moon_id_moon_id"
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_universe_moons_moon_id_name"
        },
        "position": {
          "$ref": "#/definitions/getUniverseMoonsMoonIdOKBodyPosition"
        },
        "system_id": {
          "description": "The solar system this moon is in",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_moons_moon_id_system_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseMoonsMoonIdOKBodyPosition": {
      "description": "position object",
      "type": "object",
      "title": "get_universe_moons_moon_id_position",
      "required": [
        "x",
        "y",
        "z"
      ],
      "properties": {
        "x": {
          "description": "x number",
          "type": "number",
          "format": "float",
          "title": "get_universe_moons_moon_id_x"
        },
        "y": {
          "description": "y number",
          "type": "number",
          "format": "float",
          "title": "get_universe_moons_moon_id_y"
        },
        "z": {
          "description": "z number",
          "type": "number",
          "format": "float",
          "title": "get_universe_moons_moon_id_z"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniversePlanetsPlanetIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_planets_planet_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_planets_planet_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniversePlanetsPlanetIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "get_universe_planets_planet_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "get_universe_planets_planet_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniversePlanetsPlanetIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_universe_planets_planet_id_ok",
      "required": [
        "planet_id",
        "name",
        "type_id",
        "position",
        "system_id"
      ],
      "properties": {
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_universe_planets_planet_id_name"
        },
        "planet_id": {
          "description": "planet_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_planets_planet_id_planet_id"
        },
        "position": {
          "$ref": "#/definitions/getUniversePlanetsPlanetIdOKBodyPosition"
        },
        "system_id": {
          "description": "The solar system this planet is in",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_planets_planet_id_system_id"
        },
        "type_id": {
          "description": "type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_planets_planet_id_type_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniversePlanetsPlanetIdOKBodyPosition": {
      "description": "position object",
      "type": "object",
      "title": "get_universe_planets_planet_id_position",
      "required": [
        "x",
        "y",
        "z"
      ],
      "properties": {
        "x": {
          "description": "x number",
          "type": "number",
          "format": "float",
          "title": "get_universe_planets_planet_id_x"
        },
        "y": {
          "description": "y number",
          "type": "number",
          "format": "float",
          "title": "get_universe_planets_planet_id_y"
        },
        "z": {
          "description": "z number",
          "type": "number",
          "format": "float",
          "title": "get_universe_planets_planet_id_z"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseRacesInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_races_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_races_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseRacesOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_universe_races_ok",
      "maxItems": 4,
      "items": {
        "$ref": "#/definitions/getUniverseRacesOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseRacesOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_universe_races_200_ok",
      "required": [
        "race_id",
        "name",
        "description",
        "alliance_id"
      ],
      "properties": {
        "alliance_id": {
          "description": "The alliance generally associated with this race",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_races_alliance_id"
        },
        "description": {
          "description": "description string",
          "type": "string",
          "title": "get_universe_races_description"
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_universe_races_name"
        },
        "race_id": {
          "description": "race_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_races_race_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseRegionsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_regions_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_regions_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseRegionsRegionIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_regions_region_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_regions_region_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseRegionsRegionIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "get_universe_regions_region_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "get_universe_regions_region_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseRegionsRegionIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_universe_regions_region_id_ok",
      "required": [
        "region_id",
        "name",
        "constellations"
      ],
      "properties": {
        "constellations": {
          "description": "constellations array",
          "type": "array",
          "title": "get_universe_regions_region_id_constellations",
          "maxItems": 1000,
          "items": {
            "description": "constellation integer",
            "type": "integer",
            "format": "int32",
            "title": "get_universe_regions_region_id_constellation"
          }
        },
        "description": {
          "description": "description string",
          "type": "string",
          "title": "get_universe_regions_region_id_description"
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_universe_regions_region_id_name"
        },
        "region_id": {
          "description": "region_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_regions_region_id_region_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseSchematicsSchematicIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_schematics_schematic_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_schematics_schematic_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseSchematicsSchematicIdNotFoundBody": {
      "description": "Schematic not found",
      "type": "object",
      "title": "get_universe_schematics_schematic_id_not_found",
      "properties": {
        "error": {
          "description": "error message",
          "type": "string",
          "title": "get_universe_schematics_schematic_id_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseSchematicsSchematicIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_universe_schematics_schematic_id_ok",
      "required": [
        "schematic_name",
        "cycle_time"
      ],
      "properties": {
        "cycle_time": {
          "description": "Time in seconds to process a run",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_schematics_schematic_id_cycle_time"
        },
        "schematic_name": {
          "description": "schematic_name string",
          "type": "string",
          "title": "get_universe_schematics_schematic_id_schematic_name"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseStargatesStargateIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_stargates_stargate_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_stargates_stargate_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseStargatesStargateIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "get_universe_stargates_stargate_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "get_universe_stargates_stargate_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseStargatesStargateIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_universe_stargates_stargate_id_ok",
      "required": [
        "stargate_id",
        "name",
        "type_id",
        "position",
        "system_id",
        "destination"
      ],
      "properties": {
        "destination": {
          "$ref": "#/definitions/getUniverseStargatesStargateIdOKBodyDestination"
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_universe_stargates_stargate_id_name"
        },
        "position": {
          "$ref": "#/definitions/getUniverseStargatesStargateIdOKBodyPosition"
        },
        "stargate_id": {
          "description": "stargate_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_stargates_stargate_id_stargate_id"
        },
        "system_id": {
          "description": "The solar system this stargate is in",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_stargates_stargate_id_system_id"
        },
        "type_id": {
          "description": "type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_stargates_stargate_id_type_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseStargatesStargateIdOKBodyDestination": {
      "description": "destination object",
      "type": "object",
      "title": "get_universe_stargates_stargate_id_destination",
      "required": [
        "system_id",
        "stargate_id"
      ],
      "properties": {
        "stargate_id": {
          "description": "The stargate this stargate connects to",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_stargates_stargate_id_stargate_id"
        },
        "system_id": {
          "description": "The solar system this stargate connects to",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_stargates_stargate_id_system_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseStargatesStargateIdOKBodyPosition": {
      "description": "position object",
      "type": "object",
      "title": "get_universe_stargates_stargate_id_position",
      "required": [
        "x",
        "y",
        "z"
      ],
      "properties": {
        "x": {
          "description": "x number",
          "type": "number",
          "format": "float",
          "title": "get_universe_stargates_stargate_id_x"
        },
        "y": {
          "description": "y number",
          "type": "number",
          "format": "float",
          "title": "get_universe_stargates_stargate_id_y"
        },
        "z": {
          "description": "z number",
          "type": "number",
          "format": "float",
          "title": "get_universe_stargates_stargate_id_z"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseStationsStationIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_stations_station_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_stations_station_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseStationsStationIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "get_universe_stations_station_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "get_universe_stations_station_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseStationsStationIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_universe_stations_station_id_ok",
      "required": [
        "station_id",
        "name",
        "type_id",
        "position",
        "system_id",
        "reprocessing_efficiency",
        "reprocessing_stations_take",
        "max_dockable_ship_volume",
        "office_rental_cost",
        "services"
      ],
      "properties": {
        "max_dockable_ship_volume": {
          "description": "max_dockable_ship_volume number",
          "type": "number",
          "format": "float",
          "title": "get_universe_stations_station_id_max_dockable_ship_volume"
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_universe_stations_station_id_name"
        },
        "office_rental_cost": {
          "description": "office_rental_cost number",
          "type": "number",
          "format": "float",
          "title": "get_universe_stations_station_id_office_rental_cost"
        },
        "owner": {
          "description": "ID of the corporation that controls this station",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_stations_station_id_owner"
        },
        "position": {
          "$ref": "#/definitions/getUniverseStationsStationIdOKBodyPosition"
        },
        "race_id": {
          "description": "race_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_stations_station_id_race_id"
        },
        "reprocessing_efficiency": {
          "description": "reprocessing_efficiency number",
          "type": "number",
          "format": "float",
          "title": "get_universe_stations_station_id_reprocessing_efficiency"
        },
        "reprocessing_stations_take": {
          "description": "reprocessing_stations_take number",
          "type": "number",
          "format": "float",
          "title": "get_universe_stations_station_id_reprocessing_stations_take"
        },
        "services": {
          "description": "services array",
          "type": "array",
          "title": "get_universe_stations_station_id_services",
          "maxItems": 30,
          "items": {
            "description": "service string",
            "type": "string",
            "title": "get_universe_stations_station_id_service",
            "enum": [
              "bounty-missions",
              "assasination-missions",
              "courier-missions",
              "interbus",
              "reprocessing-plant",
              "refinery",
              "market",
              "black-market",
              "stock-exchange",
              "cloning",
              "surgery",
              "dna-therapy",
              "repair-facilities",
              "factory",
              "labratory",
              "gambling",
              "fitting",
              "paintshop",
              "news",
              "storage",
              "insurance",
              "docking",
              "office-rental",
              "jump-clone-facility",
              "loyalty-point-store",
              "navy-offices",
              "security-offices"
            ]
          }
        },
        "station_id": {
          "description": "station_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_stations_station_id_station_id"
        },
        "system_id": {
          "description": "The solar system this station is in",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_stations_station_id_system_id"
        },
        "type_id": {
          "description": "type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_stations_station_id_type_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseStationsStationIdOKBodyPosition": {
      "description": "position object",
      "type": "object",
      "title": "get_universe_stations_station_id_position",
      "required": [
        "x",
        "y",
        "z"
      ],
      "properties": {
        "x": {
          "description": "x number",
          "type": "number",
          "format": "float",
          "title": "get_universe_stations_station_id_x"
        },
        "y": {
          "description": "y number",
          "type": "number",
          "format": "float",
          "title": "get_universe_stations_station_id_y"
        },
        "z": {
          "description": "z number",
          "type": "number",
          "format": "float",
          "title": "get_universe_stations_station_id_z"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseStructuresInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_structures_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_structures_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseStructuresStructureIdForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "get_universe_structures_structure_id_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "get_universe_structures_structure_id_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseStructuresStructureIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_structures_structure_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_structures_structure_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseStructuresStructureIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "get_universe_structures_structure_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "get_universe_structures_structure_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseStructuresStructureIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_universe_structures_structure_id_ok",
      "required": [
        "name",
        "solar_system_id"
      ],
      "properties": {
        "name": {
          "description": "The full name of the structure",
          "type": "string",
          "title": "get_universe_structures_structure_id_name"
        },
        "position": {
          "$ref": "#/definitions/getUniverseStructuresStructureIdOKBodyPosition"
        },
        "solar_system_id": {
          "description": "solar_system_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_structures_structure_id_solar_system_id"
        },
        "type_id": {
          "description": "type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_structures_structure_id_type_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseStructuresStructureIdOKBodyPosition": {
      "description": "Coordinates of the structure in Cartesian space relative to the Sun, in metres.\n",
      "type": "object",
      "title": "get_universe_structures_structure_id_position",
      "required": [
        "x",
        "y",
        "z"
      ],
      "properties": {
        "x": {
          "description": "x number",
          "type": "number",
          "format": "float",
          "title": "get_universe_structures_structure_id_x"
        },
        "y": {
          "description": "y number",
          "type": "number",
          "format": "float",
          "title": "get_universe_structures_structure_id_y"
        },
        "z": {
          "description": "z number",
          "type": "number",
          "format": "float",
          "title": "get_universe_structures_structure_id_z"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseSystemJumpsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_system_jumps_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_system_jumps_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseSystemJumpsOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_universe_system_jumps_ok",
      "maxItems": 10000,
      "items": {
        "$ref": "#/definitions/getUniverseSystemJumpsOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseSystemJumpsOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_universe_system_jumps_200_ok",
      "required": [
        "system_id",
        "ship_jumps"
      ],
      "properties": {
        "ship_jumps": {
          "description": "ship_jumps integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_system_jumps_ship_jumps"
        },
        "system_id": {
          "description": "system_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_system_jumps_system_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseSystemKillsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_system_kills_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_system_kills_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseSystemKillsOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_universe_system_kills_ok",
      "maxItems": 10000,
      "items": {
        "$ref": "#/definitions/getUniverseSystemKillsOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseSystemKillsOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_universe_system_kills_200_ok",
      "required": [
        "system_id",
        "ship_kills",
        "npc_kills",
        "pod_kills"
      ],
      "properties": {
        "npc_kills": {
          "description": "Number of NPC ships killed in this system",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_system_kills_npc_kills"
        },
        "pod_kills": {
          "description": "Number of pods killed in this system",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_system_kills_pod_kills"
        },
        "ship_kills": {
          "description": "Number of player and NPC ships killed in this system",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_system_kills_ship_kills"
        },
        "system_id": {
          "description": "system_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_system_kills_system_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseSystemsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_systems_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_systems_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseSystemsSystemIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_systems_system_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_systems_system_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseSystemsSystemIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "get_universe_systems_system_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "get_universe_systems_system_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseSystemsSystemIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_universe_systems_system_id_ok",
      "required": [
        "system_id",
        "name",
        "position",
        "security_status",
        "constellation_id",
        "planets",
        "stargates"
      ],
      "properties": {
        "constellation_id": {
          "description": "The constellation this solar system is in",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_systems_system_id_constellation_id"
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_universe_systems_system_id_name"
        },
        "planets": {
          "$ref": "#/definitions/getUniverseSystemsSystemIdOKBodyPlanets"
        },
        "position": {
          "$ref": "#/definitions/getUniverseSystemsSystemIdOKBodyPosition"
        },
        "security_class": {
          "description": "security_class string",
          "type": "string",
          "title": "get_universe_systems_system_id_security_class"
        },
        "security_status": {
          "description": "security_status number",
          "type": "number",
          "format": "float",
          "title": "get_universe_systems_system_id_security_status"
        },
        "stargates": {
          "description": "stargates array",
          "type": "array",
          "title": "get_universe_systems_system_id_stargates",
          "maxItems": 25,
          "items": {
            "description": "stargate integer",
            "type": "integer",
            "format": "int32",
            "title": "get_universe_systems_system_id_stargate"
          }
        },
        "system_id": {
          "description": "system_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_systems_system_id_system_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseSystemsSystemIdOKBodyPlanets": {
      "description": "planets array",
      "type": "array",
      "title": "get_universe_systems_system_id_planets",
      "maxItems": 1000,
      "items": {
        "$ref": "#/definitions/getUniverseSystemsSystemIdOKBodyPlanetsItems"
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseSystemsSystemIdOKBodyPlanetsItems": {
      "description": "planet object",
      "type": "object",
      "title": "get_universe_systems_system_id_planet",
      "required": [
        "planet_id"
      ],
      "properties": {
        "moons": {
          "description": "moons array",
          "type": "array",
          "title": "get_universe_systems_system_id_moons",
          "maxItems": 1000,
          "items": {
            "description": "moon integer",
            "type": "integer",
            "format": "int32",
            "title": "get_universe_systems_system_id_moon"
          }
        },
        "planet_id": {
          "description": "planet_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_systems_system_id_planet_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseSystemsSystemIdOKBodyPosition": {
      "description": "position object",
      "type": "object",
      "title": "get_universe_systems_system_id_position",
      "required": [
        "x",
        "y",
        "z"
      ],
      "properties": {
        "x": {
          "description": "x number",
          "type": "number",
          "format": "float",
          "title": "get_universe_systems_system_id_x"
        },
        "y": {
          "description": "y number",
          "type": "number",
          "format": "float",
          "title": "get_universe_systems_system_id_y"
        },
        "z": {
          "description": "z number",
          "type": "number",
          "format": "float",
          "title": "get_universe_systems_system_id_z"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseTypesInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_types_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_types_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseTypesTypeIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_universe_types_type_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_universe_types_type_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseTypesTypeIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "get_universe_types_type_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "get_universe_types_type_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseTypesTypeIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_universe_types_type_id_ok",
      "required": [
        "type_id",
        "name",
        "description",
        "published",
        "group_id"
      ],
      "properties": {
        "capacity": {
          "description": "capacity number",
          "type": "number",
          "format": "float",
          "title": "get_universe_types_type_id_capacity"
        },
        "description": {
          "description": "description string",
          "type": "string",
          "title": "get_universe_types_type_id_description"
        },
        "dogma_attributes": {
          "$ref": "#/definitions/getUniverseTypesTypeIdOKBodyDogmaAttributes"
        },
        "dogma_effects": {
          "$ref": "#/definitions/getUniverseTypesTypeIdOKBodyDogmaEffects"
        },
        "graphic_id": {
          "description": "graphic_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_types_type_id_graphic_id"
        },
        "group_id": {
          "description": "group_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_types_type_id_group_id"
        },
        "icon_id": {
          "description": "icon_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_types_type_id_icon_id"
        },
        "mass": {
          "description": "mass number",
          "type": "number",
          "format": "float",
          "title": "get_universe_types_type_id_mass"
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "get_universe_types_type_id_name"
        },
        "portion_size": {
          "description": "portion_size integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_types_type_id_portion_size"
        },
        "published": {
          "description": "published boolean",
          "type": "boolean",
          "title": "get_universe_types_type_id_published"
        },
        "radius": {
          "description": "radius number",
          "type": "number",
          "format": "float",
          "title": "get_universe_types_type_id_radius"
        },
        "type_id": {
          "description": "type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_types_type_id_type_id"
        },
        "volume": {
          "description": "volume number",
          "type": "number",
          "format": "float",
          "title": "get_universe_types_type_id_volume"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseTypesTypeIdOKBodyDogmaAttributes": {
      "description": "dogma_attributes array",
      "type": "array",
      "title": "get_universe_types_type_id_dogma_attributes",
      "maxItems": 1000,
      "items": {
        "$ref": "#/definitions/getUniverseTypesTypeIdOKBodyDogmaAttributesItems"
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseTypesTypeIdOKBodyDogmaAttributesItems": {
      "description": "dogma_attribute object",
      "type": "object",
      "title": "get_universe_types_type_id_dogma_attribute",
      "required": [
        "attribute_id",
        "value"
      ],
      "properties": {
        "attribute_id": {
          "description": "attribute_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_types_type_id_attribute_id"
        },
        "value": {
          "description": "value number",
          "type": "number",
          "format": "float",
          "title": "get_universe_types_type_id_value"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseTypesTypeIdOKBodyDogmaEffects": {
      "description": "dogma_effects array",
      "type": "array",
      "title": "get_universe_types_type_id_dogma_effects",
      "maxItems": 1000,
      "items": {
        "$ref": "#/definitions/getUniverseTypesTypeIdOKBodyDogmaEffectsItems"
      },
      "x-go-gen-location": "operations"
    },
    "getUniverseTypesTypeIdOKBodyDogmaEffectsItems": {
      "description": "dogma_effect object",
      "type": "object",
      "title": "get_universe_types_type_id_dogma_effect",
      "required": [
        "effect_id",
        "is_default"
      ],
      "properties": {
        "effect_id": {
          "description": "effect_id integer",
          "type": "integer",
          "format": "int32",
          "title": "get_universe_types_type_id_effect_id"
        },
        "is_default": {
          "description": "is_default boolean",
          "type": "boolean",
          "title": "get_universe_types_type_id_is_default"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getWarsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_wars_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_wars_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getWarsWarIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_wars_war_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_wars_war_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getWarsWarIdKillmailsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "get_wars_war_id_killmails_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "get_wars_war_id_killmails_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getWarsWarIdKillmailsOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "get_wars_war_id_killmails_ok",
      "maxItems": 2000,
      "items": {
        "$ref": "#/definitions/getWarsWarIdKillmailsOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "getWarsWarIdKillmailsOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_wars_war_id_killmails_200_ok",
      "required": [
        "killmail_id",
        "killmail_hash"
      ],
      "properties": {
        "killmail_hash": {
          "description": "A hash of this killmail",
          "type": "string",
          "title": "get_wars_war_id_killmails_killmail_hash"
        },
        "killmail_id": {
          "description": "ID of this killmail",
          "type": "integer",
          "format": "int32",
          "title": "get_wars_war_id_killmails_killmail_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getWarsWarIdKillmailsUnprocessableEntityBody": {
      "description": "Unprocessable entity",
      "type": "object",
      "title": "get_wars_war_id_killmails_unprocessable_entity",
      "properties": {
        "error": {
          "description": "Unprocessable entity message",
          "type": "string",
          "title": "get_wars_war_id_killmails_422_unprocessable_entity"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getWarsWarIdOKBody": {
      "description": "200 ok object",
      "type": "object",
      "title": "get_wars_war_id_ok",
      "required": [
        "id",
        "declared",
        "mutual",
        "open_for_allies",
        "aggressor",
        "defender"
      ],
      "properties": {
        "aggressor": {
          "$ref": "#/definitions/getWarsWarIdOKBodyAggressor"
        },
        "allies": {
          "$ref": "#/definitions/getWarsWarIdOKBodyAllies"
        },
        "declared": {
          "description": "Time that the war was declared",
          "type": "string",
          "format": "date-time",
          "title": "get_wars_war_id_declared"
        },
        "defender": {
          "$ref": "#/definitions/getWarsWarIdOKBodyDefender"
        },
        "finished": {
          "description": "Time the war ended and shooting was no longer allowed",
          "type": "string",
          "format": "date-time",
          "title": "get_wars_war_id_finished"
        },
        "id": {
          "description": "ID of the specified war",
          "type": "integer",
          "format": "int32",
          "title": "get_wars_war_id_id"
        },
        "mutual": {
          "description": "Was the war declared mutual by both parties",
          "type": "boolean",
          "title": "get_wars_war_id_mutual"
        },
        "open_for_allies": {
          "description": "Is the war currently open for allies or not",
          "type": "boolean",
          "title": "get_wars_war_id_open_for_allies"
        },
        "retracted": {
          "description": "Time the war was retracted but both sides could still shoot each other",
          "type": "string",
          "format": "date-time",
          "title": "get_wars_war_id_retracted"
        },
        "started": {
          "description": "Time when the war started and both sides could shoot each other",
          "type": "string",
          "format": "date-time",
          "title": "get_wars_war_id_started"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getWarsWarIdOKBodyAggressor": {
      "description": "The aggressor corporation or alliance that declared this war, only contains either corporation_id or alliance_id",
      "type": "object",
      "title": "get_wars_war_id_aggressor",
      "required": [
        "ships_killed",
        "isk_destroyed"
      ],
      "properties": {
        "alliance_id": {
          "description": "Alliance ID if and only if the aggressor is an alliance",
          "type": "integer",
          "format": "int32",
          "title": "get_wars_war_id_alliance_id"
        },
        "corporation_id": {
          "description": "Corporation ID if and only if the aggressor is a corporation",
          "type": "integer",
          "format": "int32",
          "title": "get_wars_war_id_corporation_id"
        },
        "isk_destroyed": {
          "description": "ISK value of ships the aggressor has destroyed",
          "type": "number",
          "format": "float",
          "title": "get_wars_war_id_isk_destroyed"
        },
        "ships_killed": {
          "description": "The number of ships the aggressor has killed",
          "type": "integer",
          "format": "int32",
          "title": "get_wars_war_id_ships_killed"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getWarsWarIdOKBodyAllies": {
      "description": "allied corporations or alliances, each object contains either corporation_id or alliance_id",
      "type": "array",
      "title": "get_wars_war_id_allies",
      "maxItems": 10000,
      "items": {
        "$ref": "#/definitions/getWarsWarIdOKBodyAlliesItems"
      },
      "x-go-gen-location": "operations"
    },
    "getWarsWarIdOKBodyAlliesItems": {
      "description": "ally object",
      "type": "object",
      "title": "get_wars_war_id_ally",
      "properties": {
        "alliance_id": {
          "description": "Alliance ID if and only if this ally is an alliance",
          "type": "integer",
          "format": "int32",
          "title": "get_wars_war_id_alliance_id"
        },
        "corporation_id": {
          "description": "Corporation ID if and only if this ally is a corporation",
          "type": "integer",
          "format": "int32",
          "title": "get_wars_war_id_corporation_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getWarsWarIdOKBodyDefender": {
      "description": "The defending corporation or alliance that declared this war, only contains either corporation_id or alliance_id",
      "type": "object",
      "title": "get_wars_war_id_defender",
      "required": [
        "ships_killed",
        "isk_destroyed"
      ],
      "properties": {
        "alliance_id": {
          "description": "Alliance ID if and only if the defender is an alliance",
          "type": "integer",
          "format": "int32",
          "title": "get_wars_war_id_alliance_id"
        },
        "corporation_id": {
          "description": "Corporation ID if and only if the defender is a corporation",
          "type": "integer",
          "format": "int32",
          "title": "get_wars_war_id_corporation_id"
        },
        "isk_destroyed": {
          "description": "ISK value of ships the defender has killed",
          "type": "number",
          "format": "float",
          "title": "get_wars_war_id_isk_destroyed"
        },
        "ships_killed": {
          "description": "The number of ships the defender has killed",
          "type": "integer",
          "format": "int32",
          "title": "get_wars_war_id_ships_killed"
        }
      },
      "x-go-gen-location": "operations"
    },
    "getWarsWarIdUnprocessableEntityBody": {
      "description": "Unprocessable entity",
      "type": "object",
      "title": "get_wars_war_id_unprocessable_entity",
      "properties": {
        "error": {
          "description": "Unprocessable entity message",
          "type": "string",
          "title": "get_wars_war_id_422_unprocessable_entity"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersAffiliationInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "post_characters_affiliation_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "post_characters_affiliation_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersAffiliationOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "post_characters_affiliation_ok",
      "maxItems": 1000,
      "items": {
        "$ref": "#/definitions/postCharactersAffiliationOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersAffiliationOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "post_characters_affiliation_200_ok",
      "required": [
        "character_id",
        "corporation_id"
      ],
      "properties": {
        "alliance_id": {
          "description": "The character's alliance ID, if their corporation is in an alliance",
          "type": "integer",
          "format": "int32",
          "title": "post_characters_affiliation_alliance_id"
        },
        "character_id": {
          "description": "The character's ID",
          "type": "integer",
          "format": "int32",
          "title": "post_characters_affiliation_character_id"
        },
        "corporation_id": {
          "description": "The character's corporation ID",
          "type": "integer",
          "format": "int32",
          "title": "post_characters_affiliation_corporation_id"
        },
        "faction_id": {
          "description": "The character's faction ID, if their corporation is in a faction",
          "type": "integer",
          "format": "int32",
          "title": "post_characters_affiliation_faction_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersAffiliationUnprocessableEntityBody": {
      "description": "Unprocessable entity",
      "type": "object",
      "title": "post_characters_affiliation_unprocessable_entity",
      "properties": {
        "error": {
          "description": "Unprocessable entity message",
          "type": "string",
          "title": "post_characters_affiliation_422_unprocessable_entity"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersCharacterIdContactsForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "post_characters_character_id_contacts_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "post_characters_character_id_contacts_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersCharacterIdContactsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "post_characters_character_id_contacts_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "post_characters_character_id_contacts_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersCharacterIdCspaCreatedBody": {
      "description": "201 created object",
      "type": "object",
      "title": "post_characters_character_id_cspa_created",
      "properties": {
        "cost": {
          "description": "cost integer",
          "type": "integer",
          "format": "int64",
          "title": "post_characters_character_id_cspa_cost"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersCharacterIdCspaForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "post_characters_character_id_cspa_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "post_characters_character_id_cspa_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersCharacterIdCspaInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "post_characters_character_id_cspa_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "post_characters_character_id_cspa_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersCharacterIdCspaParamsBody": {
      "description": "characters object",
      "type": "object",
      "title": "post_characters_character_id_cspa_characters",
      "required": [
        "characters"
      ],
      "properties": {
        "characters": {
          "description": "characters array",
          "type": "array",
          "title": "post_characters_character_id_cspa_characters",
          "maxItems": 100,
          "minItems": 1,
          "uniqueItems": true,
          "items": {
            "description": "character integer",
            "type": "integer",
            "format": "int32",
            "title": "post_characters_character_id_cspa_character"
          }
        }
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersCharacterIdFittingsCreatedBody": {
      "description": "201 created object",
      "type": "object",
      "title": "post_characters_character_id_fittings_created",
      "required": [
        "fitting_id"
      ],
      "properties": {
        "fitting_id": {
          "description": "fitting_id integer",
          "type": "integer",
          "format": "int32",
          "title": "post_characters_character_id_fittings_fitting_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersCharacterIdFittingsForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "post_characters_character_id_fittings_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "post_characters_character_id_fittings_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersCharacterIdFittingsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "post_characters_character_id_fittings_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "post_characters_character_id_fittings_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersCharacterIdFittingsParamsBody": {
      "description": "fitting object",
      "type": "object",
      "title": "post_characters_character_id_fittings_fitting",
      "required": [
        "name",
        "description",
        "ship_type_id",
        "items"
      ],
      "properties": {
        "description": {
          "description": "description string",
          "type": "string",
          "title": "post_characters_character_id_fittings_description",
          "maxLength": 500,
          "minLength": 0
        },
        "items": {
          "$ref": "#/definitions/postCharactersCharacterIdFittingsParamsBodyItems"
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "post_characters_character_id_fittings_name",
          "maxLength": 50,
          "minLength": 1
        },
        "ship_type_id": {
          "description": "ship_type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "post_characters_character_id_fittings_ship_type_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersCharacterIdFittingsParamsBodyItems": {
      "description": "items array",
      "type": "array",
      "title": "post_characters_character_id_fittings_items",
      "maxItems": 255,
      "minItems": 1,
      "items": {
        "$ref": "#/definitions/postCharactersCharacterIdFittingsParamsBodyItemsItems"
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersCharacterIdFittingsParamsBodyItemsItems": {
      "description": "item object",
      "type": "object",
      "title": "post_characters_character_id_fittings_item",
      "required": [
        "type_id",
        "flag",
        "quantity"
      ],
      "properties": {
        "flag": {
          "description": "flag integer",
          "type": "integer",
          "format": "int32",
          "title": "post_characters_character_id_fittings_flag"
        },
        "quantity": {
          "description": "quantity integer",
          "type": "integer",
          "format": "int32",
          "title": "post_characters_character_id_fittings_quantity"
        },
        "type_id": {
          "description": "type_id integer",
          "type": "integer",
          "format": "int32",
          "title": "post_characters_character_id_fittings_type_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersCharacterIdMailBadRequestBody": {
      "description": "Bad request",
      "type": "object",
      "title": "post_characters_character_id_mail_bad_request",
      "properties": {
        "error": {
          "description": "Bad request message",
          "type": "string",
          "title": "post_characters_character_id_mail_400_bad_request"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersCharacterIdMailForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "post_characters_character_id_mail_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "post_characters_character_id_mail_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersCharacterIdMailInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "post_characters_character_id_mail_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "post_characters_character_id_mail_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersCharacterIdMailLabelsForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "post_characters_character_id_mail_labels_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "post_characters_character_id_mail_labels_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersCharacterIdMailLabelsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "post_characters_character_id_mail_labels_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "post_characters_character_id_mail_labels_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersCharacterIdMailLabelsParamsBody": {
      "description": "label object",
      "type": "object",
      "title": "post_characters_character_id_mail_labels_label",
      "required": [
        "name"
      ],
      "properties": {
        "color": {
          "description": "Hexadecimal string representing label color,\nin RGB format\n",
          "type": "string",
          "title": "post_characters_character_id_mail_labels_color",
          "default": "#ffffff",
          "enum": [
            "#ffffff",
            "#ffff01",
            "#ff6600",
            "#fe0000",
            "#9a0000",
            "#660066",
            "#0000fe",
            "#0099ff",
            "#01ffff",
            "#00ff33",
            "#349800",
            "#006634",
            "#666666",
            "#999999",
            "#e6e6e6",
            "#ffffcd",
            "#99ffff",
            "#ccff9a"
          ]
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "post_characters_character_id_mail_labels_name",
          "maxLength": 40,
          "minLength": 1
        }
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersCharacterIdMailParamsBody": {
      "description": "mail schema",
      "title": "post_characters_character_id_mail_mail",
      "required": [
        "recipients",
        "subject",
        "body"
      ],
      "properties": {
        "approved_cost": {
          "description": "approved_cost integer",
          "type": "integer",
          "format": "int64",
          "title": "post_characters_character_id_mail_approved_cost",
          "default": 0
        },
        "body": {
          "description": "body string",
          "type": "string",
          "title": "post_characters_character_id_mail_body",
          "maxLength": 10000
        },
        "recipients": {
          "$ref": "#/definitions/postCharactersCharacterIdMailParamsBodyRecipients"
        },
        "subject": {
          "description": "subject string",
          "type": "string",
          "title": "post_characters_character_id_mail_subject",
          "maxLength": 1000
        }
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersCharacterIdMailParamsBodyRecipients": {
      "description": "recipients array",
      "type": "array",
      "title": "post_characters_character_id_mail_recipients",
      "maxItems": 50,
      "minItems": 1,
      "items": {
        "$ref": "#/definitions/postCharactersCharacterIdMailParamsBodyRecipientsItems"
      },
      "x-go-gen-location": "operations"
    },
    "postCharactersCharacterIdMailParamsBodyRecipientsItems": {
      "description": "recipient object",
      "type": "object",
      "title": "post_characters_character_id_mail_recipient",
      "required": [
        "recipient_type",
        "recipient_id"
      ],
      "properties": {
        "recipient_id": {
          "description": "recipient_id integer",
          "type": "integer",
          "format": "int32",
          "title": "post_characters_character_id_mail_recipient_id"
        },
        "recipient_type": {
          "description": "recipient_type string",
          "type": "string",
          "title": "post_characters_character_id_mail_recipient_type",
          "enum": [
            "alliance",
            "character",
            "corporation",
            "mailing_list"
          ]
        }
      },
      "x-go-gen-location": "operations"
    },
    "postFleetsFleetIdMembersForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "post_fleets_fleet_id_members_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "post_fleets_fleet_id_members_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postFleetsFleetIdMembersInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "post_fleets_fleet_id_members_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "post_fleets_fleet_id_members_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postFleetsFleetIdMembersNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "post_fleets_fleet_id_members_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "post_fleets_fleet_id_members_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postFleetsFleetIdMembersParamsBody": {
      "description": "invitation object",
      "type": "object",
      "title": "post_fleets_fleet_id_members_invitation",
      "required": [
        "character_id",
        "role"
      ],
      "properties": {
        "character_id": {
          "description": "The character you want to invite",
          "type": "integer",
          "format": "int32",
          "title": "post_fleets_fleet_id_members_character_id"
        },
        "role": {
          "description": "- If a character is invited with the ` + "`" + `fleet_commander` + "`" + ` role, neither ` + "`" + `wing_id` + "`" + ` or ` + "`" + `squad_id` + "`" + ` should be specified - If a character is invited with the ` + "`" + `wing_commander` + "`" + ` role, only ` + "`" + `wing_id` + "`" + ` should be specified - If a character is invited with the ` + "`" + `squad_commander` + "`" + ` role, both ` + "`" + `wing_id` + "`" + ` and ` + "`" + `squad_id` + "`" + ` should be specified - If a character is invited with the ` + "`" + `squad_member` + "`" + ` role, ` + "`" + `wing_id` + "`" + ` and ` + "`" + `squad_id` + "`" + ` should either both be specified or not specified at all. If they aren’t specified, the invited character will join any squad with available positions\n",
          "type": "string",
          "title": "post_fleets_fleet_id_members_role",
          "enum": [
            "fleet_commander",
            "wing_commander",
            "squad_commander",
            "squad_member"
          ]
        },
        "squad_id": {
          "description": "squad_id integer",
          "type": "integer",
          "format": "int64",
          "title": "post_fleets_fleet_id_members_squad_id",
          "minimum": 0
        },
        "wing_id": {
          "description": "wing_id integer",
          "type": "integer",
          "format": "int64",
          "title": "post_fleets_fleet_id_members_wing_id",
          "minimum": 0
        }
      },
      "x-go-gen-location": "operations"
    },
    "postFleetsFleetIdMembersUnprocessableEntityBody": {
      "description": "422 unprocessable entity object",
      "type": "object",
      "title": "post_fleets_fleet_id_members_unprocessable_entity",
      "properties": {
        "error": {
          "description": "error message",
          "type": "string",
          "title": "post_fleets_fleet_id_members_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postFleetsFleetIdWingsCreatedBody": {
      "description": "201 created object",
      "type": "object",
      "title": "post_fleets_fleet_id_wings_created",
      "required": [
        "wing_id"
      ],
      "properties": {
        "wing_id": {
          "description": "The wing_id of the newly created wing",
          "type": "integer",
          "format": "int64",
          "title": "post_fleets_fleet_id_wings_wing_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postFleetsFleetIdWingsForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "post_fleets_fleet_id_wings_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "post_fleets_fleet_id_wings_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postFleetsFleetIdWingsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "post_fleets_fleet_id_wings_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "post_fleets_fleet_id_wings_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postFleetsFleetIdWingsNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "post_fleets_fleet_id_wings_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "post_fleets_fleet_id_wings_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postFleetsFleetIdWingsWingIdSquadsCreatedBody": {
      "description": "201 created object",
      "type": "object",
      "title": "post_fleets_fleet_id_wings_wing_id_squads_created",
      "required": [
        "squad_id"
      ],
      "properties": {
        "squad_id": {
          "description": "The squad_id of the newly created squad",
          "type": "integer",
          "format": "int64",
          "title": "post_fleets_fleet_id_wings_wing_id_squads_squad_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postFleetsFleetIdWingsWingIdSquadsForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "post_fleets_fleet_id_wings_wing_id_squads_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "post_fleets_fleet_id_wings_wing_id_squads_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postFleetsFleetIdWingsWingIdSquadsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "post_fleets_fleet_id_wings_wing_id_squads_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "post_fleets_fleet_id_wings_wing_id_squads_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postFleetsFleetIdWingsWingIdSquadsNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "post_fleets_fleet_id_wings_wing_id_squads_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "post_fleets_fleet_id_wings_wing_id_squads_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postUiAutopilotWaypointForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "post_ui_autopilot_waypoint_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "post_ui_autopilot_waypoint_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postUiAutopilotWaypointInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "post_ui_autopilot_waypoint_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "post_ui_autopilot_waypoint_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postUiOpenwindowContractForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "post_ui_openwindow_contract_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "post_ui_openwindow_contract_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postUiOpenwindowContractInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "post_ui_openwindow_contract_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "post_ui_openwindow_contract_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postUiOpenwindowInformationForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "post_ui_openwindow_information_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "post_ui_openwindow_information_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postUiOpenwindowInformationInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "post_ui_openwindow_information_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "post_ui_openwindow_information_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postUiOpenwindowMarketdetailsForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "post_ui_openwindow_marketdetails_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "post_ui_openwindow_marketdetails_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postUiOpenwindowMarketdetailsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "post_ui_openwindow_marketdetails_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "post_ui_openwindow_marketdetails_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postUiOpenwindowNewmailForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "post_ui_openwindow_newmail_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "post_ui_openwindow_newmail_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postUiOpenwindowNewmailInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "post_ui_openwindow_newmail_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "post_ui_openwindow_newmail_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postUiOpenwindowNewmailParamsBody": {
      "description": "new_mail object",
      "type": "object",
      "title": "post_ui_openwindow_newmail_new_mail",
      "required": [
        "subject",
        "body",
        "recipients"
      ],
      "properties": {
        "body": {
          "description": "body string",
          "type": "string",
          "title": "post_ui_openwindow_newmail_body",
          "maxLength": 10000
        },
        "recipients": {
          "description": "recipients array",
          "type": "array",
          "title": "post_ui_openwindow_newmail_recipients",
          "maxItems": 50,
          "minItems": 1,
          "items": {
            "description": "recipient integer",
            "type": "integer",
            "format": "int32",
            "title": "post_ui_openwindow_newmail_recipient"
          }
        },
        "subject": {
          "description": "subject string",
          "type": "string",
          "title": "post_ui_openwindow_newmail_subject",
          "maxLength": 1000
        },
        "to_corp_or_alliance_id": {
          "description": "to_corp_or_alliance_id integer",
          "type": "integer",
          "format": "int32",
          "title": "post_ui_openwindow_newmail_to_corp_or_alliance_id"
        },
        "to_mailing_list_id": {
          "description": "Corporations, alliances and mailing lists are all types of mailing groups. You may only send to one mailing group, at a time, so you may fill out either this field or the to_corp_or_alliance_ids field",
          "type": "integer",
          "format": "int32",
          "title": "post_ui_openwindow_newmail_to_mailing_list_id"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postUiOpenwindowNewmailUnprocessableEntityBody": {
      "description": "Unprocessable entity",
      "type": "object",
      "title": "post_ui_openwindow_newmail_unprocessable_entity",
      "properties": {
        "error": {
          "description": "Unprocessable entity message",
          "type": "string",
          "title": "post_ui_openwindow_newmail_422_unprocessable_entity"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postUniverseNamesInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "post_universe_names_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "post_universe_names_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postUniverseNamesNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "post_universe_names_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "post_universe_names_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "postUniverseNamesOKBody": {
      "description": "200 ok array",
      "type": "array",
      "title": "post_universe_names_ok",
      "maxItems": 1000,
      "items": {
        "$ref": "#/definitions/postUniverseNamesOKBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "postUniverseNamesOKBodyItems": {
      "description": "200 ok object",
      "type": "object",
      "title": "post_universe_names_200_ok",
      "required": [
        "id",
        "name",
        "category"
      ],
      "properties": {
        "category": {
          "description": "category string",
          "type": "string",
          "title": "post_universe_names_category",
          "enum": [
            "alliance",
            "character",
            "constellation",
            "corporation",
            "inventory_type",
            "region",
            "solar_system",
            "station"
          ]
        },
        "id": {
          "description": "id integer",
          "type": "integer",
          "format": "int32",
          "title": "post_universe_names_id"
        },
        "name": {
          "description": "name string",
          "type": "string",
          "title": "post_universe_names_name"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putCharactersCharacterIdCalendarEventIdForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "put_characters_character_id_calendar_event_id_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "put_characters_character_id_calendar_event_id_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putCharactersCharacterIdCalendarEventIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "put_characters_character_id_calendar_event_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "put_characters_character_id_calendar_event_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putCharactersCharacterIdCalendarEventIdParamsBody": {
      "description": "response schema",
      "title": "put_characters_character_id_calendar_event_id_response",
      "required": [
        "response"
      ],
      "properties": {
        "response": {
          "description": "response string",
          "type": "string",
          "title": "put_characters_character_id_calendar_event_id_response",
          "enum": [
            "accepted",
            "declined",
            "tentative"
          ]
        }
      },
      "x-go-gen-location": "operations"
    },
    "putCharactersCharacterIdContactsForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "put_characters_character_id_contacts_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "put_characters_character_id_contacts_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putCharactersCharacterIdContactsInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "put_characters_character_id_contacts_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "put_characters_character_id_contacts_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putCharactersCharacterIdMailMailIdBadRequestBody": {
      "description": "Bad request",
      "type": "object",
      "title": "put_characters_character_id_mail_mail_id_bad_request",
      "properties": {
        "error": {
          "description": "Bad request message",
          "type": "string",
          "title": "put_characters_character_id_mail_mail_id_400_bad_request"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putCharactersCharacterIdMailMailIdForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "put_characters_character_id_mail_mail_id_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "put_characters_character_id_mail_mail_id_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putCharactersCharacterIdMailMailIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "put_characters_character_id_mail_mail_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "put_characters_character_id_mail_mail_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putCharactersCharacterIdMailMailIdParamsBody": {
      "description": "contents object",
      "type": "object",
      "title": "put_characters_character_id_mail_mail_id_contents",
      "properties": {
        "labels": {
          "description": "Labels to assign to the mail. Pre-existing labels are unassigned.",
          "type": "array",
          "title": "put_characters_character_id_mail_mail_id_labels",
          "maxItems": 25,
          "items": {
            "description": "label integer",
            "type": "integer",
            "format": "int64",
            "title": "put_characters_character_id_mail_mail_id_label",
            "minimum": 0,
            "uniqueItems": true
          }
        },
        "read": {
          "description": "Whether the mail is flagged as read",
          "type": "boolean",
          "title": "put_characters_character_id_mail_mail_id_read"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putCorporationsCorporationIdStructuresStructureIdForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "put_corporations_corporation_id_structures_structure_id_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "put_corporations_corporation_id_structures_structure_id_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putCorporationsCorporationIdStructuresStructureIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "put_corporations_corporation_id_structures_structure_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "put_corporations_corporation_id_structures_structure_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putCorporationsCorporationIdStructuresStructureIdParamsBody": {
      "description": "new_schedule array",
      "type": "array",
      "title": "put_corporations_corporation_id_structures_structure_id_new_schedule",
      "maxItems": 168,
      "minItems": 1,
      "items": {
        "$ref": "#/definitions/putCorporationsCorporationIdStructuresStructureIdParamsBodyItems"
      },
      "x-go-gen-location": "operations"
    },
    "putCorporationsCorporationIdStructuresStructureIdParamsBodyItems": {
      "description": "new_schedule object",
      "type": "object",
      "title": "put_corporations_corporation_id_structures_structure_id_new_schedule",
      "required": [
        "day",
        "hour"
      ],
      "properties": {
        "day": {
          "description": "Day of the week, zero-indexed to Monday",
          "type": "integer",
          "format": "int32",
          "title": "put_corporations_corporation_id_structures_structure_id_day",
          "maximum": 6,
          "minimum": 0
        },
        "hour": {
          "description": "Hour of the day evetime, zero-indexed to midnight",
          "type": "integer",
          "format": "int32",
          "title": "put_corporations_corporation_id_structures_structure_id_hour",
          "maximum": 23,
          "minimum": 0
        }
      },
      "x-go-gen-location": "operations"
    },
    "putFleetsFleetIdBadRequestBody": {
      "description": "Bad request",
      "type": "object",
      "title": "put_fleets_fleet_id_bad_request",
      "properties": {
        "error": {
          "description": "Bad request message",
          "type": "string",
          "title": "put_fleets_fleet_id_400_bad_request"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putFleetsFleetIdForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "put_fleets_fleet_id_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "put_fleets_fleet_id_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putFleetsFleetIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "put_fleets_fleet_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "put_fleets_fleet_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putFleetsFleetIdMembersMemberIdForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "put_fleets_fleet_id_members_member_id_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "put_fleets_fleet_id_members_member_id_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putFleetsFleetIdMembersMemberIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "put_fleets_fleet_id_members_member_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "put_fleets_fleet_id_members_member_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putFleetsFleetIdMembersMemberIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "put_fleets_fleet_id_members_member_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "put_fleets_fleet_id_members_member_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putFleetsFleetIdMembersMemberIdParamsBody": {
      "description": "movement object",
      "type": "object",
      "title": "put_fleets_fleet_id_members_member_id_movement",
      "required": [
        "role"
      ],
      "properties": {
        "role": {
          "description": "- If a character is moved to the ` + "`" + `fleet_commander` + "`" + ` role, neither ` + "`" + `wing_id` + "`" + ` or ` + "`" + `squad_id` + "`" + ` should be specified - If a character is moved to the ` + "`" + `wing_commander` + "`" + ` role, only ` + "`" + `wing_id` + "`" + ` should be specified - If a character is moved to the ` + "`" + `squad_commander` + "`" + ` role, both ` + "`" + `wing_id` + "`" + ` and ` + "`" + `squad_id` + "`" + ` should be specified - If a character is moved to the ` + "`" + `squad_member` + "`" + ` role, both ` + "`" + `wing_id` + "`" + ` and ` + "`" + `squad_id` + "`" + ` should be specified\n",
          "type": "string",
          "title": "put_fleets_fleet_id_members_member_id_role",
          "enum": [
            "fleet_commander",
            "wing_commander",
            "squad_commander",
            "squad_member"
          ]
        },
        "squad_id": {
          "description": "squad_id integer",
          "type": "integer",
          "format": "int64",
          "title": "put_fleets_fleet_id_members_member_id_squad_id",
          "minimum": 0
        },
        "wing_id": {
          "description": "wing_id integer",
          "type": "integer",
          "format": "int64",
          "title": "put_fleets_fleet_id_members_member_id_wing_id",
          "minimum": 0
        }
      },
      "x-go-gen-location": "operations"
    },
    "putFleetsFleetIdMembersMemberIdUnprocessableEntityBody": {
      "description": "422 unprocessable entity object",
      "type": "object",
      "title": "put_fleets_fleet_id_members_member_id_unprocessable_entity",
      "properties": {
        "error": {
          "description": "error message",
          "type": "string",
          "title": "put_fleets_fleet_id_members_member_id_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putFleetsFleetIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "put_fleets_fleet_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "put_fleets_fleet_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putFleetsFleetIdParamsBody": {
      "description": "new_settings object",
      "type": "object",
      "title": "put_fleets_fleet_id_new_settings",
      "properties": {
        "is_free_move": {
          "description": "Should free-move be enabled in the fleet",
          "type": "boolean",
          "title": "put_fleets_fleet_id_is_free_move"
        },
        "motd": {
          "description": "New fleet MOTD in CCP flavoured HTML",
          "type": "string",
          "title": "put_fleets_fleet_id_motd"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putFleetsFleetIdSquadsSquadIdForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "put_fleets_fleet_id_squads_squad_id_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "put_fleets_fleet_id_squads_squad_id_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putFleetsFleetIdSquadsSquadIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "put_fleets_fleet_id_squads_squad_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "put_fleets_fleet_id_squads_squad_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putFleetsFleetIdSquadsSquadIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "put_fleets_fleet_id_squads_squad_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "put_fleets_fleet_id_squads_squad_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putFleetsFleetIdSquadsSquadIdParamsBody": {
      "description": "naming object",
      "type": "object",
      "title": "put_fleets_fleet_id_squads_squad_id_naming",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "name string",
          "type": "string",
          "title": "put_fleets_fleet_id_squads_squad_id_name",
          "maxLength": 10
        }
      },
      "x-go-gen-location": "operations"
    },
    "putFleetsFleetIdWingsWingIdForbiddenBody": {
      "description": "Forbidden",
      "type": "object",
      "title": "put_fleets_fleet_id_wings_wing_id_forbidden",
      "properties": {
        "error": {
          "description": "Forbidden message",
          "type": "string",
          "title": "put_fleets_fleet_id_wings_wing_id_403_forbidden"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putFleetsFleetIdWingsWingIdInternalServerErrorBody": {
      "description": "Internal server error",
      "type": "object",
      "title": "put_fleets_fleet_id_wings_wing_id_internal_server_error",
      "properties": {
        "error": {
          "description": "Internal server error message",
          "type": "string",
          "title": "put_fleets_fleet_id_wings_wing_id_500_internal_server_error"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putFleetsFleetIdWingsWingIdNotFoundBody": {
      "description": "Not found",
      "type": "object",
      "title": "put_fleets_fleet_id_wings_wing_id_not_found",
      "properties": {
        "error": {
          "description": "Not found message",
          "type": "string",
          "title": "put_fleets_fleet_id_wings_wing_id_404_not_found"
        }
      },
      "x-go-gen-location": "operations"
    },
    "putFleetsFleetIdWingsWingIdParamsBody": {
      "description": "naming object",
      "type": "object",
      "title": "put_fleets_fleet_id_wings_wing_id_naming",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "name string",
          "type": "string",
          "title": "put_fleets_fleet_id_wings_wing_id_name",
          "maxLength": 10
        }
      },
      "x-go-gen-location": "operations"
    }
  },
  "securityDefinitions": {
    "evesso": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.eveonline.com/oauth/authorize",
      "scopes": {
        "esi-assets.read_assets.v1": "EVE SSO scope esi-assets.read_assets.v1",
        "esi-bookmarks.read_character_bookmarks.v1": "EVE SSO scope esi-bookmarks.read_character_bookmarks.v1",
        "esi-calendar.read_calendar_events.v1": "EVE SSO scope esi-calendar.read_calendar_events.v1",
        "esi-calendar.respond_calendar_events.v1": "EVE SSO scope esi-calendar.respond_calendar_events.v1",
        "esi-characters.read_agents_research.v1": "EVE SSO scope esi-characters.read_agents_research.v1",
        "esi-characters.read_blueprints.v1": "EVE SSO scope esi-characters.read_blueprints.v1",
        "esi-characters.read_chat_channels.v1": "EVE SSO scope esi-characters.read_chat_channels.v1",
        "esi-characters.read_contacts.v1": "EVE SSO scope esi-characters.read_contacts.v1",
        "esi-characters.read_corporation_roles.v1": "EVE SSO scope esi-characters.read_corporation_roles.v1",
        "esi-characters.read_loyalty.v1": "EVE SSO scope esi-characters.read_loyalty.v1",
        "esi-characters.read_medals.v1": "EVE SSO scope esi-characters.read_medals.v1",
        "esi-characters.read_opportunities.v1": "EVE SSO scope esi-characters.read_opportunities.v1",
        "esi-characters.read_standings.v1": "EVE SSO scope esi-characters.read_standings.v1",
        "esi-characters.write_contacts.v1": "EVE SSO scope esi-characters.write_contacts.v1",
        "esi-clones.read_clones.v1": "EVE SSO scope esi-clones.read_clones.v1",
        "esi-corporations.read_corporation_membership.v1": "EVE SSO scope esi-corporations.read_corporation_membership.v1",
        "esi-corporations.read_structures.v1": "EVE SSO scope esi-corporations.read_structures.v1",
        "esi-corporations.write_structures.v1": "EVE SSO scope esi-corporations.write_structures.v1",
        "esi-fittings.read_fittings.v1": "EVE SSO scope esi-fittings.read_fittings.v1",
        "esi-fittings.write_fittings.v1": "EVE SSO scope esi-fittings.write_fittings.v1",
        "esi-fleets.read_fleet.v1": "EVE SSO scope esi-fleets.read_fleet.v1",
        "esi-fleets.write_fleet.v1": "EVE SSO scope esi-fleets.write_fleet.v1",
        "esi-industry.read_character_jobs.v1": "EVE SSO scope esi-industry.read_character_jobs.v1",
        "esi-killmails.read_killmails.v1": "EVE SSO scope esi-killmails.read_killmails.v1",
        "esi-location.read_location.v1": "EVE SSO scope esi-location.read_location.v1",
        "esi-location.read_online.v1": "EVE SSO scope esi-location.read_online.v1",
        "esi-location.read_ship_type.v1": "EVE SSO scope esi-location.read_ship_type.v1",
        "esi-mail.organize_mail.v1": "EVE SSO scope esi-mail.organize_mail.v1",
        "esi-mail.read_mail.v1": "EVE SSO scope esi-mail.read_mail.v1",
        "esi-mail.send_mail.v1": "EVE SSO scope esi-mail.send_mail.v1",
        "esi-markets.read_character_orders.v1": "EVE SSO scope esi-markets.read_character_orders.v1",
        "esi-markets.structure_markets.v1": "EVE SSO scope esi-markets.structure_markets.v1",
        "esi-planets.manage_planets.v1": "EVE SSO scope esi-planets.manage_planets.v1",
        "esi-search.search_structures.v1": "EVE SSO scope esi-search.search_structures.v1",
        "esi-skills.read_skillqueue.v1": "EVE SSO scope esi-skills.read_skillqueue.v1",
        "esi-skills.read_skills.v1": "EVE SSO scope esi-skills.read_skills.v1",
        "esi-ui.open_window.v1": "EVE SSO scope esi-ui.open_window.v1",
        "esi-ui.write_waypoint.v1": "EVE SSO scope esi-ui.write_waypoint.v1",
        "esi-universe.read_structures.v1": "EVE SSO scope esi-universe.read_structures.v1",
        "esi-wallet.read_character_wallet.v1": "EVE SSO scope esi-wallet.read_character_wallet.v1"
      }
    }
  }
}`))
}
