package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSearchParams creates a new GetSearchParams object
// with the default values initialized.
func NewGetSearchParams() GetSearchParams {
	var (
		datasourceDefault = string("tranquility")
		languageDefault   = string("en-us")
		strictDefault     = bool(false)
	)
	return GetSearchParams{
		Datasource: &datasourceDefault,

		Language: &languageDefault,

		Strict: &strictDefault,
	}
}

// GetSearchParams contains all the bound params for the get search operation
// typically these are obtained from a http.Request
//
// swagger:parameters get_search
type GetSearchParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*Client identifier, takes precedence over User-Agent
	  In: header
	*/
	XUserAgent *string
	/*Type of entities to search for
	  Required: true
	  Max Items: 10
	  Min Items: 1
	  Unique: true
	  In: query
	*/
	Categories []string
	/*The server name you would like data from
	  In: query
	  Default: "tranquility"
	*/
	Datasource *string
	/*Search locale
	  In: query
	  Default: "en-us"
	*/
	Language *string
	/*The string to search on
	  Required: true
	  Min Length: 3
	  In: query
	*/
	Search string
	/*Whether the search should be a strict match
	  In: query
	  Default: false
	*/
	Strict *bool
	/*Client identifier, takes precedence over headers
	  In: query
	*/
	UserAgent *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetSearchParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := o.bindXUserAgent(r.Header[http.CanonicalHeaderKey("X-User-Agent")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	qCategories, qhkCategories, _ := qs.GetOK("categories")
	if err := o.bindCategories(qCategories, qhkCategories, route.Formats); err != nil {
		res = append(res, err)
	}

	qDatasource, qhkDatasource, _ := qs.GetOK("datasource")
	if err := o.bindDatasource(qDatasource, qhkDatasource, route.Formats); err != nil {
		res = append(res, err)
	}

	qLanguage, qhkLanguage, _ := qs.GetOK("language")
	if err := o.bindLanguage(qLanguage, qhkLanguage, route.Formats); err != nil {
		res = append(res, err)
	}

	qSearch, qhkSearch, _ := qs.GetOK("search")
	if err := o.bindSearch(qSearch, qhkSearch, route.Formats); err != nil {
		res = append(res, err)
	}

	qStrict, qhkStrict, _ := qs.GetOK("strict")
	if err := o.bindStrict(qStrict, qhkStrict, route.Formats); err != nil {
		res = append(res, err)
	}

	qUserAgent, qhkUserAgent, _ := qs.GetOK("user_agent")
	if err := o.bindUserAgent(qUserAgent, qhkUserAgent, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchParams) bindXUserAgent(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.XUserAgent = &raw

	return nil
}

func (o *GetSearchParams) bindCategories(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("categories", "query")
	}

	var qvCategories string
	if len(rawData) > 0 {
		qvCategories = rawData[len(rawData)-1]
	}

	categoriesIC := swag.SplitByFormat(qvCategories, "")

	if len(categoriesIC) == 0 {
		return errors.Required("categories", "query")
	}

	var categoriesIR []string
	for i, categoriesIV := range categoriesIC {
		categoriesI := categoriesIV

		if err := validate.Enum(fmt.Sprintf("%s.%v", "categories", i), "query", categoriesI, []interface{}{"agent", "alliance", "character", "constellation", "corporation", "faction", "inventorytype", "region", "solarsystem", "station", "wormhole"}); err != nil {
			return err
		}

		categoriesIR = append(categoriesIR, categoriesI)
	}

	o.Categories = categoriesIR
	if err := o.validateCategories(formats); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchParams) validateCategories(formats strfmt.Registry) error {

	categoriesSize := int64(len(o.Categories))

	if err := validate.MinItems("categories", "query", categoriesSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("categories", "query", categoriesSize, 10); err != nil {
		return err
	}

	if err := validate.UniqueItems("categories", "query", o.Categories); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchParams) bindDatasource(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		var datasourceDefault string = string("tranquility")
		o.Datasource = &datasourceDefault
		return nil
	}

	o.Datasource = &raw

	if err := o.validateDatasource(formats); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchParams) validateDatasource(formats strfmt.Registry) error {

	if err := validate.Enum("datasource", "query", *o.Datasource, []interface{}{"tranquility", "singularity"}); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchParams) bindLanguage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		var languageDefault string = string("en-us")
		o.Language = &languageDefault
		return nil
	}

	o.Language = &raw

	if err := o.validateLanguage(formats); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchParams) validateLanguage(formats strfmt.Registry) error {

	if err := validate.Enum("language", "query", *o.Language, []interface{}{"en-us", "de", "fr", "ru", "ja", "zh"}); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchParams) bindSearch(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("search", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("search", "query", raw); err != nil {
		return err
	}

	o.Search = raw

	if err := o.validateSearch(formats); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchParams) validateSearch(formats strfmt.Registry) error {

	if err := validate.MinLength("search", "query", o.Search, 3); err != nil {
		return err
	}

	return nil
}

func (o *GetSearchParams) bindStrict(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		var strictDefault bool = bool(false)
		o.Strict = &strictDefault
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("strict", "query", "bool", raw)
	}
	o.Strict = &value

	return nil
}

func (o *GetSearchParams) bindUserAgent(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.UserAgent = &raw

	return nil
}
