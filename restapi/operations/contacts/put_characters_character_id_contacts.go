package contacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutCharactersCharacterIDContactsHandlerFunc turns a function with the right signature into a put characters character id contacts handler
type PutCharactersCharacterIDContactsHandlerFunc func(PutCharactersCharacterIDContactsParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PutCharactersCharacterIDContactsHandlerFunc) Handle(params PutCharactersCharacterIDContactsParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PutCharactersCharacterIDContactsHandler interface for that can handle valid put characters character id contacts params
type PutCharactersCharacterIDContactsHandler interface {
	Handle(PutCharactersCharacterIDContactsParams, interface{}) middleware.Responder
}

// NewPutCharactersCharacterIDContacts creates a new http.Handler for the put characters character id contacts operation
func NewPutCharactersCharacterIDContacts(ctx *middleware.Context, handler PutCharactersCharacterIDContactsHandler) *PutCharactersCharacterIDContacts {
	return &PutCharactersCharacterIDContacts{Context: ctx, Handler: handler}
}

/*PutCharactersCharacterIDContacts swagger:route PUT /characters/{character_id}/contacts/ Contacts putCharactersCharacterIdContacts

Edit contacts

Bulk edit contacts with same settings

---

Alternate route: `/v1/characters/{character_id}/contacts/`

Alternate route: `/legacy/characters/{character_id}/contacts/`

Alternate route: `/dev/characters/{character_id}/contacts/`


*/
type PutCharactersCharacterIDContacts struct {
	Context *middleware.Context
	Handler PutCharactersCharacterIDContactsHandler
}

func (o *PutCharactersCharacterIDContacts) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPutCharactersCharacterIDContactsParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
