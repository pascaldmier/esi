package wallet

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetCharactersCharacterIDWalletsHandlerFunc turns a function with the right signature into a get characters character id wallets handler
type GetCharactersCharacterIDWalletsHandlerFunc func(GetCharactersCharacterIDWalletsParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCharactersCharacterIDWalletsHandlerFunc) Handle(params GetCharactersCharacterIDWalletsParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetCharactersCharacterIDWalletsHandler interface for that can handle valid get characters character id wallets params
type GetCharactersCharacterIDWalletsHandler interface {
	Handle(GetCharactersCharacterIDWalletsParams, interface{}) middleware.Responder
}

// NewGetCharactersCharacterIDWallets creates a new http.Handler for the get characters character id wallets operation
func NewGetCharactersCharacterIDWallets(ctx *middleware.Context, handler GetCharactersCharacterIDWalletsHandler) *GetCharactersCharacterIDWallets {
	return &GetCharactersCharacterIDWallets{Context: ctx, Handler: handler}
}

/*GetCharactersCharacterIDWallets swagger:route GET /characters/{character_id}/wallets/ Wallet getCharactersCharacterIdWallets

List wallets and balances

List your wallets and their balances. Characters typically have only one wallet, with wallet_id 1000 being the master wallet.

---

Alternate route: `/v1/characters/{character_id}/wallets/`

Alternate route: `/legacy/characters/{character_id}/wallets/`

Alternate route: `/dev/characters/{character_id}/wallets/`


---

This route is cached for up to 120 seconds

*/
type GetCharactersCharacterIDWallets struct {
	Context *middleware.Context
	Handler GetCharactersCharacterIDWalletsHandler
}

func (o *GetCharactersCharacterIDWallets) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetCharactersCharacterIDWalletsParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
