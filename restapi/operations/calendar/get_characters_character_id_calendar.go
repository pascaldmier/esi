package calendar

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetCharactersCharacterIDCalendarHandlerFunc turns a function with the right signature into a get characters character id calendar handler
type GetCharactersCharacterIDCalendarHandlerFunc func(GetCharactersCharacterIDCalendarParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCharactersCharacterIDCalendarHandlerFunc) Handle(params GetCharactersCharacterIDCalendarParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetCharactersCharacterIDCalendarHandler interface for that can handle valid get characters character id calendar params
type GetCharactersCharacterIDCalendarHandler interface {
	Handle(GetCharactersCharacterIDCalendarParams, interface{}) middleware.Responder
}

// NewGetCharactersCharacterIDCalendar creates a new http.Handler for the get characters character id calendar operation
func NewGetCharactersCharacterIDCalendar(ctx *middleware.Context, handler GetCharactersCharacterIDCalendarHandler) *GetCharactersCharacterIDCalendar {
	return &GetCharactersCharacterIDCalendar{Context: ctx, Handler: handler}
}

/*GetCharactersCharacterIDCalendar swagger:route GET /characters/{character_id}/calendar/ Calendar getCharactersCharacterIdCalendar

List calendar event summaries

Get 50 event summaries from the calendar. If no event ID is given, the resource will return the next 50 chronological event summaries from now. If an event ID is specified, it will return the next 50 chronological event summaries from after that event.

---

Alternate route: `/v1/characters/{character_id}/calendar/`

Alternate route: `/legacy/characters/{character_id}/calendar/`

Alternate route: `/dev/characters/{character_id}/calendar/`


---

This route is cached for up to 5 seconds

*/
type GetCharactersCharacterIDCalendar struct {
	Context *middleware.Context
	Handler GetCharactersCharacterIDCalendarHandler
}

func (o *GetCharactersCharacterIDCalendar) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetCharactersCharacterIDCalendarParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
