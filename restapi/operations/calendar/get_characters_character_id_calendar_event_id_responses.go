package calendar

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/pascaldmier/esi/models"
)

// GetCharactersCharacterIDCalendarEventIDOKCode is the HTTP code returned for type GetCharactersCharacterIDCalendarEventIDOK
const GetCharactersCharacterIDCalendarEventIDOKCode int = 200

/*GetCharactersCharacterIDCalendarEventIDOK Full details of a specific event

swagger:response getCharactersCharacterIdCalendarEventIdOK
*/
type GetCharactersCharacterIDCalendarEventIDOK struct {
	/*The caching mechanism used
	  Required: true
	*/
	CacheControl string `json:"Cache-Control"`
	/*RFC7231 formatted datetime string
	  Required: true
	*/
	Expires string `json:"Expires"`
	/*RFC7231 formatted datetime string
	  Required: true
	*/
	LastModified string `json:"Last-Modified"`

	/*
	  In: Body
	*/
	Payload *models.GetCharactersCharacterIDCalendarEventIDOKBody `json:"body,omitempty"`
}

// NewGetCharactersCharacterIDCalendarEventIDOK creates GetCharactersCharacterIDCalendarEventIDOK with default headers values
func NewGetCharactersCharacterIDCalendarEventIDOK() *GetCharactersCharacterIDCalendarEventIDOK {
	return &GetCharactersCharacterIDCalendarEventIDOK{}
}

// WithCacheControl adds the cacheControl to the get characters character Id calendar event Id o k response
func (o *GetCharactersCharacterIDCalendarEventIDOK) WithCacheControl(cacheControl string) *GetCharactersCharacterIDCalendarEventIDOK {
	o.CacheControl = cacheControl
	return o
}

// SetCacheControl sets the cacheControl to the get characters character Id calendar event Id o k response
func (o *GetCharactersCharacterIDCalendarEventIDOK) SetCacheControl(cacheControl string) {
	o.CacheControl = cacheControl
}

// WithExpires adds the expires to the get characters character Id calendar event Id o k response
func (o *GetCharactersCharacterIDCalendarEventIDOK) WithExpires(expires string) *GetCharactersCharacterIDCalendarEventIDOK {
	o.Expires = expires
	return o
}

// SetExpires sets the expires to the get characters character Id calendar event Id o k response
func (o *GetCharactersCharacterIDCalendarEventIDOK) SetExpires(expires string) {
	o.Expires = expires
}

// WithLastModified adds the lastModified to the get characters character Id calendar event Id o k response
func (o *GetCharactersCharacterIDCalendarEventIDOK) WithLastModified(lastModified string) *GetCharactersCharacterIDCalendarEventIDOK {
	o.LastModified = lastModified
	return o
}

// SetLastModified sets the lastModified to the get characters character Id calendar event Id o k response
func (o *GetCharactersCharacterIDCalendarEventIDOK) SetLastModified(lastModified string) {
	o.LastModified = lastModified
}

// WithPayload adds the payload to the get characters character Id calendar event Id o k response
func (o *GetCharactersCharacterIDCalendarEventIDOK) WithPayload(payload *models.GetCharactersCharacterIDCalendarEventIDOKBody) *GetCharactersCharacterIDCalendarEventIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get characters character Id calendar event Id o k response
func (o *GetCharactersCharacterIDCalendarEventIDOK) SetPayload(payload *models.GetCharactersCharacterIDCalendarEventIDOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCharactersCharacterIDCalendarEventIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Cache-Control

	cacheControl := o.CacheControl
	if cacheControl != "" {
		rw.Header().Set("Cache-Control", cacheControl)
	}

	// response header Expires

	expires := o.Expires
	if expires != "" {
		rw.Header().Set("Expires", expires)
	}

	// response header Last-Modified

	lastModified := o.LastModified
	if lastModified != "" {
		rw.Header().Set("Last-Modified", lastModified)
	}

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCharactersCharacterIDCalendarEventIDForbiddenCode is the HTTP code returned for type GetCharactersCharacterIDCalendarEventIDForbidden
const GetCharactersCharacterIDCalendarEventIDForbiddenCode int = 403

/*GetCharactersCharacterIDCalendarEventIDForbidden Forbidden

swagger:response getCharactersCharacterIdCalendarEventIdForbidden
*/
type GetCharactersCharacterIDCalendarEventIDForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.GetCharactersCharacterIDCalendarEventIDForbiddenBody `json:"body,omitempty"`
}

// NewGetCharactersCharacterIDCalendarEventIDForbidden creates GetCharactersCharacterIDCalendarEventIDForbidden with default headers values
func NewGetCharactersCharacterIDCalendarEventIDForbidden() *GetCharactersCharacterIDCalendarEventIDForbidden {
	return &GetCharactersCharacterIDCalendarEventIDForbidden{}
}

// WithPayload adds the payload to the get characters character Id calendar event Id forbidden response
func (o *GetCharactersCharacterIDCalendarEventIDForbidden) WithPayload(payload *models.GetCharactersCharacterIDCalendarEventIDForbiddenBody) *GetCharactersCharacterIDCalendarEventIDForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get characters character Id calendar event Id forbidden response
func (o *GetCharactersCharacterIDCalendarEventIDForbidden) SetPayload(payload *models.GetCharactersCharacterIDCalendarEventIDForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCharactersCharacterIDCalendarEventIDForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCharactersCharacterIDCalendarEventIDInternalServerErrorCode is the HTTP code returned for type GetCharactersCharacterIDCalendarEventIDInternalServerError
const GetCharactersCharacterIDCalendarEventIDInternalServerErrorCode int = 500

/*GetCharactersCharacterIDCalendarEventIDInternalServerError Internal server error

swagger:response getCharactersCharacterIdCalendarEventIdInternalServerError
*/
type GetCharactersCharacterIDCalendarEventIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.GetCharactersCharacterIDCalendarEventIDInternalServerErrorBody `json:"body,omitempty"`
}

// NewGetCharactersCharacterIDCalendarEventIDInternalServerError creates GetCharactersCharacterIDCalendarEventIDInternalServerError with default headers values
func NewGetCharactersCharacterIDCalendarEventIDInternalServerError() *GetCharactersCharacterIDCalendarEventIDInternalServerError {
	return &GetCharactersCharacterIDCalendarEventIDInternalServerError{}
}

// WithPayload adds the payload to the get characters character Id calendar event Id internal server error response
func (o *GetCharactersCharacterIDCalendarEventIDInternalServerError) WithPayload(payload *models.GetCharactersCharacterIDCalendarEventIDInternalServerErrorBody) *GetCharactersCharacterIDCalendarEventIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get characters character Id calendar event Id internal server error response
func (o *GetCharactersCharacterIDCalendarEventIDInternalServerError) SetPayload(payload *models.GetCharactersCharacterIDCalendarEventIDInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCharactersCharacterIDCalendarEventIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
