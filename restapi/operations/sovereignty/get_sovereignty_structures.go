package sovereignty

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetSovereigntyStructuresHandlerFunc turns a function with the right signature into a get sovereignty structures handler
type GetSovereigntyStructuresHandlerFunc func(GetSovereigntyStructuresParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSovereigntyStructuresHandlerFunc) Handle(params GetSovereigntyStructuresParams) middleware.Responder {
	return fn(params)
}

// GetSovereigntyStructuresHandler interface for that can handle valid get sovereignty structures params
type GetSovereigntyStructuresHandler interface {
	Handle(GetSovereigntyStructuresParams) middleware.Responder
}

// NewGetSovereigntyStructures creates a new http.Handler for the get sovereignty structures operation
func NewGetSovereigntyStructures(ctx *middleware.Context, handler GetSovereigntyStructuresHandler) *GetSovereigntyStructures {
	return &GetSovereigntyStructures{Context: ctx, Handler: handler}
}

/*GetSovereigntyStructures swagger:route GET /sovereignty/structures/ Sovereignty getSovereigntyStructures

List sovereignty structures

Shows sovereignty data for structures.

---

Alternate route: `/v1/sovereignty/structures/`

Alternate route: `/legacy/sovereignty/structures/`

Alternate route: `/dev/sovereignty/structures/`


---

This route is cached for up to 120 seconds

*/
type GetSovereigntyStructures struct {
	Context *middleware.Context
	Handler GetSovereigntyStructuresHandler
}

func (o *GetSovereigntyStructures) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetSovereigntyStructuresParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
