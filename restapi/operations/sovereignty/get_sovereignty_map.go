package sovereignty

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetSovereigntyMapHandlerFunc turns a function with the right signature into a get sovereignty map handler
type GetSovereigntyMapHandlerFunc func(GetSovereigntyMapParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSovereigntyMapHandlerFunc) Handle(params GetSovereigntyMapParams) middleware.Responder {
	return fn(params)
}

// GetSovereigntyMapHandler interface for that can handle valid get sovereignty map params
type GetSovereigntyMapHandler interface {
	Handle(GetSovereigntyMapParams) middleware.Responder
}

// NewGetSovereigntyMap creates a new http.Handler for the get sovereignty map operation
func NewGetSovereigntyMap(ctx *middleware.Context, handler GetSovereigntyMapHandler) *GetSovereigntyMap {
	return &GetSovereigntyMap{Context: ctx, Handler: handler}
}

/*GetSovereigntyMap swagger:route GET /sovereignty/map/ Sovereignty getSovereigntyMap

List sovereignty of systems

Shows sovereignty information for solar systems

---

Alternate route: `/v1/sovereignty/map/`

Alternate route: `/legacy/sovereignty/map/`

Alternate route: `/dev/sovereignty/map/`


---

This route is cached for up to 3600 seconds

*/
type GetSovereigntyMap struct {
	Context *middleware.Context
	Handler GetSovereigntyMapHandler
}

func (o *GetSovereigntyMap) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetSovereigntyMapParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
