package mail

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteCharactersCharacterIDMailLabelsLabelIDHandlerFunc turns a function with the right signature into a delete characters character id mail labels label id handler
type DeleteCharactersCharacterIDMailLabelsLabelIDHandlerFunc func(DeleteCharactersCharacterIDMailLabelsLabelIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteCharactersCharacterIDMailLabelsLabelIDHandlerFunc) Handle(params DeleteCharactersCharacterIDMailLabelsLabelIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DeleteCharactersCharacterIDMailLabelsLabelIDHandler interface for that can handle valid delete characters character id mail labels label id params
type DeleteCharactersCharacterIDMailLabelsLabelIDHandler interface {
	Handle(DeleteCharactersCharacterIDMailLabelsLabelIDParams, interface{}) middleware.Responder
}

// NewDeleteCharactersCharacterIDMailLabelsLabelID creates a new http.Handler for the delete characters character id mail labels label id operation
func NewDeleteCharactersCharacterIDMailLabelsLabelID(ctx *middleware.Context, handler DeleteCharactersCharacterIDMailLabelsLabelIDHandler) *DeleteCharactersCharacterIDMailLabelsLabelID {
	return &DeleteCharactersCharacterIDMailLabelsLabelID{Context: ctx, Handler: handler}
}

/*DeleteCharactersCharacterIDMailLabelsLabelID swagger:route DELETE /characters/{character_id}/mail/labels/{label_id}/ Mail deleteCharactersCharacterIdMailLabelsLabelId

Delete a mail label

Delete a mail label

---

Alternate route: `/v1/characters/{character_id}/mail/labels/{label_id}/`

Alternate route: `/legacy/characters/{character_id}/mail/labels/{label_id}/`

Alternate route: `/dev/characters/{character_id}/mail/labels/{label_id}/`


*/
type DeleteCharactersCharacterIDMailLabelsLabelID struct {
	Context *middleware.Context
	Handler DeleteCharactersCharacterIDMailLabelsLabelIDHandler
}

func (o *DeleteCharactersCharacterIDMailLabelsLabelID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDeleteCharactersCharacterIDMailLabelsLabelIDParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
