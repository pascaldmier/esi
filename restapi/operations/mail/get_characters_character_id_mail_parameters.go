package mail

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCharactersCharacterIDMailParams creates a new GetCharactersCharacterIDMailParams object
// with the default values initialized.
func NewGetCharactersCharacterIDMailParams() GetCharactersCharacterIDMailParams {
	var (
		datasourceDefault = string("tranquility")
	)
	return GetCharactersCharacterIDMailParams{
		Datasource: &datasourceDefault,
	}
}

// GetCharactersCharacterIDMailParams contains all the bound params for the get characters character id mail operation
// typically these are obtained from a http.Request
//
// swagger:parameters get_characters_character_id_mail
type GetCharactersCharacterIDMailParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*Client identifier, takes precedence over User-Agent
	  In: header
	*/
	XUserAgent *string
	/*An EVE character ID
	  Required: true
	  In: path
	*/
	CharacterID int32
	/*The server name you would like data from
	  In: query
	  Default: "tranquility"
	*/
	Datasource *string
	/*Fetch only mails that match one or more of the given labels
	  Max Items: 25
	  Min Items: 1
	  Unique: true
	  In: query
	*/
	Labels []int64
	/*List only mail with an ID lower than the given ID, if present
	  In: query
	*/
	LastMailID *int32
	/*Access token to use, if preferred over a header
	  In: query
	*/
	Token *string
	/*Client identifier, takes precedence over headers
	  In: query
	*/
	UserAgent *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetCharactersCharacterIDMailParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := o.bindXUserAgent(r.Header[http.CanonicalHeaderKey("X-User-Agent")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	rCharacterID, rhkCharacterID, _ := route.Params.GetOK("character_id")
	if err := o.bindCharacterID(rCharacterID, rhkCharacterID, route.Formats); err != nil {
		res = append(res, err)
	}

	qDatasource, qhkDatasource, _ := qs.GetOK("datasource")
	if err := o.bindDatasource(qDatasource, qhkDatasource, route.Formats); err != nil {
		res = append(res, err)
	}

	qLabels, qhkLabels, _ := qs.GetOK("labels")
	if err := o.bindLabels(qLabels, qhkLabels, route.Formats); err != nil {
		res = append(res, err)
	}

	qLastMailID, qhkLastMailID, _ := qs.GetOK("last_mail_id")
	if err := o.bindLastMailID(qLastMailID, qhkLastMailID, route.Formats); err != nil {
		res = append(res, err)
	}

	qToken, qhkToken, _ := qs.GetOK("token")
	if err := o.bindToken(qToken, qhkToken, route.Formats); err != nil {
		res = append(res, err)
	}

	qUserAgent, qhkUserAgent, _ := qs.GetOK("user_agent")
	if err := o.bindUserAgent(qUserAgent, qhkUserAgent, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCharactersCharacterIDMailParams) bindXUserAgent(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.XUserAgent = &raw

	return nil
}

func (o *GetCharactersCharacterIDMailParams) bindCharacterID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("character_id", "path", "int32", raw)
	}
	o.CharacterID = value

	return nil
}

func (o *GetCharactersCharacterIDMailParams) bindDatasource(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		var datasourceDefault string = string("tranquility")
		o.Datasource = &datasourceDefault
		return nil
	}

	o.Datasource = &raw

	if err := o.validateDatasource(formats); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDMailParams) validateDatasource(formats strfmt.Registry) error {

	if err := validate.Enum("datasource", "query", *o.Datasource, []interface{}{"tranquility", "singularity"}); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDMailParams) bindLabels(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvLabels string
	if len(rawData) > 0 {
		qvLabels = rawData[len(rawData)-1]
	}

	labelsIC := swag.SplitByFormat(qvLabels, "")

	if len(labelsIC) == 0 {
		return nil
	}

	var labelsIR []int64
	for i, labelsIV := range labelsIC {
		labelsI, err := swag.ConvertInt64(labelsIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "labels", i), "query", "int64", labelsI)
		}

		if err := validate.MinimumInt(fmt.Sprintf("%s.%v", "labels", i), "query", int64(labelsI), 0, false); err != nil {
			return err
		}

		labelsIR = append(labelsIR, labelsI)
	}

	o.Labels = labelsIR
	if err := o.validateLabels(formats); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDMailParams) validateLabels(formats strfmt.Registry) error {

	labelsSize := int64(len(o.Labels))

	if err := validate.MinItems("labels", "query", labelsSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("labels", "query", labelsSize, 25); err != nil {
		return err
	}

	if err := validate.UniqueItems("labels", "query", o.Labels); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersCharacterIDMailParams) bindLastMailID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("last_mail_id", "query", "int32", raw)
	}
	o.LastMailID = &value

	return nil
}

func (o *GetCharactersCharacterIDMailParams) bindToken(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Token = &raw

	return nil
}

func (o *GetCharactersCharacterIDMailParams) bindUserAgent(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.UserAgent = &raw

	return nil
}
