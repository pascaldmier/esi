package mail

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetCharactersCharacterIDMailMailIDHandlerFunc turns a function with the right signature into a get characters character id mail mail id handler
type GetCharactersCharacterIDMailMailIDHandlerFunc func(GetCharactersCharacterIDMailMailIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCharactersCharacterIDMailMailIDHandlerFunc) Handle(params GetCharactersCharacterIDMailMailIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetCharactersCharacterIDMailMailIDHandler interface for that can handle valid get characters character id mail mail id params
type GetCharactersCharacterIDMailMailIDHandler interface {
	Handle(GetCharactersCharacterIDMailMailIDParams, interface{}) middleware.Responder
}

// NewGetCharactersCharacterIDMailMailID creates a new http.Handler for the get characters character id mail mail id operation
func NewGetCharactersCharacterIDMailMailID(ctx *middleware.Context, handler GetCharactersCharacterIDMailMailIDHandler) *GetCharactersCharacterIDMailMailID {
	return &GetCharactersCharacterIDMailMailID{Context: ctx, Handler: handler}
}

/*GetCharactersCharacterIDMailMailID swagger:route GET /characters/{character_id}/mail/{mail_id}/ Mail getCharactersCharacterIdMailMailId

Return a mail

Return the contents of an EVE mail

---

Alternate route: `/v1/characters/{character_id}/mail/{mail_id}/`

Alternate route: `/legacy/characters/{character_id}/mail/{mail_id}/`

Alternate route: `/dev/characters/{character_id}/mail/{mail_id}/`


---

This route is cached for up to 30 seconds

*/
type GetCharactersCharacterIDMailMailID struct {
	Context *middleware.Context
	Handler GetCharactersCharacterIDMailMailIDHandler
}

func (o *GetCharactersCharacterIDMailMailID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetCharactersCharacterIDMailMailIDParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
