package mail

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetCharactersCharacterIDMailLabelsHandlerFunc turns a function with the right signature into a get characters character id mail labels handler
type GetCharactersCharacterIDMailLabelsHandlerFunc func(GetCharactersCharacterIDMailLabelsParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCharactersCharacterIDMailLabelsHandlerFunc) Handle(params GetCharactersCharacterIDMailLabelsParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetCharactersCharacterIDMailLabelsHandler interface for that can handle valid get characters character id mail labels params
type GetCharactersCharacterIDMailLabelsHandler interface {
	Handle(GetCharactersCharacterIDMailLabelsParams, interface{}) middleware.Responder
}

// NewGetCharactersCharacterIDMailLabels creates a new http.Handler for the get characters character id mail labels operation
func NewGetCharactersCharacterIDMailLabels(ctx *middleware.Context, handler GetCharactersCharacterIDMailLabelsHandler) *GetCharactersCharacterIDMailLabels {
	return &GetCharactersCharacterIDMailLabels{Context: ctx, Handler: handler}
}

/*GetCharactersCharacterIDMailLabels swagger:route GET /characters/{character_id}/mail/labels/ Mail getCharactersCharacterIdMailLabels

Get mail labels and unread counts

Return a list of the users mail labels, unread counts for each label and a total unread count.

---

Alternate route: `/v3/characters/{character_id}/mail/labels/`

Alternate route: `/dev/characters/{character_id}/mail/labels/`


---

This route is cached for up to 30 seconds

*/
type GetCharactersCharacterIDMailLabels struct {
	Context *middleware.Context
	Handler GetCharactersCharacterIDMailLabelsHandler
}

func (o *GetCharactersCharacterIDMailLabels) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetCharactersCharacterIDMailLabelsParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
