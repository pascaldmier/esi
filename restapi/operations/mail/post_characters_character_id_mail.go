package mail

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostCharactersCharacterIDMailHandlerFunc turns a function with the right signature into a post characters character id mail handler
type PostCharactersCharacterIDMailHandlerFunc func(PostCharactersCharacterIDMailParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostCharactersCharacterIDMailHandlerFunc) Handle(params PostCharactersCharacterIDMailParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostCharactersCharacterIDMailHandler interface for that can handle valid post characters character id mail params
type PostCharactersCharacterIDMailHandler interface {
	Handle(PostCharactersCharacterIDMailParams, interface{}) middleware.Responder
}

// NewPostCharactersCharacterIDMail creates a new http.Handler for the post characters character id mail operation
func NewPostCharactersCharacterIDMail(ctx *middleware.Context, handler PostCharactersCharacterIDMailHandler) *PostCharactersCharacterIDMail {
	return &PostCharactersCharacterIDMail{Context: ctx, Handler: handler}
}

/*PostCharactersCharacterIDMail swagger:route POST /characters/{character_id}/mail/ Mail postCharactersCharacterIdMail

Send a new mail

Create and send a new mail

---

Alternate route: `/v1/characters/{character_id}/mail/`

Alternate route: `/legacy/characters/{character_id}/mail/`

Alternate route: `/dev/characters/{character_id}/mail/`


*/
type PostCharactersCharacterIDMail struct {
	Context *middleware.Context
	Handler PostCharactersCharacterIDMailHandler
}

func (o *PostCharactersCharacterIDMail) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostCharactersCharacterIDMailParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
