package mail

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetCharactersCharacterIDMailHandlerFunc turns a function with the right signature into a get characters character id mail handler
type GetCharactersCharacterIDMailHandlerFunc func(GetCharactersCharacterIDMailParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCharactersCharacterIDMailHandlerFunc) Handle(params GetCharactersCharacterIDMailParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetCharactersCharacterIDMailHandler interface for that can handle valid get characters character id mail params
type GetCharactersCharacterIDMailHandler interface {
	Handle(GetCharactersCharacterIDMailParams, interface{}) middleware.Responder
}

// NewGetCharactersCharacterIDMail creates a new http.Handler for the get characters character id mail operation
func NewGetCharactersCharacterIDMail(ctx *middleware.Context, handler GetCharactersCharacterIDMailHandler) *GetCharactersCharacterIDMail {
	return &GetCharactersCharacterIDMail{Context: ctx, Handler: handler}
}

/*GetCharactersCharacterIDMail swagger:route GET /characters/{character_id}/mail/ Mail getCharactersCharacterIdMail

Return mail headers

Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards.

---

Alternate route: `/v1/characters/{character_id}/mail/`

Alternate route: `/legacy/characters/{character_id}/mail/`

Alternate route: `/dev/characters/{character_id}/mail/`


---

This route is cached for up to 30 seconds

*/
type GetCharactersCharacterIDMail struct {
	Context *middleware.Context
	Handler GetCharactersCharacterIDMailHandler
}

func (o *GetCharactersCharacterIDMail) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetCharactersCharacterIDMailParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
