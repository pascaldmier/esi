package planetary_interaction

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetCharactersCharacterIDPlanetsHandlerFunc turns a function with the right signature into a get characters character id planets handler
type GetCharactersCharacterIDPlanetsHandlerFunc func(GetCharactersCharacterIDPlanetsParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCharactersCharacterIDPlanetsHandlerFunc) Handle(params GetCharactersCharacterIDPlanetsParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetCharactersCharacterIDPlanetsHandler interface for that can handle valid get characters character id planets params
type GetCharactersCharacterIDPlanetsHandler interface {
	Handle(GetCharactersCharacterIDPlanetsParams, interface{}) middleware.Responder
}

// NewGetCharactersCharacterIDPlanets creates a new http.Handler for the get characters character id planets operation
func NewGetCharactersCharacterIDPlanets(ctx *middleware.Context, handler GetCharactersCharacterIDPlanetsHandler) *GetCharactersCharacterIDPlanets {
	return &GetCharactersCharacterIDPlanets{Context: ctx, Handler: handler}
}

/*GetCharactersCharacterIDPlanets swagger:route GET /characters/{character_id}/planets/ Planetary Interaction getCharactersCharacterIdPlanets

Get colonies

Returns a list of all planetary colonies owned by a character.

---

Alternate route: `/v1/characters/{character_id}/planets/`

Alternate route: `/legacy/characters/{character_id}/planets/`

Alternate route: `/dev/characters/{character_id}/planets/`


---

This route is cached for up to 600 seconds

*/
type GetCharactersCharacterIDPlanets struct {
	Context *middleware.Context
	Handler GetCharactersCharacterIDPlanetsHandler
}

func (o *GetCharactersCharacterIDPlanets) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetCharactersCharacterIDPlanetsParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
