package alliance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetAlliancesAllianceIDCorporationsHandlerFunc turns a function with the right signature into a get alliances alliance id corporations handler
type GetAlliancesAllianceIDCorporationsHandlerFunc func(GetAlliancesAllianceIDCorporationsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAlliancesAllianceIDCorporationsHandlerFunc) Handle(params GetAlliancesAllianceIDCorporationsParams) middleware.Responder {
	return fn(params)
}

// GetAlliancesAllianceIDCorporationsHandler interface for that can handle valid get alliances alliance id corporations params
type GetAlliancesAllianceIDCorporationsHandler interface {
	Handle(GetAlliancesAllianceIDCorporationsParams) middleware.Responder
}

// NewGetAlliancesAllianceIDCorporations creates a new http.Handler for the get alliances alliance id corporations operation
func NewGetAlliancesAllianceIDCorporations(ctx *middleware.Context, handler GetAlliancesAllianceIDCorporationsHandler) *GetAlliancesAllianceIDCorporations {
	return &GetAlliancesAllianceIDCorporations{Context: ctx, Handler: handler}
}

/*GetAlliancesAllianceIDCorporations swagger:route GET /alliances/{alliance_id}/corporations/ Alliance getAlliancesAllianceIdCorporations

List alliance's corporations

List all current member corporations of an alliance

---

Alternate route: `/v1/alliances/{alliance_id}/corporations/`

Alternate route: `/legacy/alliances/{alliance_id}/corporations/`

Alternate route: `/dev/alliances/{alliance_id}/corporations/`


---

This route is cached for up to 3600 seconds

*/
type GetAlliancesAllianceIDCorporations struct {
	Context *middleware.Context
	Handler GetAlliancesAllianceIDCorporationsHandler
}

func (o *GetAlliancesAllianceIDCorporations) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetAlliancesAllianceIDCorporationsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
