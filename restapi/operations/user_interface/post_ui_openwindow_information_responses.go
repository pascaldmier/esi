package user_interface

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/pascaldmier/esi/models"
)

// PostUIOpenwindowInformationNoContentCode is the HTTP code returned for type PostUIOpenwindowInformationNoContent
const PostUIOpenwindowInformationNoContentCode int = 204

/*PostUIOpenwindowInformationNoContent Open window request received

swagger:response postUiOpenwindowInformationNoContent
*/
type PostUIOpenwindowInformationNoContent struct {
}

// NewPostUIOpenwindowInformationNoContent creates PostUIOpenwindowInformationNoContent with default headers values
func NewPostUIOpenwindowInformationNoContent() *PostUIOpenwindowInformationNoContent {
	return &PostUIOpenwindowInformationNoContent{}
}

// WriteResponse to the client
func (o *PostUIOpenwindowInformationNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(204)
}

// PostUIOpenwindowInformationForbiddenCode is the HTTP code returned for type PostUIOpenwindowInformationForbidden
const PostUIOpenwindowInformationForbiddenCode int = 403

/*PostUIOpenwindowInformationForbidden Forbidden

swagger:response postUiOpenwindowInformationForbidden
*/
type PostUIOpenwindowInformationForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.PostUIOpenwindowInformationForbiddenBody `json:"body,omitempty"`
}

// NewPostUIOpenwindowInformationForbidden creates PostUIOpenwindowInformationForbidden with default headers values
func NewPostUIOpenwindowInformationForbidden() *PostUIOpenwindowInformationForbidden {
	return &PostUIOpenwindowInformationForbidden{}
}

// WithPayload adds the payload to the post Ui openwindow information forbidden response
func (o *PostUIOpenwindowInformationForbidden) WithPayload(payload *models.PostUIOpenwindowInformationForbiddenBody) *PostUIOpenwindowInformationForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post Ui openwindow information forbidden response
func (o *PostUIOpenwindowInformationForbidden) SetPayload(payload *models.PostUIOpenwindowInformationForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUIOpenwindowInformationForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostUIOpenwindowInformationInternalServerErrorCode is the HTTP code returned for type PostUIOpenwindowInformationInternalServerError
const PostUIOpenwindowInformationInternalServerErrorCode int = 500

/*PostUIOpenwindowInformationInternalServerError Internal server error

swagger:response postUiOpenwindowInformationInternalServerError
*/
type PostUIOpenwindowInformationInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.PostUIOpenwindowInformationInternalServerErrorBody `json:"body,omitempty"`
}

// NewPostUIOpenwindowInformationInternalServerError creates PostUIOpenwindowInformationInternalServerError with default headers values
func NewPostUIOpenwindowInformationInternalServerError() *PostUIOpenwindowInformationInternalServerError {
	return &PostUIOpenwindowInformationInternalServerError{}
}

// WithPayload adds the payload to the post Ui openwindow information internal server error response
func (o *PostUIOpenwindowInformationInternalServerError) WithPayload(payload *models.PostUIOpenwindowInformationInternalServerErrorBody) *PostUIOpenwindowInformationInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post Ui openwindow information internal server error response
func (o *PostUIOpenwindowInformationInternalServerError) SetPayload(payload *models.PostUIOpenwindowInformationInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUIOpenwindowInformationInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
