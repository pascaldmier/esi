package user_interface

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostUIAutopilotWaypointHandlerFunc turns a function with the right signature into a post ui autopilot waypoint handler
type PostUIAutopilotWaypointHandlerFunc func(PostUIAutopilotWaypointParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostUIAutopilotWaypointHandlerFunc) Handle(params PostUIAutopilotWaypointParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostUIAutopilotWaypointHandler interface for that can handle valid post ui autopilot waypoint params
type PostUIAutopilotWaypointHandler interface {
	Handle(PostUIAutopilotWaypointParams, interface{}) middleware.Responder
}

// NewPostUIAutopilotWaypoint creates a new http.Handler for the post ui autopilot waypoint operation
func NewPostUIAutopilotWaypoint(ctx *middleware.Context, handler PostUIAutopilotWaypointHandler) *PostUIAutopilotWaypoint {
	return &PostUIAutopilotWaypoint{Context: ctx, Handler: handler}
}

/*PostUIAutopilotWaypoint swagger:route POST /ui/autopilot/waypoint/ User Interface postUiAutopilotWaypoint

Set Autopilot Waypoint

Set a solar system as autopilot waypoint

---

Alternate route: `/v2/ui/autopilot/waypoint/`

Alternate route: `/dev/ui/autopilot/waypoint/`


*/
type PostUIAutopilotWaypoint struct {
	Context *middleware.Context
	Handler PostUIAutopilotWaypointHandler
}

func (o *PostUIAutopilotWaypoint) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostUIAutopilotWaypointParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
