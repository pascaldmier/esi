package user_interface

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostUIOpenwindowNewmailHandlerFunc turns a function with the right signature into a post ui openwindow newmail handler
type PostUIOpenwindowNewmailHandlerFunc func(PostUIOpenwindowNewmailParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostUIOpenwindowNewmailHandlerFunc) Handle(params PostUIOpenwindowNewmailParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostUIOpenwindowNewmailHandler interface for that can handle valid post ui openwindow newmail params
type PostUIOpenwindowNewmailHandler interface {
	Handle(PostUIOpenwindowNewmailParams, interface{}) middleware.Responder
}

// NewPostUIOpenwindowNewmail creates a new http.Handler for the post ui openwindow newmail operation
func NewPostUIOpenwindowNewmail(ctx *middleware.Context, handler PostUIOpenwindowNewmailHandler) *PostUIOpenwindowNewmail {
	return &PostUIOpenwindowNewmail{Context: ctx, Handler: handler}
}

/*PostUIOpenwindowNewmail swagger:route POST /ui/openwindow/newmail/ User Interface postUiOpenwindowNewmail

Open New Mail Window

Open the New Mail window, according to settings from the request if applicable

---

Alternate route: `/v1/ui/openwindow/newmail/`

Alternate route: `/legacy/ui/openwindow/newmail/`

Alternate route: `/dev/ui/openwindow/newmail/`


*/
type PostUIOpenwindowNewmail struct {
	Context *middleware.Context
	Handler PostUIOpenwindowNewmailHandler
}

func (o *PostUIOpenwindowNewmail) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostUIOpenwindowNewmailParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
