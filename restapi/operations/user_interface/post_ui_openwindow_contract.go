package user_interface

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostUIOpenwindowContractHandlerFunc turns a function with the right signature into a post ui openwindow contract handler
type PostUIOpenwindowContractHandlerFunc func(PostUIOpenwindowContractParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostUIOpenwindowContractHandlerFunc) Handle(params PostUIOpenwindowContractParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostUIOpenwindowContractHandler interface for that can handle valid post ui openwindow contract params
type PostUIOpenwindowContractHandler interface {
	Handle(PostUIOpenwindowContractParams, interface{}) middleware.Responder
}

// NewPostUIOpenwindowContract creates a new http.Handler for the post ui openwindow contract operation
func NewPostUIOpenwindowContract(ctx *middleware.Context, handler PostUIOpenwindowContractHandler) *PostUIOpenwindowContract {
	return &PostUIOpenwindowContract{Context: ctx, Handler: handler}
}

/*PostUIOpenwindowContract swagger:route POST /ui/openwindow/contract/ User Interface postUiOpenwindowContract

Open Contract Window

Open the contract window inside the client

---

Alternate route: `/v1/ui/openwindow/contract/`

Alternate route: `/legacy/ui/openwindow/contract/`

Alternate route: `/dev/ui/openwindow/contract/`


*/
type PostUIOpenwindowContract struct {
	Context *middleware.Context
	Handler PostUIOpenwindowContractHandler
}

func (o *PostUIOpenwindowContract) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostUIOpenwindowContractParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
