package user_interface

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostUIAutopilotWaypointParams creates a new PostUIAutopilotWaypointParams object
// with the default values initialized.
func NewPostUIAutopilotWaypointParams() PostUIAutopilotWaypointParams {
	var (
		addToBeginningDefault      = bool(false)
		clearOtherWaypointsDefault = bool(false)
		datasourceDefault          = string("tranquility")
	)
	return PostUIAutopilotWaypointParams{
		AddToBeginning: addToBeginningDefault,

		ClearOtherWaypoints: clearOtherWaypointsDefault,

		Datasource: &datasourceDefault,
	}
}

// PostUIAutopilotWaypointParams contains all the bound params for the post ui autopilot waypoint operation
// typically these are obtained from a http.Request
//
// swagger:parameters post_ui_autopilot_waypoint
type PostUIAutopilotWaypointParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*Client identifier, takes precedence over User-Agent
	  In: header
	*/
	XUserAgent *string
	/*Whether this solar system should be added to the beginning of all waypoints
	  Required: true
	  In: query
	  Default: false
	*/
	AddToBeginning bool
	/*Whether clean other waypoints beforing adding this one
	  Required: true
	  In: query
	  Default: false
	*/
	ClearOtherWaypoints bool
	/*The server name you would like data from
	  In: query
	  Default: "tranquility"
	*/
	Datasource *string
	/*The destination to travel to, can be solar system, station or structure's id
	  Required: true
	  In: query
	*/
	DestinationID int64
	/*Access token to use, if preferred over a header
	  In: query
	*/
	Token *string
	/*Client identifier, takes precedence over headers
	  In: query
	*/
	UserAgent *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *PostUIAutopilotWaypointParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := o.bindXUserAgent(r.Header[http.CanonicalHeaderKey("X-User-Agent")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	qAddToBeginning, qhkAddToBeginning, _ := qs.GetOK("add_to_beginning")
	if err := o.bindAddToBeginning(qAddToBeginning, qhkAddToBeginning, route.Formats); err != nil {
		res = append(res, err)
	}

	qClearOtherWaypoints, qhkClearOtherWaypoints, _ := qs.GetOK("clear_other_waypoints")
	if err := o.bindClearOtherWaypoints(qClearOtherWaypoints, qhkClearOtherWaypoints, route.Formats); err != nil {
		res = append(res, err)
	}

	qDatasource, qhkDatasource, _ := qs.GetOK("datasource")
	if err := o.bindDatasource(qDatasource, qhkDatasource, route.Formats); err != nil {
		res = append(res, err)
	}

	qDestinationID, qhkDestinationID, _ := qs.GetOK("destination_id")
	if err := o.bindDestinationID(qDestinationID, qhkDestinationID, route.Formats); err != nil {
		res = append(res, err)
	}

	qToken, qhkToken, _ := qs.GetOK("token")
	if err := o.bindToken(qToken, qhkToken, route.Formats); err != nil {
		res = append(res, err)
	}

	qUserAgent, qhkUserAgent, _ := qs.GetOK("user_agent")
	if err := o.bindUserAgent(qUserAgent, qhkUserAgent, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostUIAutopilotWaypointParams) bindXUserAgent(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.XUserAgent = &raw

	return nil
}

func (o *PostUIAutopilotWaypointParams) bindAddToBeginning(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("add_to_beginning", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("add_to_beginning", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("add_to_beginning", "query", "bool", raw)
	}
	o.AddToBeginning = value

	return nil
}

func (o *PostUIAutopilotWaypointParams) bindClearOtherWaypoints(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("clear_other_waypoints", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("clear_other_waypoints", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("clear_other_waypoints", "query", "bool", raw)
	}
	o.ClearOtherWaypoints = value

	return nil
}

func (o *PostUIAutopilotWaypointParams) bindDatasource(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		var datasourceDefault string = string("tranquility")
		o.Datasource = &datasourceDefault
		return nil
	}

	o.Datasource = &raw

	if err := o.validateDatasource(formats); err != nil {
		return err
	}

	return nil
}

func (o *PostUIAutopilotWaypointParams) validateDatasource(formats strfmt.Registry) error {

	if err := validate.Enum("datasource", "query", *o.Datasource, []interface{}{"tranquility", "singularity"}); err != nil {
		return err
	}

	return nil
}

func (o *PostUIAutopilotWaypointParams) bindDestinationID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("destination_id", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("destination_id", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("destination_id", "query", "int64", raw)
	}
	o.DestinationID = value

	return nil
}

func (o *PostUIAutopilotWaypointParams) bindToken(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Token = &raw

	return nil
}

func (o *PostUIAutopilotWaypointParams) bindUserAgent(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.UserAgent = &raw

	return nil
}
