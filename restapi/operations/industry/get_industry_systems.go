package industry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetIndustrySystemsHandlerFunc turns a function with the right signature into a get industry systems handler
type GetIndustrySystemsHandlerFunc func(GetIndustrySystemsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetIndustrySystemsHandlerFunc) Handle(params GetIndustrySystemsParams) middleware.Responder {
	return fn(params)
}

// GetIndustrySystemsHandler interface for that can handle valid get industry systems params
type GetIndustrySystemsHandler interface {
	Handle(GetIndustrySystemsParams) middleware.Responder
}

// NewGetIndustrySystems creates a new http.Handler for the get industry systems operation
func NewGetIndustrySystems(ctx *middleware.Context, handler GetIndustrySystemsHandler) *GetIndustrySystems {
	return &GetIndustrySystems{Context: ctx, Handler: handler}
}

/*GetIndustrySystems swagger:route GET /industry/systems/ Industry getIndustrySystems

List solar system cost indices

Return cost indices for solar systems

---

Alternate route: `/v1/industry/systems/`

Alternate route: `/legacy/industry/systems/`

Alternate route: `/dev/industry/systems/`


---

This route is cached for up to 3600 seconds

*/
type GetIndustrySystems struct {
	Context *middleware.Context
	Handler GetIndustrySystemsHandler
}

func (o *GetIndustrySystems) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetIndustrySystemsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
