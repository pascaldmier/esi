package corporation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetCorporationsNpccorpsHandlerFunc turns a function with the right signature into a get corporations npccorps handler
type GetCorporationsNpccorpsHandlerFunc func(GetCorporationsNpccorpsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCorporationsNpccorpsHandlerFunc) Handle(params GetCorporationsNpccorpsParams) middleware.Responder {
	return fn(params)
}

// GetCorporationsNpccorpsHandler interface for that can handle valid get corporations npccorps params
type GetCorporationsNpccorpsHandler interface {
	Handle(GetCorporationsNpccorpsParams) middleware.Responder
}

// NewGetCorporationsNpccorps creates a new http.Handler for the get corporations npccorps operation
func NewGetCorporationsNpccorps(ctx *middleware.Context, handler GetCorporationsNpccorpsHandler) *GetCorporationsNpccorps {
	return &GetCorporationsNpccorps{Context: ctx, Handler: handler}
}

/*GetCorporationsNpccorps swagger:route GET /corporations/npccorps/ Corporation getCorporationsNpccorps

Get npc corporations

Get a list of npc corporations

---

Alternate route: `/v1/corporations/npccorps/`

Alternate route: `/legacy/corporations/npccorps/`

Alternate route: `/dev/corporations/npccorps/`


---

This route expires daily at 11:05

*/
type GetCorporationsNpccorps struct {
	Context *middleware.Context
	Handler GetCorporationsNpccorpsHandler
}

func (o *GetCorporationsNpccorps) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetCorporationsNpccorpsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
