package corporation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetCorporationsCorporationIDHandlerFunc turns a function with the right signature into a get corporations corporation id handler
type GetCorporationsCorporationIDHandlerFunc func(GetCorporationsCorporationIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCorporationsCorporationIDHandlerFunc) Handle(params GetCorporationsCorporationIDParams) middleware.Responder {
	return fn(params)
}

// GetCorporationsCorporationIDHandler interface for that can handle valid get corporations corporation id params
type GetCorporationsCorporationIDHandler interface {
	Handle(GetCorporationsCorporationIDParams) middleware.Responder
}

// NewGetCorporationsCorporationID creates a new http.Handler for the get corporations corporation id operation
func NewGetCorporationsCorporationID(ctx *middleware.Context, handler GetCorporationsCorporationIDHandler) *GetCorporationsCorporationID {
	return &GetCorporationsCorporationID{Context: ctx, Handler: handler}
}

/*GetCorporationsCorporationID swagger:route GET /corporations/{corporation_id}/ Corporation getCorporationsCorporationId

Get corporation information

Public information about a corporation

---

Alternate route: `/v3/corporations/{corporation_id}/`

Alternate route: `/dev/corporations/{corporation_id}/`


---

This route is cached for up to 3600 seconds

*/
type GetCorporationsCorporationID struct {
	Context *middleware.Context
	Handler GetCorporationsCorporationIDHandler
}

func (o *GetCorporationsCorporationID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetCorporationsCorporationIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
