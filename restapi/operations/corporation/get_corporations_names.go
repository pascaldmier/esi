package corporation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetCorporationsNamesHandlerFunc turns a function with the right signature into a get corporations names handler
type GetCorporationsNamesHandlerFunc func(GetCorporationsNamesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCorporationsNamesHandlerFunc) Handle(params GetCorporationsNamesParams) middleware.Responder {
	return fn(params)
}

// GetCorporationsNamesHandler interface for that can handle valid get corporations names params
type GetCorporationsNamesHandler interface {
	Handle(GetCorporationsNamesParams) middleware.Responder
}

// NewGetCorporationsNames creates a new http.Handler for the get corporations names operation
func NewGetCorporationsNames(ctx *middleware.Context, handler GetCorporationsNamesHandler) *GetCorporationsNames {
	return &GetCorporationsNames{Context: ctx, Handler: handler}
}

/*GetCorporationsNames swagger:route GET /corporations/names/ Corporation getCorporationsNames

Get corporation names

Resolve a set of corporation IDs to corporation names

---

Alternate route: `/v1/corporations/names/`

Alternate route: `/legacy/corporations/names/`

Alternate route: `/dev/corporations/names/`


---

This route is cached for up to 3600 seconds

*/
type GetCorporationsNames struct {
	Context *middleware.Context
	Handler GetCorporationsNamesHandler
}

func (o *GetCorporationsNames) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetCorporationsNamesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
