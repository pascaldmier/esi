package opportunities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetOpportunitiesTasksHandlerFunc turns a function with the right signature into a get opportunities tasks handler
type GetOpportunitiesTasksHandlerFunc func(GetOpportunitiesTasksParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetOpportunitiesTasksHandlerFunc) Handle(params GetOpportunitiesTasksParams) middleware.Responder {
	return fn(params)
}

// GetOpportunitiesTasksHandler interface for that can handle valid get opportunities tasks params
type GetOpportunitiesTasksHandler interface {
	Handle(GetOpportunitiesTasksParams) middleware.Responder
}

// NewGetOpportunitiesTasks creates a new http.Handler for the get opportunities tasks operation
func NewGetOpportunitiesTasks(ctx *middleware.Context, handler GetOpportunitiesTasksHandler) *GetOpportunitiesTasks {
	return &GetOpportunitiesTasks{Context: ctx, Handler: handler}
}

/*GetOpportunitiesTasks swagger:route GET /opportunities/tasks/ Opportunities getOpportunitiesTasks

Get opportunities tasks

Return a list of opportunities tasks

---

Alternate route: `/v1/opportunities/tasks/`

Alternate route: `/legacy/opportunities/tasks/`

Alternate route: `/dev/opportunities/tasks/`


---

This route expires daily at 11:05

*/
type GetOpportunitiesTasks struct {
	Context *middleware.Context
	Handler GetOpportunitiesTasksHandler
}

func (o *GetOpportunitiesTasks) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetOpportunitiesTasksParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
