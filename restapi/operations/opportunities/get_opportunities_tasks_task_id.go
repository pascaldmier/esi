package opportunities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetOpportunitiesTasksTaskIDHandlerFunc turns a function with the right signature into a get opportunities tasks task id handler
type GetOpportunitiesTasksTaskIDHandlerFunc func(GetOpportunitiesTasksTaskIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetOpportunitiesTasksTaskIDHandlerFunc) Handle(params GetOpportunitiesTasksTaskIDParams) middleware.Responder {
	return fn(params)
}

// GetOpportunitiesTasksTaskIDHandler interface for that can handle valid get opportunities tasks task id params
type GetOpportunitiesTasksTaskIDHandler interface {
	Handle(GetOpportunitiesTasksTaskIDParams) middleware.Responder
}

// NewGetOpportunitiesTasksTaskID creates a new http.Handler for the get opportunities tasks task id operation
func NewGetOpportunitiesTasksTaskID(ctx *middleware.Context, handler GetOpportunitiesTasksTaskIDHandler) *GetOpportunitiesTasksTaskID {
	return &GetOpportunitiesTasksTaskID{Context: ctx, Handler: handler}
}

/*GetOpportunitiesTasksTaskID swagger:route GET /opportunities/tasks/{task_id}/ Opportunities getOpportunitiesTasksTaskId

Get opportunities task

Return information of an opportunities task

---

Alternate route: `/v1/opportunities/tasks/{task_id}/`

Alternate route: `/legacy/opportunities/tasks/{task_id}/`

Alternate route: `/dev/opportunities/tasks/{task_id}/`


---

This route expires daily at 11:05

*/
type GetOpportunitiesTasksTaskID struct {
	Context *middleware.Context
	Handler GetOpportunitiesTasksTaskIDHandler
}

func (o *GetOpportunitiesTasksTaskID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetOpportunitiesTasksTaskIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
