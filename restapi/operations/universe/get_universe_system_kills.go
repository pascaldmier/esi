package universe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUniverseSystemKillsHandlerFunc turns a function with the right signature into a get universe system kills handler
type GetUniverseSystemKillsHandlerFunc func(GetUniverseSystemKillsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUniverseSystemKillsHandlerFunc) Handle(params GetUniverseSystemKillsParams) middleware.Responder {
	return fn(params)
}

// GetUniverseSystemKillsHandler interface for that can handle valid get universe system kills params
type GetUniverseSystemKillsHandler interface {
	Handle(GetUniverseSystemKillsParams) middleware.Responder
}

// NewGetUniverseSystemKills creates a new http.Handler for the get universe system kills operation
func NewGetUniverseSystemKills(ctx *middleware.Context, handler GetUniverseSystemKillsHandler) *GetUniverseSystemKills {
	return &GetUniverseSystemKills{Context: ctx, Handler: handler}
}

/*GetUniverseSystemKills swagger:route GET /universe/system_kills/ Universe getUniverseSystemKills

Get system kills

Get the number of ship, pod and NPC kills per solar system within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with kills will be listed

---

Alternate route: `/v1/universe/system_kills/`

Alternate route: `/legacy/universe/system_kills/`


---

This route is cached for up to 3600 seconds

*/
type GetUniverseSystemKills struct {
	Context *middleware.Context
	Handler GetUniverseSystemKillsHandler
}

func (o *GetUniverseSystemKills) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetUniverseSystemKillsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
