package universe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUniverseStructuresStructureIDHandlerFunc turns a function with the right signature into a get universe structures structure id handler
type GetUniverseStructuresStructureIDHandlerFunc func(GetUniverseStructuresStructureIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUniverseStructuresStructureIDHandlerFunc) Handle(params GetUniverseStructuresStructureIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetUniverseStructuresStructureIDHandler interface for that can handle valid get universe structures structure id params
type GetUniverseStructuresStructureIDHandler interface {
	Handle(GetUniverseStructuresStructureIDParams, interface{}) middleware.Responder
}

// NewGetUniverseStructuresStructureID creates a new http.Handler for the get universe structures structure id operation
func NewGetUniverseStructuresStructureID(ctx *middleware.Context, handler GetUniverseStructuresStructureIDHandler) *GetUniverseStructuresStructureID {
	return &GetUniverseStructuresStructureID{Context: ctx, Handler: handler}
}

/*GetUniverseStructuresStructureID swagger:route GET /universe/structures/{structure_id}/ Universe getUniverseStructuresStructureId

Get structure information

Returns information on requested structure, if you are on the ACL. Otherwise, returns "Forbidden" for all inputs.

---

Alternate route: `/v1/universe/structures/{structure_id}/`

Alternate route: `/legacy/universe/structures/{structure_id}/`

Alternate route: `/dev/universe/structures/{structure_id}/`


---

This route is cached for up to 3600 seconds

*/
type GetUniverseStructuresStructureID struct {
	Context *middleware.Context
	Handler GetUniverseStructuresStructureIDHandler
}

func (o *GetUniverseStructuresStructureID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetUniverseStructuresStructureIDParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
