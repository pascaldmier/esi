package universe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUniverseTypesHandlerFunc turns a function with the right signature into a get universe types handler
type GetUniverseTypesHandlerFunc func(GetUniverseTypesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUniverseTypesHandlerFunc) Handle(params GetUniverseTypesParams) middleware.Responder {
	return fn(params)
}

// GetUniverseTypesHandler interface for that can handle valid get universe types params
type GetUniverseTypesHandler interface {
	Handle(GetUniverseTypesParams) middleware.Responder
}

// NewGetUniverseTypes creates a new http.Handler for the get universe types operation
func NewGetUniverseTypes(ctx *middleware.Context, handler GetUniverseTypesHandler) *GetUniverseTypes {
	return &GetUniverseTypes{Context: ctx, Handler: handler}
}

/*GetUniverseTypes swagger:route GET /universe/types/ Universe getUniverseTypes

Get types

Get a list of type ids

---

Alternate route: `/v1/universe/types/`

Alternate route: `/legacy/universe/types/`

Alternate route: `/dev/universe/types/`


---

This route expires daily at 11:05

*/
type GetUniverseTypes struct {
	Context *middleware.Context
	Handler GetUniverseTypesHandler
}

func (o *GetUniverseTypes) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetUniverseTypesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
