package universe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUniverseStationsStationIDHandlerFunc turns a function with the right signature into a get universe stations station id handler
type GetUniverseStationsStationIDHandlerFunc func(GetUniverseStationsStationIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUniverseStationsStationIDHandlerFunc) Handle(params GetUniverseStationsStationIDParams) middleware.Responder {
	return fn(params)
}

// GetUniverseStationsStationIDHandler interface for that can handle valid get universe stations station id params
type GetUniverseStationsStationIDHandler interface {
	Handle(GetUniverseStationsStationIDParams) middleware.Responder
}

// NewGetUniverseStationsStationID creates a new http.Handler for the get universe stations station id operation
func NewGetUniverseStationsStationID(ctx *middleware.Context, handler GetUniverseStationsStationIDHandler) *GetUniverseStationsStationID {
	return &GetUniverseStationsStationID{Context: ctx, Handler: handler}
}

/*GetUniverseStationsStationID swagger:route GET /universe/stations/{station_id}/ Universe getUniverseStationsStationId

Get station information

Get information on a station

---

Alternate route: `/v2/universe/stations/{station_id}/`

Alternate route: `/dev/universe/stations/{station_id}/`


---

This route is cached for up to 300 seconds

*/
type GetUniverseStationsStationID struct {
	Context *middleware.Context
	Handler GetUniverseStationsStationIDHandler
}

func (o *GetUniverseStationsStationID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetUniverseStationsStationIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
