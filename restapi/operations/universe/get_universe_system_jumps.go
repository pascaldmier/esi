package universe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUniverseSystemJumpsHandlerFunc turns a function with the right signature into a get universe system jumps handler
type GetUniverseSystemJumpsHandlerFunc func(GetUniverseSystemJumpsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUniverseSystemJumpsHandlerFunc) Handle(params GetUniverseSystemJumpsParams) middleware.Responder {
	return fn(params)
}

// GetUniverseSystemJumpsHandler interface for that can handle valid get universe system jumps params
type GetUniverseSystemJumpsHandler interface {
	Handle(GetUniverseSystemJumpsParams) middleware.Responder
}

// NewGetUniverseSystemJumps creates a new http.Handler for the get universe system jumps operation
func NewGetUniverseSystemJumps(ctx *middleware.Context, handler GetUniverseSystemJumpsHandler) *GetUniverseSystemJumps {
	return &GetUniverseSystemJumps{Context: ctx, Handler: handler}
}

/*GetUniverseSystemJumps swagger:route GET /universe/system_jumps/ Universe getUniverseSystemJumps

Get system jumps

Get the number of jumps in solar systems within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with jumps will be listed

---

Alternate route: `/v1/universe/system_jumps/`

Alternate route: `/legacy/universe/system_jumps/`

Alternate route: `/dev/universe/system_jumps/`


---

This route is cached for up to 3600 seconds

*/
type GetUniverseSystemJumps struct {
	Context *middleware.Context
	Handler GetUniverseSystemJumpsHandler
}

func (o *GetUniverseSystemJumps) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetUniverseSystemJumpsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
