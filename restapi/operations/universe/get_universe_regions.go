package universe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUniverseRegionsHandlerFunc turns a function with the right signature into a get universe regions handler
type GetUniverseRegionsHandlerFunc func(GetUniverseRegionsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUniverseRegionsHandlerFunc) Handle(params GetUniverseRegionsParams) middleware.Responder {
	return fn(params)
}

// GetUniverseRegionsHandler interface for that can handle valid get universe regions params
type GetUniverseRegionsHandler interface {
	Handle(GetUniverseRegionsParams) middleware.Responder
}

// NewGetUniverseRegions creates a new http.Handler for the get universe regions operation
func NewGetUniverseRegions(ctx *middleware.Context, handler GetUniverseRegionsHandler) *GetUniverseRegions {
	return &GetUniverseRegions{Context: ctx, Handler: handler}
}

/*GetUniverseRegions swagger:route GET /universe/regions/ Universe getUniverseRegions

Get regions

Get a list of regions

---

Alternate route: `/v1/universe/regions/`

Alternate route: `/legacy/universe/regions/`

Alternate route: `/dev/universe/regions/`


---

This route expires daily at 11:05

*/
type GetUniverseRegions struct {
	Context *middleware.Context
	Handler GetUniverseRegionsHandler
}

func (o *GetUniverseRegions) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetUniverseRegionsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
