package universe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/pascaldmier/esi/models"
)

// GetUniverseFactionsOKCode is the HTTP code returned for type GetUniverseFactionsOK
const GetUniverseFactionsOKCode int = 200

/*GetUniverseFactionsOK A list of factions

swagger:response getUniverseFactionsOK
*/
type GetUniverseFactionsOK struct {
	/*The caching mechanism used
	  Required: true
	*/
	CacheControl string `json:"Cache-Control"`
	/*The language used in the response
	  Required: true
	*/
	ContentLanguage string `json:"Content-Language"`
	/*RFC7231 formatted datetime string
	  Required: true
	*/
	Expires string `json:"Expires"`
	/*RFC7231 formatted datetime string
	  Required: true
	*/
	LastModified string `json:"Last-Modified"`

	/*
	  In: Body
	*/
	Payload models.GetUniverseFactionsOKBody `json:"body,omitempty"`
}

// NewGetUniverseFactionsOK creates GetUniverseFactionsOK with default headers values
func NewGetUniverseFactionsOK() *GetUniverseFactionsOK {
	return &GetUniverseFactionsOK{}
}

// WithCacheControl adds the cacheControl to the get universe factions o k response
func (o *GetUniverseFactionsOK) WithCacheControl(cacheControl string) *GetUniverseFactionsOK {
	o.CacheControl = cacheControl
	return o
}

// SetCacheControl sets the cacheControl to the get universe factions o k response
func (o *GetUniverseFactionsOK) SetCacheControl(cacheControl string) {
	o.CacheControl = cacheControl
}

// WithContentLanguage adds the contentLanguage to the get universe factions o k response
func (o *GetUniverseFactionsOK) WithContentLanguage(contentLanguage string) *GetUniverseFactionsOK {
	o.ContentLanguage = contentLanguage
	return o
}

// SetContentLanguage sets the contentLanguage to the get universe factions o k response
func (o *GetUniverseFactionsOK) SetContentLanguage(contentLanguage string) {
	o.ContentLanguage = contentLanguage
}

// WithExpires adds the expires to the get universe factions o k response
func (o *GetUniverseFactionsOK) WithExpires(expires string) *GetUniverseFactionsOK {
	o.Expires = expires
	return o
}

// SetExpires sets the expires to the get universe factions o k response
func (o *GetUniverseFactionsOK) SetExpires(expires string) {
	o.Expires = expires
}

// WithLastModified adds the lastModified to the get universe factions o k response
func (o *GetUniverseFactionsOK) WithLastModified(lastModified string) *GetUniverseFactionsOK {
	o.LastModified = lastModified
	return o
}

// SetLastModified sets the lastModified to the get universe factions o k response
func (o *GetUniverseFactionsOK) SetLastModified(lastModified string) {
	o.LastModified = lastModified
}

// WithPayload adds the payload to the get universe factions o k response
func (o *GetUniverseFactionsOK) WithPayload(payload models.GetUniverseFactionsOKBody) *GetUniverseFactionsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get universe factions o k response
func (o *GetUniverseFactionsOK) SetPayload(payload models.GetUniverseFactionsOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUniverseFactionsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Cache-Control

	cacheControl := o.CacheControl
	if cacheControl != "" {
		rw.Header().Set("Cache-Control", cacheControl)
	}

	// response header Content-Language

	contentLanguage := o.ContentLanguage
	if contentLanguage != "" {
		rw.Header().Set("Content-Language", contentLanguage)
	}

	// response header Expires

	expires := o.Expires
	if expires != "" {
		rw.Header().Set("Expires", expires)
	}

	// response header Last-Modified

	lastModified := o.LastModified
	if lastModified != "" {
		rw.Header().Set("Last-Modified", lastModified)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make(models.GetUniverseFactionsOKBody, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// GetUniverseFactionsInternalServerErrorCode is the HTTP code returned for type GetUniverseFactionsInternalServerError
const GetUniverseFactionsInternalServerErrorCode int = 500

/*GetUniverseFactionsInternalServerError Internal server error

swagger:response getUniverseFactionsInternalServerError
*/
type GetUniverseFactionsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.GetUniverseFactionsInternalServerErrorBody `json:"body,omitempty"`
}

// NewGetUniverseFactionsInternalServerError creates GetUniverseFactionsInternalServerError with default headers values
func NewGetUniverseFactionsInternalServerError() *GetUniverseFactionsInternalServerError {
	return &GetUniverseFactionsInternalServerError{}
}

// WithPayload adds the payload to the get universe factions internal server error response
func (o *GetUniverseFactionsInternalServerError) WithPayload(payload *models.GetUniverseFactionsInternalServerErrorBody) *GetUniverseFactionsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get universe factions internal server error response
func (o *GetUniverseFactionsInternalServerError) SetPayload(payload *models.GetUniverseFactionsInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUniverseFactionsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
