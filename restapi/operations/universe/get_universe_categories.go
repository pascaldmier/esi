package universe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUniverseCategoriesHandlerFunc turns a function with the right signature into a get universe categories handler
type GetUniverseCategoriesHandlerFunc func(GetUniverseCategoriesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUniverseCategoriesHandlerFunc) Handle(params GetUniverseCategoriesParams) middleware.Responder {
	return fn(params)
}

// GetUniverseCategoriesHandler interface for that can handle valid get universe categories params
type GetUniverseCategoriesHandler interface {
	Handle(GetUniverseCategoriesParams) middleware.Responder
}

// NewGetUniverseCategories creates a new http.Handler for the get universe categories operation
func NewGetUniverseCategories(ctx *middleware.Context, handler GetUniverseCategoriesHandler) *GetUniverseCategories {
	return &GetUniverseCategories{Context: ctx, Handler: handler}
}

/*GetUniverseCategories swagger:route GET /universe/categories/ Universe getUniverseCategories

Get item categories

Get a list of item categories

---

Alternate route: `/v1/universe/categories/`

Alternate route: `/legacy/universe/categories/`

Alternate route: `/dev/universe/categories/`


---

This route expires daily at 11:05

*/
type GetUniverseCategories struct {
	Context *middleware.Context
	Handler GetUniverseCategoriesHandler
}

func (o *GetUniverseCategories) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetUniverseCategoriesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
