package universe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/pascaldmier/esi/models"
)

// GetUniverseRacesOKCode is the HTTP code returned for type GetUniverseRacesOK
const GetUniverseRacesOKCode int = 200

/*GetUniverseRacesOK A list of character races

swagger:response getUniverseRacesOK
*/
type GetUniverseRacesOK struct {
	/*The caching mechanism used
	  Required: true
	*/
	CacheControl string `json:"Cache-Control"`
	/*The language used in the response
	  Required: true
	*/
	ContentLanguage string `json:"Content-Language"`
	/*RFC7231 formatted datetime string
	  Required: true
	*/
	Expires string `json:"Expires"`
	/*RFC7231 formatted datetime string
	  Required: true
	*/
	LastModified string `json:"Last-Modified"`

	/*
	  In: Body
	*/
	Payload models.GetUniverseRacesOKBody `json:"body,omitempty"`
}

// NewGetUniverseRacesOK creates GetUniverseRacesOK with default headers values
func NewGetUniverseRacesOK() *GetUniverseRacesOK {
	return &GetUniverseRacesOK{}
}

// WithCacheControl adds the cacheControl to the get universe races o k response
func (o *GetUniverseRacesOK) WithCacheControl(cacheControl string) *GetUniverseRacesOK {
	o.CacheControl = cacheControl
	return o
}

// SetCacheControl sets the cacheControl to the get universe races o k response
func (o *GetUniverseRacesOK) SetCacheControl(cacheControl string) {
	o.CacheControl = cacheControl
}

// WithContentLanguage adds the contentLanguage to the get universe races o k response
func (o *GetUniverseRacesOK) WithContentLanguage(contentLanguage string) *GetUniverseRacesOK {
	o.ContentLanguage = contentLanguage
	return o
}

// SetContentLanguage sets the contentLanguage to the get universe races o k response
func (o *GetUniverseRacesOK) SetContentLanguage(contentLanguage string) {
	o.ContentLanguage = contentLanguage
}

// WithExpires adds the expires to the get universe races o k response
func (o *GetUniverseRacesOK) WithExpires(expires string) *GetUniverseRacesOK {
	o.Expires = expires
	return o
}

// SetExpires sets the expires to the get universe races o k response
func (o *GetUniverseRacesOK) SetExpires(expires string) {
	o.Expires = expires
}

// WithLastModified adds the lastModified to the get universe races o k response
func (o *GetUniverseRacesOK) WithLastModified(lastModified string) *GetUniverseRacesOK {
	o.LastModified = lastModified
	return o
}

// SetLastModified sets the lastModified to the get universe races o k response
func (o *GetUniverseRacesOK) SetLastModified(lastModified string) {
	o.LastModified = lastModified
}

// WithPayload adds the payload to the get universe races o k response
func (o *GetUniverseRacesOK) WithPayload(payload models.GetUniverseRacesOKBody) *GetUniverseRacesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get universe races o k response
func (o *GetUniverseRacesOK) SetPayload(payload models.GetUniverseRacesOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUniverseRacesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Cache-Control

	cacheControl := o.CacheControl
	if cacheControl != "" {
		rw.Header().Set("Cache-Control", cacheControl)
	}

	// response header Content-Language

	contentLanguage := o.ContentLanguage
	if contentLanguage != "" {
		rw.Header().Set("Content-Language", contentLanguage)
	}

	// response header Expires

	expires := o.Expires
	if expires != "" {
		rw.Header().Set("Expires", expires)
	}

	// response header Last-Modified

	lastModified := o.LastModified
	if lastModified != "" {
		rw.Header().Set("Last-Modified", lastModified)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make(models.GetUniverseRacesOKBody, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// GetUniverseRacesInternalServerErrorCode is the HTTP code returned for type GetUniverseRacesInternalServerError
const GetUniverseRacesInternalServerErrorCode int = 500

/*GetUniverseRacesInternalServerError Internal server error

swagger:response getUniverseRacesInternalServerError
*/
type GetUniverseRacesInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.GetUniverseRacesInternalServerErrorBody `json:"body,omitempty"`
}

// NewGetUniverseRacesInternalServerError creates GetUniverseRacesInternalServerError with default headers values
func NewGetUniverseRacesInternalServerError() *GetUniverseRacesInternalServerError {
	return &GetUniverseRacesInternalServerError{}
}

// WithPayload adds the payload to the get universe races internal server error response
func (o *GetUniverseRacesInternalServerError) WithPayload(payload *models.GetUniverseRacesInternalServerErrorBody) *GetUniverseRacesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get universe races internal server error response
func (o *GetUniverseRacesInternalServerError) SetPayload(payload *models.GetUniverseRacesInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUniverseRacesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
