package universe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/pascaldmier/esi/models"
)

// GetUniverseTypesTypeIDOKCode is the HTTP code returned for type GetUniverseTypesTypeIDOK
const GetUniverseTypesTypeIDOKCode int = 200

/*GetUniverseTypesTypeIDOK Information about a type

swagger:response getUniverseTypesTypeIdOK
*/
type GetUniverseTypesTypeIDOK struct {
	/*The caching mechanism used
	  Required: true
	*/
	CacheControl string `json:"Cache-Control"`
	/*The language used in the response
	  Required: true
	*/
	ContentLanguage string `json:"Content-Language"`
	/*RFC7231 formatted datetime string
	  Required: true
	*/
	Expires string `json:"Expires"`
	/*RFC7231 formatted datetime string
	  Required: true
	*/
	LastModified string `json:"Last-Modified"`

	/*
	  In: Body
	*/
	Payload *models.GetUniverseTypesTypeIDOKBody `json:"body,omitempty"`
}

// NewGetUniverseTypesTypeIDOK creates GetUniverseTypesTypeIDOK with default headers values
func NewGetUniverseTypesTypeIDOK() *GetUniverseTypesTypeIDOK {
	return &GetUniverseTypesTypeIDOK{}
}

// WithCacheControl adds the cacheControl to the get universe types type Id o k response
func (o *GetUniverseTypesTypeIDOK) WithCacheControl(cacheControl string) *GetUniverseTypesTypeIDOK {
	o.CacheControl = cacheControl
	return o
}

// SetCacheControl sets the cacheControl to the get universe types type Id o k response
func (o *GetUniverseTypesTypeIDOK) SetCacheControl(cacheControl string) {
	o.CacheControl = cacheControl
}

// WithContentLanguage adds the contentLanguage to the get universe types type Id o k response
func (o *GetUniverseTypesTypeIDOK) WithContentLanguage(contentLanguage string) *GetUniverseTypesTypeIDOK {
	o.ContentLanguage = contentLanguage
	return o
}

// SetContentLanguage sets the contentLanguage to the get universe types type Id o k response
func (o *GetUniverseTypesTypeIDOK) SetContentLanguage(contentLanguage string) {
	o.ContentLanguage = contentLanguage
}

// WithExpires adds the expires to the get universe types type Id o k response
func (o *GetUniverseTypesTypeIDOK) WithExpires(expires string) *GetUniverseTypesTypeIDOK {
	o.Expires = expires
	return o
}

// SetExpires sets the expires to the get universe types type Id o k response
func (o *GetUniverseTypesTypeIDOK) SetExpires(expires string) {
	o.Expires = expires
}

// WithLastModified adds the lastModified to the get universe types type Id o k response
func (o *GetUniverseTypesTypeIDOK) WithLastModified(lastModified string) *GetUniverseTypesTypeIDOK {
	o.LastModified = lastModified
	return o
}

// SetLastModified sets the lastModified to the get universe types type Id o k response
func (o *GetUniverseTypesTypeIDOK) SetLastModified(lastModified string) {
	o.LastModified = lastModified
}

// WithPayload adds the payload to the get universe types type Id o k response
func (o *GetUniverseTypesTypeIDOK) WithPayload(payload *models.GetUniverseTypesTypeIDOKBody) *GetUniverseTypesTypeIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get universe types type Id o k response
func (o *GetUniverseTypesTypeIDOK) SetPayload(payload *models.GetUniverseTypesTypeIDOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUniverseTypesTypeIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Cache-Control

	cacheControl := o.CacheControl
	if cacheControl != "" {
		rw.Header().Set("Cache-Control", cacheControl)
	}

	// response header Content-Language

	contentLanguage := o.ContentLanguage
	if contentLanguage != "" {
		rw.Header().Set("Content-Language", contentLanguage)
	}

	// response header Expires

	expires := o.Expires
	if expires != "" {
		rw.Header().Set("Expires", expires)
	}

	// response header Last-Modified

	lastModified := o.LastModified
	if lastModified != "" {
		rw.Header().Set("Last-Modified", lastModified)
	}

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUniverseTypesTypeIDNotFoundCode is the HTTP code returned for type GetUniverseTypesTypeIDNotFound
const GetUniverseTypesTypeIDNotFoundCode int = 404

/*GetUniverseTypesTypeIDNotFound Type not found

swagger:response getUniverseTypesTypeIdNotFound
*/
type GetUniverseTypesTypeIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.GetUniverseTypesTypeIDNotFoundBody `json:"body,omitempty"`
}

// NewGetUniverseTypesTypeIDNotFound creates GetUniverseTypesTypeIDNotFound with default headers values
func NewGetUniverseTypesTypeIDNotFound() *GetUniverseTypesTypeIDNotFound {
	return &GetUniverseTypesTypeIDNotFound{}
}

// WithPayload adds the payload to the get universe types type Id not found response
func (o *GetUniverseTypesTypeIDNotFound) WithPayload(payload *models.GetUniverseTypesTypeIDNotFoundBody) *GetUniverseTypesTypeIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get universe types type Id not found response
func (o *GetUniverseTypesTypeIDNotFound) SetPayload(payload *models.GetUniverseTypesTypeIDNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUniverseTypesTypeIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUniverseTypesTypeIDInternalServerErrorCode is the HTTP code returned for type GetUniverseTypesTypeIDInternalServerError
const GetUniverseTypesTypeIDInternalServerErrorCode int = 500

/*GetUniverseTypesTypeIDInternalServerError Internal server error

swagger:response getUniverseTypesTypeIdInternalServerError
*/
type GetUniverseTypesTypeIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.GetUniverseTypesTypeIDInternalServerErrorBody `json:"body,omitempty"`
}

// NewGetUniverseTypesTypeIDInternalServerError creates GetUniverseTypesTypeIDInternalServerError with default headers values
func NewGetUniverseTypesTypeIDInternalServerError() *GetUniverseTypesTypeIDInternalServerError {
	return &GetUniverseTypesTypeIDInternalServerError{}
}

// WithPayload adds the payload to the get universe types type Id internal server error response
func (o *GetUniverseTypesTypeIDInternalServerError) WithPayload(payload *models.GetUniverseTypesTypeIDInternalServerErrorBody) *GetUniverseTypesTypeIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get universe types type Id internal server error response
func (o *GetUniverseTypesTypeIDInternalServerError) SetPayload(payload *models.GetUniverseTypesTypeIDInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUniverseTypesTypeIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
