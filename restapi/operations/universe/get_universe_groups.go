package universe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUniverseGroupsHandlerFunc turns a function with the right signature into a get universe groups handler
type GetUniverseGroupsHandlerFunc func(GetUniverseGroupsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUniverseGroupsHandlerFunc) Handle(params GetUniverseGroupsParams) middleware.Responder {
	return fn(params)
}

// GetUniverseGroupsHandler interface for that can handle valid get universe groups params
type GetUniverseGroupsHandler interface {
	Handle(GetUniverseGroupsParams) middleware.Responder
}

// NewGetUniverseGroups creates a new http.Handler for the get universe groups operation
func NewGetUniverseGroups(ctx *middleware.Context, handler GetUniverseGroupsHandler) *GetUniverseGroups {
	return &GetUniverseGroups{Context: ctx, Handler: handler}
}

/*GetUniverseGroups swagger:route GET /universe/groups/ Universe getUniverseGroups

Get item groups

Get a list of item groups

---

Alternate route: `/v1/universe/groups/`

Alternate route: `/legacy/universe/groups/`

Alternate route: `/dev/universe/groups/`


---

This route expires daily at 11:05

*/
type GetUniverseGroups struct {
	Context *middleware.Context
	Handler GetUniverseGroupsHandler
}

func (o *GetUniverseGroups) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetUniverseGroupsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
