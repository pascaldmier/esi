package universe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUniverseSystemsSystemIDHandlerFunc turns a function with the right signature into a get universe systems system id handler
type GetUniverseSystemsSystemIDHandlerFunc func(GetUniverseSystemsSystemIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUniverseSystemsSystemIDHandlerFunc) Handle(params GetUniverseSystemsSystemIDParams) middleware.Responder {
	return fn(params)
}

// GetUniverseSystemsSystemIDHandler interface for that can handle valid get universe systems system id params
type GetUniverseSystemsSystemIDHandler interface {
	Handle(GetUniverseSystemsSystemIDParams) middleware.Responder
}

// NewGetUniverseSystemsSystemID creates a new http.Handler for the get universe systems system id operation
func NewGetUniverseSystemsSystemID(ctx *middleware.Context, handler GetUniverseSystemsSystemIDHandler) *GetUniverseSystemsSystemID {
	return &GetUniverseSystemsSystemID{Context: ctx, Handler: handler}
}

/*GetUniverseSystemsSystemID swagger:route GET /universe/systems/{system_id}/ Universe getUniverseSystemsSystemId

Get solar system information

Get information on a solar system

---

Alternate route: `/v2/universe/systems/{system_id}/`

Alternate route: `/dev/universe/systems/{system_id}/`


---

This route expires daily at 11:05

*/
type GetUniverseSystemsSystemID struct {
	Context *middleware.Context
	Handler GetUniverseSystemsSystemIDHandler
}

func (o *GetUniverseSystemsSystemID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetUniverseSystemsSystemIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
