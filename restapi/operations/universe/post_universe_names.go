package universe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostUniverseNamesHandlerFunc turns a function with the right signature into a post universe names handler
type PostUniverseNamesHandlerFunc func(PostUniverseNamesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostUniverseNamesHandlerFunc) Handle(params PostUniverseNamesParams) middleware.Responder {
	return fn(params)
}

// PostUniverseNamesHandler interface for that can handle valid post universe names params
type PostUniverseNamesHandler interface {
	Handle(PostUniverseNamesParams) middleware.Responder
}

// NewPostUniverseNames creates a new http.Handler for the post universe names operation
func NewPostUniverseNames(ctx *middleware.Context, handler PostUniverseNamesHandler) *PostUniverseNames {
	return &PostUniverseNames{Context: ctx, Handler: handler}
}

/*PostUniverseNames swagger:route POST /universe/names/ Universe postUniverseNames

Get names and categories for a set of ID's

Resolve a set of IDs to names and categories. Supported ID's for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.

---

Alternate route: `/v2/universe/names/`

Alternate route: `/dev/universe/names/`


*/
type PostUniverseNames struct {
	Context *middleware.Context
	Handler PostUniverseNamesHandler
}

func (o *PostUniverseNames) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostUniverseNamesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
