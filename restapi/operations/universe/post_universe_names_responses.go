package universe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/pascaldmier/esi/models"
)

// PostUniverseNamesOKCode is the HTTP code returned for type PostUniverseNamesOK
const PostUniverseNamesOKCode int = 200

/*PostUniverseNamesOK List of id/name associations for a set of ID's. ID's that cannot be resolved are not returned.

swagger:response postUniverseNamesOK
*/
type PostUniverseNamesOK struct {

	/*
	  In: Body
	*/
	Payload models.PostUniverseNamesOKBody `json:"body,omitempty"`
}

// NewPostUniverseNamesOK creates PostUniverseNamesOK with default headers values
func NewPostUniverseNamesOK() *PostUniverseNamesOK {
	return &PostUniverseNamesOK{}
}

// WithPayload adds the payload to the post universe names o k response
func (o *PostUniverseNamesOK) WithPayload(payload models.PostUniverseNamesOKBody) *PostUniverseNamesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post universe names o k response
func (o *PostUniverseNamesOK) SetPayload(payload models.PostUniverseNamesOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUniverseNamesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make(models.PostUniverseNamesOKBody, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// PostUniverseNamesNotFoundCode is the HTTP code returned for type PostUniverseNamesNotFound
const PostUniverseNamesNotFoundCode int = 404

/*PostUniverseNamesNotFound no valid IDs found

swagger:response postUniverseNamesNotFound
*/
type PostUniverseNamesNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.PostUniverseNamesNotFoundBody `json:"body,omitempty"`
}

// NewPostUniverseNamesNotFound creates PostUniverseNamesNotFound with default headers values
func NewPostUniverseNamesNotFound() *PostUniverseNamesNotFound {
	return &PostUniverseNamesNotFound{}
}

// WithPayload adds the payload to the post universe names not found response
func (o *PostUniverseNamesNotFound) WithPayload(payload *models.PostUniverseNamesNotFoundBody) *PostUniverseNamesNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post universe names not found response
func (o *PostUniverseNamesNotFound) SetPayload(payload *models.PostUniverseNamesNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUniverseNamesNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostUniverseNamesInternalServerErrorCode is the HTTP code returned for type PostUniverseNamesInternalServerError
const PostUniverseNamesInternalServerErrorCode int = 500

/*PostUniverseNamesInternalServerError Internal server error

swagger:response postUniverseNamesInternalServerError
*/
type PostUniverseNamesInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.PostUniverseNamesInternalServerErrorBody `json:"body,omitempty"`
}

// NewPostUniverseNamesInternalServerError creates PostUniverseNamesInternalServerError with default headers values
func NewPostUniverseNamesInternalServerError() *PostUniverseNamesInternalServerError {
	return &PostUniverseNamesInternalServerError{}
}

// WithPayload adds the payload to the post universe names internal server error response
func (o *PostUniverseNamesInternalServerError) WithPayload(payload *models.PostUniverseNamesInternalServerErrorBody) *PostUniverseNamesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post universe names internal server error response
func (o *PostUniverseNamesInternalServerError) SetPayload(payload *models.PostUniverseNamesInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUniverseNamesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
