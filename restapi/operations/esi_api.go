package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/pascaldmier/esi/restapi/operations/alliance"
	"github.com/pascaldmier/esi/restapi/operations/assets"
	"github.com/pascaldmier/esi/restapi/operations/bookmarks"
	"github.com/pascaldmier/esi/restapi/operations/calendar"
	"github.com/pascaldmier/esi/restapi/operations/character"
	"github.com/pascaldmier/esi/restapi/operations/clones"
	"github.com/pascaldmier/esi/restapi/operations/contacts"
	"github.com/pascaldmier/esi/restapi/operations/corporation"
	"github.com/pascaldmier/esi/restapi/operations/dogma"
	"github.com/pascaldmier/esi/restapi/operations/fittings"
	"github.com/pascaldmier/esi/restapi/operations/fleets"
	"github.com/pascaldmier/esi/restapi/operations/incursions"
	"github.com/pascaldmier/esi/restapi/operations/industry"
	"github.com/pascaldmier/esi/restapi/operations/insurance"
	"github.com/pascaldmier/esi/restapi/operations/killmails"
	"github.com/pascaldmier/esi/restapi/operations/location"
	"github.com/pascaldmier/esi/restapi/operations/loyalty"
	"github.com/pascaldmier/esi/restapi/operations/mail"
	"github.com/pascaldmier/esi/restapi/operations/market"
	"github.com/pascaldmier/esi/restapi/operations/opportunities"
	"github.com/pascaldmier/esi/restapi/operations/planetary_interaction"
	"github.com/pascaldmier/esi/restapi/operations/search"
	"github.com/pascaldmier/esi/restapi/operations/skills"
	"github.com/pascaldmier/esi/restapi/operations/sovereignty"
	"github.com/pascaldmier/esi/restapi/operations/status"
	"github.com/pascaldmier/esi/restapi/operations/universe"
	"github.com/pascaldmier/esi/restapi/operations/user_interface"
	"github.com/pascaldmier/esi/restapi/operations/wallet"
	"github.com/pascaldmier/esi/restapi/operations/wars"
)

// NewEsiAPI creates a new Esi instance
func NewEsiAPI(spec *loads.Document) *EsiAPI {
	return &EsiAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		ContactsDeleteCharactersCharacterIDContactsHandler: contacts.DeleteCharactersCharacterIDContactsHandlerFunc(func(params contacts.DeleteCharactersCharacterIDContactsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ContactsDeleteCharactersCharacterIDContacts has not yet been implemented")
		}),
		FittingsDeleteCharactersCharacterIDFittingsFittingIDHandler: fittings.DeleteCharactersCharacterIDFittingsFittingIDHandlerFunc(func(params fittings.DeleteCharactersCharacterIDFittingsFittingIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FittingsDeleteCharactersCharacterIDFittingsFittingID has not yet been implemented")
		}),
		MailDeleteCharactersCharacterIDMailLabelsLabelIDHandler: mail.DeleteCharactersCharacterIDMailLabelsLabelIDHandlerFunc(func(params mail.DeleteCharactersCharacterIDMailLabelsLabelIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MailDeleteCharactersCharacterIDMailLabelsLabelID has not yet been implemented")
		}),
		MailDeleteCharactersCharacterIDMailMailIDHandler: mail.DeleteCharactersCharacterIDMailMailIDHandlerFunc(func(params mail.DeleteCharactersCharacterIDMailMailIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MailDeleteCharactersCharacterIDMailMailID has not yet been implemented")
		}),
		FleetsDeleteFleetsFleetIDMembersMemberIDHandler: fleets.DeleteFleetsFleetIDMembersMemberIDHandlerFunc(func(params fleets.DeleteFleetsFleetIDMembersMemberIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FleetsDeleteFleetsFleetIDMembersMemberID has not yet been implemented")
		}),
		FleetsDeleteFleetsFleetIDSquadsSquadIDHandler: fleets.DeleteFleetsFleetIDSquadsSquadIDHandlerFunc(func(params fleets.DeleteFleetsFleetIDSquadsSquadIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FleetsDeleteFleetsFleetIDSquadsSquadID has not yet been implemented")
		}),
		FleetsDeleteFleetsFleetIDWingsWingIDHandler: fleets.DeleteFleetsFleetIDWingsWingIDHandlerFunc(func(params fleets.DeleteFleetsFleetIDWingsWingIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FleetsDeleteFleetsFleetIDWingsWingID has not yet been implemented")
		}),
		AllianceGetAlliancesHandler: alliance.GetAlliancesHandlerFunc(func(params alliance.GetAlliancesParams) middleware.Responder {
			return middleware.NotImplemented("operation AllianceGetAlliances has not yet been implemented")
		}),
		AllianceGetAlliancesAllianceIDHandler: alliance.GetAlliancesAllianceIDHandlerFunc(func(params alliance.GetAlliancesAllianceIDParams) middleware.Responder {
			return middleware.NotImplemented("operation AllianceGetAlliancesAllianceID has not yet been implemented")
		}),
		AllianceGetAlliancesAllianceIDCorporationsHandler: alliance.GetAlliancesAllianceIDCorporationsHandlerFunc(func(params alliance.GetAlliancesAllianceIDCorporationsParams) middleware.Responder {
			return middleware.NotImplemented("operation AllianceGetAlliancesAllianceIDCorporations has not yet been implemented")
		}),
		AllianceGetAlliancesAllianceIDIconsHandler: alliance.GetAlliancesAllianceIDIconsHandlerFunc(func(params alliance.GetAlliancesAllianceIDIconsParams) middleware.Responder {
			return middleware.NotImplemented("operation AllianceGetAlliancesAllianceIDIcons has not yet been implemented")
		}),
		AllianceGetAlliancesNamesHandler: alliance.GetAlliancesNamesHandlerFunc(func(params alliance.GetAlliancesNamesParams) middleware.Responder {
			return middleware.NotImplemented("operation AllianceGetAlliancesNames has not yet been implemented")
		}),
		CharacterGetCharactersCharacterIDHandler: character.GetCharactersCharacterIDHandlerFunc(func(params character.GetCharactersCharacterIDParams) middleware.Responder {
			return middleware.NotImplemented("operation CharacterGetCharactersCharacterID has not yet been implemented")
		}),
		CharacterGetCharactersCharacterIDAgentsResearchHandler: character.GetCharactersCharacterIDAgentsResearchHandlerFunc(func(params character.GetCharactersCharacterIDAgentsResearchParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CharacterGetCharactersCharacterIDAgentsResearch has not yet been implemented")
		}),
		AssetsGetCharactersCharacterIDAssetsHandler: assets.GetCharactersCharacterIDAssetsHandlerFunc(func(params assets.GetCharactersCharacterIDAssetsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation AssetsGetCharactersCharacterIDAssets has not yet been implemented")
		}),
		CharacterGetCharactersCharacterIDBlueprintsHandler: character.GetCharactersCharacterIDBlueprintsHandlerFunc(func(params character.GetCharactersCharacterIDBlueprintsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CharacterGetCharactersCharacterIDBlueprints has not yet been implemented")
		}),
		BookmarksGetCharactersCharacterIDBookmarksHandler: bookmarks.GetCharactersCharacterIDBookmarksHandlerFunc(func(params bookmarks.GetCharactersCharacterIDBookmarksParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation BookmarksGetCharactersCharacterIDBookmarks has not yet been implemented")
		}),
		BookmarksGetCharactersCharacterIDBookmarksFoldersHandler: bookmarks.GetCharactersCharacterIDBookmarksFoldersHandlerFunc(func(params bookmarks.GetCharactersCharacterIDBookmarksFoldersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation BookmarksGetCharactersCharacterIDBookmarksFolders has not yet been implemented")
		}),
		CalendarGetCharactersCharacterIDCalendarHandler: calendar.GetCharactersCharacterIDCalendarHandlerFunc(func(params calendar.GetCharactersCharacterIDCalendarParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CalendarGetCharactersCharacterIDCalendar has not yet been implemented")
		}),
		CalendarGetCharactersCharacterIDCalendarEventIDHandler: calendar.GetCharactersCharacterIDCalendarEventIDHandlerFunc(func(params calendar.GetCharactersCharacterIDCalendarEventIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CalendarGetCharactersCharacterIDCalendarEventID has not yet been implemented")
		}),
		CharacterGetCharactersCharacterIDChatChannelsHandler: character.GetCharactersCharacterIDChatChannelsHandlerFunc(func(params character.GetCharactersCharacterIDChatChannelsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CharacterGetCharactersCharacterIDChatChannels has not yet been implemented")
		}),
		ClonesGetCharactersCharacterIDClonesHandler: clones.GetCharactersCharacterIDClonesHandlerFunc(func(params clones.GetCharactersCharacterIDClonesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ClonesGetCharactersCharacterIDClones has not yet been implemented")
		}),
		ContactsGetCharactersCharacterIDContactsHandler: contacts.GetCharactersCharacterIDContactsHandlerFunc(func(params contacts.GetCharactersCharacterIDContactsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ContactsGetCharactersCharacterIDContacts has not yet been implemented")
		}),
		ContactsGetCharactersCharacterIDContactsLabelsHandler: contacts.GetCharactersCharacterIDContactsLabelsHandlerFunc(func(params contacts.GetCharactersCharacterIDContactsLabelsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ContactsGetCharactersCharacterIDContactsLabels has not yet been implemented")
		}),
		CharacterGetCharactersCharacterIDCorporationhistoryHandler: character.GetCharactersCharacterIDCorporationhistoryHandlerFunc(func(params character.GetCharactersCharacterIDCorporationhistoryParams) middleware.Responder {
			return middleware.NotImplemented("operation CharacterGetCharactersCharacterIDCorporationhistory has not yet been implemented")
		}),
		FittingsGetCharactersCharacterIDFittingsHandler: fittings.GetCharactersCharacterIDFittingsHandlerFunc(func(params fittings.GetCharactersCharacterIDFittingsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FittingsGetCharactersCharacterIDFittings has not yet been implemented")
		}),
		IndustryGetCharactersCharacterIDIndustryJobsHandler: industry.GetCharactersCharacterIDIndustryJobsHandlerFunc(func(params industry.GetCharactersCharacterIDIndustryJobsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation IndustryGetCharactersCharacterIDIndustryJobs has not yet been implemented")
		}),
		KillmailsGetCharactersCharacterIDKillmailsRecentHandler: killmails.GetCharactersCharacterIDKillmailsRecentHandlerFunc(func(params killmails.GetCharactersCharacterIDKillmailsRecentParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation KillmailsGetCharactersCharacterIDKillmailsRecent has not yet been implemented")
		}),
		LocationGetCharactersCharacterIDLocationHandler: location.GetCharactersCharacterIDLocationHandlerFunc(func(params location.GetCharactersCharacterIDLocationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation LocationGetCharactersCharacterIDLocation has not yet been implemented")
		}),
		LoyaltyGetCharactersCharacterIDLoyaltyPointsHandler: loyalty.GetCharactersCharacterIDLoyaltyPointsHandlerFunc(func(params loyalty.GetCharactersCharacterIDLoyaltyPointsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation LoyaltyGetCharactersCharacterIDLoyaltyPoints has not yet been implemented")
		}),
		MailGetCharactersCharacterIDMailHandler: mail.GetCharactersCharacterIDMailHandlerFunc(func(params mail.GetCharactersCharacterIDMailParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MailGetCharactersCharacterIDMail has not yet been implemented")
		}),
		MailGetCharactersCharacterIDMailLabelsHandler: mail.GetCharactersCharacterIDMailLabelsHandlerFunc(func(params mail.GetCharactersCharacterIDMailLabelsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MailGetCharactersCharacterIDMailLabels has not yet been implemented")
		}),
		MailGetCharactersCharacterIDMailListsHandler: mail.GetCharactersCharacterIDMailListsHandlerFunc(func(params mail.GetCharactersCharacterIDMailListsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MailGetCharactersCharacterIDMailLists has not yet been implemented")
		}),
		MailGetCharactersCharacterIDMailMailIDHandler: mail.GetCharactersCharacterIDMailMailIDHandlerFunc(func(params mail.GetCharactersCharacterIDMailMailIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MailGetCharactersCharacterIDMailMailID has not yet been implemented")
		}),
		CharacterGetCharactersCharacterIDMedalsHandler: character.GetCharactersCharacterIDMedalsHandlerFunc(func(params character.GetCharactersCharacterIDMedalsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CharacterGetCharactersCharacterIDMedals has not yet been implemented")
		}),
		LocationGetCharactersCharacterIDOnlineHandler: location.GetCharactersCharacterIDOnlineHandlerFunc(func(params location.GetCharactersCharacterIDOnlineParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation LocationGetCharactersCharacterIDOnline has not yet been implemented")
		}),
		OpportunitiesGetCharactersCharacterIDOpportunitiesHandler: opportunities.GetCharactersCharacterIDOpportunitiesHandlerFunc(func(params opportunities.GetCharactersCharacterIDOpportunitiesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation OpportunitiesGetCharactersCharacterIDOpportunities has not yet been implemented")
		}),
		MarketGetCharactersCharacterIDOrdersHandler: market.GetCharactersCharacterIDOrdersHandlerFunc(func(params market.GetCharactersCharacterIDOrdersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MarketGetCharactersCharacterIDOrders has not yet been implemented")
		}),
		PlanetaryInteractionGetCharactersCharacterIDPlanetsHandler: planetary_interaction.GetCharactersCharacterIDPlanetsHandlerFunc(func(params planetary_interaction.GetCharactersCharacterIDPlanetsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PlanetaryInteractionGetCharactersCharacterIDPlanets has not yet been implemented")
		}),
		PlanetaryInteractionGetCharactersCharacterIDPlanetsPlanetIDHandler: planetary_interaction.GetCharactersCharacterIDPlanetsPlanetIDHandlerFunc(func(params planetary_interaction.GetCharactersCharacterIDPlanetsPlanetIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation PlanetaryInteractionGetCharactersCharacterIDPlanetsPlanetID has not yet been implemented")
		}),
		CharacterGetCharactersCharacterIDPortraitHandler: character.GetCharactersCharacterIDPortraitHandlerFunc(func(params character.GetCharactersCharacterIDPortraitParams) middleware.Responder {
			return middleware.NotImplemented("operation CharacterGetCharactersCharacterIDPortrait has not yet been implemented")
		}),
		CharacterGetCharactersCharacterIDRolesHandler: character.GetCharactersCharacterIDRolesHandlerFunc(func(params character.GetCharactersCharacterIDRolesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CharacterGetCharactersCharacterIDRoles has not yet been implemented")
		}),
		SearchGetCharactersCharacterIDSearchHandler: search.GetCharactersCharacterIDSearchHandlerFunc(func(params search.GetCharactersCharacterIDSearchParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation SearchGetCharactersCharacterIDSearch has not yet been implemented")
		}),
		LocationGetCharactersCharacterIDShipHandler: location.GetCharactersCharacterIDShipHandlerFunc(func(params location.GetCharactersCharacterIDShipParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation LocationGetCharactersCharacterIDShip has not yet been implemented")
		}),
		SkillsGetCharactersCharacterIDSkillqueueHandler: skills.GetCharactersCharacterIDSkillqueueHandlerFunc(func(params skills.GetCharactersCharacterIDSkillqueueParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation SkillsGetCharactersCharacterIDSkillqueue has not yet been implemented")
		}),
		SkillsGetCharactersCharacterIDSkillsHandler: skills.GetCharactersCharacterIDSkillsHandlerFunc(func(params skills.GetCharactersCharacterIDSkillsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation SkillsGetCharactersCharacterIDSkills has not yet been implemented")
		}),
		CharacterGetCharactersCharacterIDStandingsHandler: character.GetCharactersCharacterIDStandingsHandlerFunc(func(params character.GetCharactersCharacterIDStandingsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CharacterGetCharactersCharacterIDStandings has not yet been implemented")
		}),
		WalletGetCharactersCharacterIDWalletsHandler: wallet.GetCharactersCharacterIDWalletsHandlerFunc(func(params wallet.GetCharactersCharacterIDWalletsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation WalletGetCharactersCharacterIDWallets has not yet been implemented")
		}),
		CharacterGetCharactersNamesHandler: character.GetCharactersNamesHandlerFunc(func(params character.GetCharactersNamesParams) middleware.Responder {
			return middleware.NotImplemented("operation CharacterGetCharactersNames has not yet been implemented")
		}),
		CorporationGetCorporationsCorporationIDHandler: corporation.GetCorporationsCorporationIDHandlerFunc(func(params corporation.GetCorporationsCorporationIDParams) middleware.Responder {
			return middleware.NotImplemented("operation CorporationGetCorporationsCorporationID has not yet been implemented")
		}),
		CorporationGetCorporationsCorporationIDAlliancehistoryHandler: corporation.GetCorporationsCorporationIDAlliancehistoryHandlerFunc(func(params corporation.GetCorporationsCorporationIDAlliancehistoryParams) middleware.Responder {
			return middleware.NotImplemented("operation CorporationGetCorporationsCorporationIDAlliancehistory has not yet been implemented")
		}),
		CorporationGetCorporationsCorporationIDIconsHandler: corporation.GetCorporationsCorporationIDIconsHandlerFunc(func(params corporation.GetCorporationsCorporationIDIconsParams) middleware.Responder {
			return middleware.NotImplemented("operation CorporationGetCorporationsCorporationIDIcons has not yet been implemented")
		}),
		CorporationGetCorporationsCorporationIDMembersHandler: corporation.GetCorporationsCorporationIDMembersHandlerFunc(func(params corporation.GetCorporationsCorporationIDMembersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CorporationGetCorporationsCorporationIDMembers has not yet been implemented")
		}),
		CorporationGetCorporationsCorporationIDRolesHandler: corporation.GetCorporationsCorporationIDRolesHandlerFunc(func(params corporation.GetCorporationsCorporationIDRolesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CorporationGetCorporationsCorporationIDRoles has not yet been implemented")
		}),
		CorporationGetCorporationsCorporationIDStructuresHandler: corporation.GetCorporationsCorporationIDStructuresHandlerFunc(func(params corporation.GetCorporationsCorporationIDStructuresParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CorporationGetCorporationsCorporationIDStructures has not yet been implemented")
		}),
		CorporationGetCorporationsNamesHandler: corporation.GetCorporationsNamesHandlerFunc(func(params corporation.GetCorporationsNamesParams) middleware.Responder {
			return middleware.NotImplemented("operation CorporationGetCorporationsNames has not yet been implemented")
		}),
		CorporationGetCorporationsNpccorpsHandler: corporation.GetCorporationsNpccorpsHandlerFunc(func(params corporation.GetCorporationsNpccorpsParams) middleware.Responder {
			return middleware.NotImplemented("operation CorporationGetCorporationsNpccorps has not yet been implemented")
		}),
		DogmaGetDogmaAttributesHandler: dogma.GetDogmaAttributesHandlerFunc(func(params dogma.GetDogmaAttributesParams) middleware.Responder {
			return middleware.NotImplemented("operation DogmaGetDogmaAttributes has not yet been implemented")
		}),
		DogmaGetDogmaAttributesAttributeIDHandler: dogma.GetDogmaAttributesAttributeIDHandlerFunc(func(params dogma.GetDogmaAttributesAttributeIDParams) middleware.Responder {
			return middleware.NotImplemented("operation DogmaGetDogmaAttributesAttributeID has not yet been implemented")
		}),
		DogmaGetDogmaEffectsHandler: dogma.GetDogmaEffectsHandlerFunc(func(params dogma.GetDogmaEffectsParams) middleware.Responder {
			return middleware.NotImplemented("operation DogmaGetDogmaEffects has not yet been implemented")
		}),
		DogmaGetDogmaEffectsEffectIDHandler: dogma.GetDogmaEffectsEffectIDHandlerFunc(func(params dogma.GetDogmaEffectsEffectIDParams) middleware.Responder {
			return middleware.NotImplemented("operation DogmaGetDogmaEffectsEffectID has not yet been implemented")
		}),
		FleetsGetFleetsFleetIDHandler: fleets.GetFleetsFleetIDHandlerFunc(func(params fleets.GetFleetsFleetIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FleetsGetFleetsFleetID has not yet been implemented")
		}),
		FleetsGetFleetsFleetIDMembersHandler: fleets.GetFleetsFleetIDMembersHandlerFunc(func(params fleets.GetFleetsFleetIDMembersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FleetsGetFleetsFleetIDMembers has not yet been implemented")
		}),
		FleetsGetFleetsFleetIDWingsHandler: fleets.GetFleetsFleetIDWingsHandlerFunc(func(params fleets.GetFleetsFleetIDWingsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FleetsGetFleetsFleetIDWings has not yet been implemented")
		}),
		IncursionsGetIncursionsHandler: incursions.GetIncursionsHandlerFunc(func(params incursions.GetIncursionsParams) middleware.Responder {
			return middleware.NotImplemented("operation IncursionsGetIncursions has not yet been implemented")
		}),
		IndustryGetIndustryFacilitiesHandler: industry.GetIndustryFacilitiesHandlerFunc(func(params industry.GetIndustryFacilitiesParams) middleware.Responder {
			return middleware.NotImplemented("operation IndustryGetIndustryFacilities has not yet been implemented")
		}),
		IndustryGetIndustrySystemsHandler: industry.GetIndustrySystemsHandlerFunc(func(params industry.GetIndustrySystemsParams) middleware.Responder {
			return middleware.NotImplemented("operation IndustryGetIndustrySystems has not yet been implemented")
		}),
		InsuranceGetInsurancePricesHandler: insurance.GetInsurancePricesHandlerFunc(func(params insurance.GetInsurancePricesParams) middleware.Responder {
			return middleware.NotImplemented("operation InsuranceGetInsurancePrices has not yet been implemented")
		}),
		KillmailsGetKillmailsKillmailIDKillmailHashHandler: killmails.GetKillmailsKillmailIDKillmailHashHandlerFunc(func(params killmails.GetKillmailsKillmailIDKillmailHashParams) middleware.Responder {
			return middleware.NotImplemented("operation KillmailsGetKillmailsKillmailIDKillmailHash has not yet been implemented")
		}),
		LoyaltyGetLoyaltyStoresCorporationIDOffersHandler: loyalty.GetLoyaltyStoresCorporationIDOffersHandlerFunc(func(params loyalty.GetLoyaltyStoresCorporationIDOffersParams) middleware.Responder {
			return middleware.NotImplemented("operation LoyaltyGetLoyaltyStoresCorporationIDOffers has not yet been implemented")
		}),
		MarketGetMarketsGroupsHandler: market.GetMarketsGroupsHandlerFunc(func(params market.GetMarketsGroupsParams) middleware.Responder {
			return middleware.NotImplemented("operation MarketGetMarketsGroups has not yet been implemented")
		}),
		MarketGetMarketsGroupsMarketGroupIDHandler: market.GetMarketsGroupsMarketGroupIDHandlerFunc(func(params market.GetMarketsGroupsMarketGroupIDParams) middleware.Responder {
			return middleware.NotImplemented("operation MarketGetMarketsGroupsMarketGroupID has not yet been implemented")
		}),
		MarketGetMarketsPricesHandler: market.GetMarketsPricesHandlerFunc(func(params market.GetMarketsPricesParams) middleware.Responder {
			return middleware.NotImplemented("operation MarketGetMarketsPrices has not yet been implemented")
		}),
		MarketGetMarketsRegionIDHistoryHandler: market.GetMarketsRegionIDHistoryHandlerFunc(func(params market.GetMarketsRegionIDHistoryParams) middleware.Responder {
			return middleware.NotImplemented("operation MarketGetMarketsRegionIDHistory has not yet been implemented")
		}),
		MarketGetMarketsRegionIDOrdersHandler: market.GetMarketsRegionIDOrdersHandlerFunc(func(params market.GetMarketsRegionIDOrdersParams) middleware.Responder {
			return middleware.NotImplemented("operation MarketGetMarketsRegionIDOrders has not yet been implemented")
		}),
		MarketGetMarketsStructuresStructureIDHandler: market.GetMarketsStructuresStructureIDHandlerFunc(func(params market.GetMarketsStructuresStructureIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MarketGetMarketsStructuresStructureID has not yet been implemented")
		}),
		OpportunitiesGetOpportunitiesGroupsHandler: opportunities.GetOpportunitiesGroupsHandlerFunc(func(params opportunities.GetOpportunitiesGroupsParams) middleware.Responder {
			return middleware.NotImplemented("operation OpportunitiesGetOpportunitiesGroups has not yet been implemented")
		}),
		OpportunitiesGetOpportunitiesGroupsGroupIDHandler: opportunities.GetOpportunitiesGroupsGroupIDHandlerFunc(func(params opportunities.GetOpportunitiesGroupsGroupIDParams) middleware.Responder {
			return middleware.NotImplemented("operation OpportunitiesGetOpportunitiesGroupsGroupID has not yet been implemented")
		}),
		OpportunitiesGetOpportunitiesTasksHandler: opportunities.GetOpportunitiesTasksHandlerFunc(func(params opportunities.GetOpportunitiesTasksParams) middleware.Responder {
			return middleware.NotImplemented("operation OpportunitiesGetOpportunitiesTasks has not yet been implemented")
		}),
		OpportunitiesGetOpportunitiesTasksTaskIDHandler: opportunities.GetOpportunitiesTasksTaskIDHandlerFunc(func(params opportunities.GetOpportunitiesTasksTaskIDParams) middleware.Responder {
			return middleware.NotImplemented("operation OpportunitiesGetOpportunitiesTasksTaskID has not yet been implemented")
		}),
		SearchGetSearchHandler: search.GetSearchHandlerFunc(func(params search.GetSearchParams) middleware.Responder {
			return middleware.NotImplemented("operation SearchGetSearch has not yet been implemented")
		}),
		SovereigntyGetSovereigntyCampaignsHandler: sovereignty.GetSovereigntyCampaignsHandlerFunc(func(params sovereignty.GetSovereigntyCampaignsParams) middleware.Responder {
			return middleware.NotImplemented("operation SovereigntyGetSovereigntyCampaigns has not yet been implemented")
		}),
		SovereigntyGetSovereigntyMapHandler: sovereignty.GetSovereigntyMapHandlerFunc(func(params sovereignty.GetSovereigntyMapParams) middleware.Responder {
			return middleware.NotImplemented("operation SovereigntyGetSovereigntyMap has not yet been implemented")
		}),
		SovereigntyGetSovereigntyStructuresHandler: sovereignty.GetSovereigntyStructuresHandlerFunc(func(params sovereignty.GetSovereigntyStructuresParams) middleware.Responder {
			return middleware.NotImplemented("operation SovereigntyGetSovereigntyStructures has not yet been implemented")
		}),
		StatusGetStatusHandler: status.GetStatusHandlerFunc(func(params status.GetStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation StatusGetStatus has not yet been implemented")
		}),
		UniverseGetUniverseBloodlinesHandler: universe.GetUniverseBloodlinesHandlerFunc(func(params universe.GetUniverseBloodlinesParams) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniverseBloodlines has not yet been implemented")
		}),
		UniverseGetUniverseCategoriesHandler: universe.GetUniverseCategoriesHandlerFunc(func(params universe.GetUniverseCategoriesParams) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniverseCategories has not yet been implemented")
		}),
		UniverseGetUniverseCategoriesCategoryIDHandler: universe.GetUniverseCategoriesCategoryIDHandlerFunc(func(params universe.GetUniverseCategoriesCategoryIDParams) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniverseCategoriesCategoryID has not yet been implemented")
		}),
		UniverseGetUniverseConstellationsHandler: universe.GetUniverseConstellationsHandlerFunc(func(params universe.GetUniverseConstellationsParams) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniverseConstellations has not yet been implemented")
		}),
		UniverseGetUniverseConstellationsConstellationIDHandler: universe.GetUniverseConstellationsConstellationIDHandlerFunc(func(params universe.GetUniverseConstellationsConstellationIDParams) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniverseConstellationsConstellationID has not yet been implemented")
		}),
		UniverseGetUniverseFactionsHandler: universe.GetUniverseFactionsHandlerFunc(func(params universe.GetUniverseFactionsParams) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniverseFactions has not yet been implemented")
		}),
		UniverseGetUniverseGraphicsHandler: universe.GetUniverseGraphicsHandlerFunc(func(params universe.GetUniverseGraphicsParams) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniverseGraphics has not yet been implemented")
		}),
		UniverseGetUniverseGraphicsGraphicIDHandler: universe.GetUniverseGraphicsGraphicIDHandlerFunc(func(params universe.GetUniverseGraphicsGraphicIDParams) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniverseGraphicsGraphicID has not yet been implemented")
		}),
		UniverseGetUniverseGroupsHandler: universe.GetUniverseGroupsHandlerFunc(func(params universe.GetUniverseGroupsParams) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniverseGroups has not yet been implemented")
		}),
		UniverseGetUniverseGroupsGroupIDHandler: universe.GetUniverseGroupsGroupIDHandlerFunc(func(params universe.GetUniverseGroupsGroupIDParams) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniverseGroupsGroupID has not yet been implemented")
		}),
		UniverseGetUniverseMoonsMoonIDHandler: universe.GetUniverseMoonsMoonIDHandlerFunc(func(params universe.GetUniverseMoonsMoonIDParams) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniverseMoonsMoonID has not yet been implemented")
		}),
		UniverseGetUniversePlanetsPlanetIDHandler: universe.GetUniversePlanetsPlanetIDHandlerFunc(func(params universe.GetUniversePlanetsPlanetIDParams) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniversePlanetsPlanetID has not yet been implemented")
		}),
		UniverseGetUniverseRacesHandler: universe.GetUniverseRacesHandlerFunc(func(params universe.GetUniverseRacesParams) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniverseRaces has not yet been implemented")
		}),
		UniverseGetUniverseRegionsHandler: universe.GetUniverseRegionsHandlerFunc(func(params universe.GetUniverseRegionsParams) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniverseRegions has not yet been implemented")
		}),
		UniverseGetUniverseRegionsRegionIDHandler: universe.GetUniverseRegionsRegionIDHandlerFunc(func(params universe.GetUniverseRegionsRegionIDParams) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniverseRegionsRegionID has not yet been implemented")
		}),
		PlanetaryInteractionGetUniverseSchematicsSchematicIDHandler: planetary_interaction.GetUniverseSchematicsSchematicIDHandlerFunc(func(params planetary_interaction.GetUniverseSchematicsSchematicIDParams) middleware.Responder {
			return middleware.NotImplemented("operation PlanetaryInteractionGetUniverseSchematicsSchematicID has not yet been implemented")
		}),
		UniverseGetUniverseStargatesStargateIDHandler: universe.GetUniverseStargatesStargateIDHandlerFunc(func(params universe.GetUniverseStargatesStargateIDParams) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniverseStargatesStargateID has not yet been implemented")
		}),
		UniverseGetUniverseStationsStationIDHandler: universe.GetUniverseStationsStationIDHandlerFunc(func(params universe.GetUniverseStationsStationIDParams) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniverseStationsStationID has not yet been implemented")
		}),
		UniverseGetUniverseStructuresHandler: universe.GetUniverseStructuresHandlerFunc(func(params universe.GetUniverseStructuresParams) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniverseStructures has not yet been implemented")
		}),
		UniverseGetUniverseStructuresStructureIDHandler: universe.GetUniverseStructuresStructureIDHandlerFunc(func(params universe.GetUniverseStructuresStructureIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniverseStructuresStructureID has not yet been implemented")
		}),
		UniverseGetUniverseSystemJumpsHandler: universe.GetUniverseSystemJumpsHandlerFunc(func(params universe.GetUniverseSystemJumpsParams) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniverseSystemJumps has not yet been implemented")
		}),
		UniverseGetUniverseSystemKillsHandler: universe.GetUniverseSystemKillsHandlerFunc(func(params universe.GetUniverseSystemKillsParams) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniverseSystemKills has not yet been implemented")
		}),
		UniverseGetUniverseSystemsHandler: universe.GetUniverseSystemsHandlerFunc(func(params universe.GetUniverseSystemsParams) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniverseSystems has not yet been implemented")
		}),
		UniverseGetUniverseSystemsSystemIDHandler: universe.GetUniverseSystemsSystemIDHandlerFunc(func(params universe.GetUniverseSystemsSystemIDParams) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniverseSystemsSystemID has not yet been implemented")
		}),
		UniverseGetUniverseTypesHandler: universe.GetUniverseTypesHandlerFunc(func(params universe.GetUniverseTypesParams) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniverseTypes has not yet been implemented")
		}),
		UniverseGetUniverseTypesTypeIDHandler: universe.GetUniverseTypesTypeIDHandlerFunc(func(params universe.GetUniverseTypesTypeIDParams) middleware.Responder {
			return middleware.NotImplemented("operation UniverseGetUniverseTypesTypeID has not yet been implemented")
		}),
		WarsGetWarsHandler: wars.GetWarsHandlerFunc(func(params wars.GetWarsParams) middleware.Responder {
			return middleware.NotImplemented("operation WarsGetWars has not yet been implemented")
		}),
		WarsGetWarsWarIDHandler: wars.GetWarsWarIDHandlerFunc(func(params wars.GetWarsWarIDParams) middleware.Responder {
			return middleware.NotImplemented("operation WarsGetWarsWarID has not yet been implemented")
		}),
		WarsGetWarsWarIDKillmailsHandler: wars.GetWarsWarIDKillmailsHandlerFunc(func(params wars.GetWarsWarIDKillmailsParams) middleware.Responder {
			return middleware.NotImplemented("operation WarsGetWarsWarIDKillmails has not yet been implemented")
		}),
		CharacterPostCharactersAffiliationHandler: character.PostCharactersAffiliationHandlerFunc(func(params character.PostCharactersAffiliationParams) middleware.Responder {
			return middleware.NotImplemented("operation CharacterPostCharactersAffiliation has not yet been implemented")
		}),
		ContactsPostCharactersCharacterIDContactsHandler: contacts.PostCharactersCharacterIDContactsHandlerFunc(func(params contacts.PostCharactersCharacterIDContactsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ContactsPostCharactersCharacterIDContacts has not yet been implemented")
		}),
		CharacterPostCharactersCharacterIDCspaHandler: character.PostCharactersCharacterIDCspaHandlerFunc(func(params character.PostCharactersCharacterIDCspaParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CharacterPostCharactersCharacterIDCspa has not yet been implemented")
		}),
		FittingsPostCharactersCharacterIDFittingsHandler: fittings.PostCharactersCharacterIDFittingsHandlerFunc(func(params fittings.PostCharactersCharacterIDFittingsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FittingsPostCharactersCharacterIDFittings has not yet been implemented")
		}),
		MailPostCharactersCharacterIDMailHandler: mail.PostCharactersCharacterIDMailHandlerFunc(func(params mail.PostCharactersCharacterIDMailParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MailPostCharactersCharacterIDMail has not yet been implemented")
		}),
		MailPostCharactersCharacterIDMailLabelsHandler: mail.PostCharactersCharacterIDMailLabelsHandlerFunc(func(params mail.PostCharactersCharacterIDMailLabelsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MailPostCharactersCharacterIDMailLabels has not yet been implemented")
		}),
		FleetsPostFleetsFleetIDMembersHandler: fleets.PostFleetsFleetIDMembersHandlerFunc(func(params fleets.PostFleetsFleetIDMembersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FleetsPostFleetsFleetIDMembers has not yet been implemented")
		}),
		FleetsPostFleetsFleetIDWingsHandler: fleets.PostFleetsFleetIDWingsHandlerFunc(func(params fleets.PostFleetsFleetIDWingsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FleetsPostFleetsFleetIDWings has not yet been implemented")
		}),
		FleetsPostFleetsFleetIDWingsWingIDSquadsHandler: fleets.PostFleetsFleetIDWingsWingIDSquadsHandlerFunc(func(params fleets.PostFleetsFleetIDWingsWingIDSquadsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FleetsPostFleetsFleetIDWingsWingIDSquads has not yet been implemented")
		}),
		UserInterfacePostUIAutopilotWaypointHandler: user_interface.PostUIAutopilotWaypointHandlerFunc(func(params user_interface.PostUIAutopilotWaypointParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation UserInterfacePostUIAutopilotWaypoint has not yet been implemented")
		}),
		UserInterfacePostUIOpenwindowContractHandler: user_interface.PostUIOpenwindowContractHandlerFunc(func(params user_interface.PostUIOpenwindowContractParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation UserInterfacePostUIOpenwindowContract has not yet been implemented")
		}),
		UserInterfacePostUIOpenwindowInformationHandler: user_interface.PostUIOpenwindowInformationHandlerFunc(func(params user_interface.PostUIOpenwindowInformationParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation UserInterfacePostUIOpenwindowInformation has not yet been implemented")
		}),
		UserInterfacePostUIOpenwindowMarketdetailsHandler: user_interface.PostUIOpenwindowMarketdetailsHandlerFunc(func(params user_interface.PostUIOpenwindowMarketdetailsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation UserInterfacePostUIOpenwindowMarketdetails has not yet been implemented")
		}),
		UserInterfacePostUIOpenwindowNewmailHandler: user_interface.PostUIOpenwindowNewmailHandlerFunc(func(params user_interface.PostUIOpenwindowNewmailParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation UserInterfacePostUIOpenwindowNewmail has not yet been implemented")
		}),
		UniversePostUniverseNamesHandler: universe.PostUniverseNamesHandlerFunc(func(params universe.PostUniverseNamesParams) middleware.Responder {
			return middleware.NotImplemented("operation UniversePostUniverseNames has not yet been implemented")
		}),
		CalendarPutCharactersCharacterIDCalendarEventIDHandler: calendar.PutCharactersCharacterIDCalendarEventIDHandlerFunc(func(params calendar.PutCharactersCharacterIDCalendarEventIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CalendarPutCharactersCharacterIDCalendarEventID has not yet been implemented")
		}),
		ContactsPutCharactersCharacterIDContactsHandler: contacts.PutCharactersCharacterIDContactsHandlerFunc(func(params contacts.PutCharactersCharacterIDContactsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation ContactsPutCharactersCharacterIDContacts has not yet been implemented")
		}),
		MailPutCharactersCharacterIDMailMailIDHandler: mail.PutCharactersCharacterIDMailMailIDHandlerFunc(func(params mail.PutCharactersCharacterIDMailMailIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation MailPutCharactersCharacterIDMailMailID has not yet been implemented")
		}),
		CorporationPutCorporationsCorporationIDStructuresStructureIDHandler: corporation.PutCorporationsCorporationIDStructuresStructureIDHandlerFunc(func(params corporation.PutCorporationsCorporationIDStructuresStructureIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation CorporationPutCorporationsCorporationIDStructuresStructureID has not yet been implemented")
		}),
		FleetsPutFleetsFleetIDHandler: fleets.PutFleetsFleetIDHandlerFunc(func(params fleets.PutFleetsFleetIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FleetsPutFleetsFleetID has not yet been implemented")
		}),
		FleetsPutFleetsFleetIDMembersMemberIDHandler: fleets.PutFleetsFleetIDMembersMemberIDHandlerFunc(func(params fleets.PutFleetsFleetIDMembersMemberIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FleetsPutFleetsFleetIDMembersMemberID has not yet been implemented")
		}),
		FleetsPutFleetsFleetIDSquadsSquadIDHandler: fleets.PutFleetsFleetIDSquadsSquadIDHandlerFunc(func(params fleets.PutFleetsFleetIDSquadsSquadIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FleetsPutFleetsFleetIDSquadsSquadID has not yet been implemented")
		}),
		FleetsPutFleetsFleetIDWingsWingIDHandler: fleets.PutFleetsFleetIDWingsWingIDHandlerFunc(func(params fleets.PutFleetsFleetIDWingsWingIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation FleetsPutFleetsFleetIDWingsWingID has not yet been implemented")
		}),

		EvessoAuth: func(token string, scopes []string) (interface{}, error) {
			return nil, errors.NotImplemented("oauth2 bearer auth (evesso) has not yet been implemented")
		},
	}
}

/*EsiAPI An OpenAPI for EVE Online */
type EsiAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// EvessoAuth registers a function that takes an access token and a collection of required scopes and returns a principal
	// it performs authentication based on an oauth2 bearer token provided in the request
	EvessoAuth func(string, []string) (interface{}, error)

	// ContactsDeleteCharactersCharacterIDContactsHandler sets the operation handler for the delete characters character id contacts operation
	ContactsDeleteCharactersCharacterIDContactsHandler contacts.DeleteCharactersCharacterIDContactsHandler
	// FittingsDeleteCharactersCharacterIDFittingsFittingIDHandler sets the operation handler for the delete characters character id fittings fitting id operation
	FittingsDeleteCharactersCharacterIDFittingsFittingIDHandler fittings.DeleteCharactersCharacterIDFittingsFittingIDHandler
	// MailDeleteCharactersCharacterIDMailLabelsLabelIDHandler sets the operation handler for the delete characters character id mail labels label id operation
	MailDeleteCharactersCharacterIDMailLabelsLabelIDHandler mail.DeleteCharactersCharacterIDMailLabelsLabelIDHandler
	// MailDeleteCharactersCharacterIDMailMailIDHandler sets the operation handler for the delete characters character id mail mail id operation
	MailDeleteCharactersCharacterIDMailMailIDHandler mail.DeleteCharactersCharacterIDMailMailIDHandler
	// FleetsDeleteFleetsFleetIDMembersMemberIDHandler sets the operation handler for the delete fleets fleet id members member id operation
	FleetsDeleteFleetsFleetIDMembersMemberIDHandler fleets.DeleteFleetsFleetIDMembersMemberIDHandler
	// FleetsDeleteFleetsFleetIDSquadsSquadIDHandler sets the operation handler for the delete fleets fleet id squads squad id operation
	FleetsDeleteFleetsFleetIDSquadsSquadIDHandler fleets.DeleteFleetsFleetIDSquadsSquadIDHandler
	// FleetsDeleteFleetsFleetIDWingsWingIDHandler sets the operation handler for the delete fleets fleet id wings wing id operation
	FleetsDeleteFleetsFleetIDWingsWingIDHandler fleets.DeleteFleetsFleetIDWingsWingIDHandler
	// AllianceGetAlliancesHandler sets the operation handler for the get alliances operation
	AllianceGetAlliancesHandler alliance.GetAlliancesHandler
	// AllianceGetAlliancesAllianceIDHandler sets the operation handler for the get alliances alliance id operation
	AllianceGetAlliancesAllianceIDHandler alliance.GetAlliancesAllianceIDHandler
	// AllianceGetAlliancesAllianceIDCorporationsHandler sets the operation handler for the get alliances alliance id corporations operation
	AllianceGetAlliancesAllianceIDCorporationsHandler alliance.GetAlliancesAllianceIDCorporationsHandler
	// AllianceGetAlliancesAllianceIDIconsHandler sets the operation handler for the get alliances alliance id icons operation
	AllianceGetAlliancesAllianceIDIconsHandler alliance.GetAlliancesAllianceIDIconsHandler
	// AllianceGetAlliancesNamesHandler sets the operation handler for the get alliances names operation
	AllianceGetAlliancesNamesHandler alliance.GetAlliancesNamesHandler
	// CharacterGetCharactersCharacterIDHandler sets the operation handler for the get characters character id operation
	CharacterGetCharactersCharacterIDHandler character.GetCharactersCharacterIDHandler
	// CharacterGetCharactersCharacterIDAgentsResearchHandler sets the operation handler for the get characters character id agents research operation
	CharacterGetCharactersCharacterIDAgentsResearchHandler character.GetCharactersCharacterIDAgentsResearchHandler
	// AssetsGetCharactersCharacterIDAssetsHandler sets the operation handler for the get characters character id assets operation
	AssetsGetCharactersCharacterIDAssetsHandler assets.GetCharactersCharacterIDAssetsHandler
	// CharacterGetCharactersCharacterIDBlueprintsHandler sets the operation handler for the get characters character id blueprints operation
	CharacterGetCharactersCharacterIDBlueprintsHandler character.GetCharactersCharacterIDBlueprintsHandler
	// BookmarksGetCharactersCharacterIDBookmarksHandler sets the operation handler for the get characters character id bookmarks operation
	BookmarksGetCharactersCharacterIDBookmarksHandler bookmarks.GetCharactersCharacterIDBookmarksHandler
	// BookmarksGetCharactersCharacterIDBookmarksFoldersHandler sets the operation handler for the get characters character id bookmarks folders operation
	BookmarksGetCharactersCharacterIDBookmarksFoldersHandler bookmarks.GetCharactersCharacterIDBookmarksFoldersHandler
	// CalendarGetCharactersCharacterIDCalendarHandler sets the operation handler for the get characters character id calendar operation
	CalendarGetCharactersCharacterIDCalendarHandler calendar.GetCharactersCharacterIDCalendarHandler
	// CalendarGetCharactersCharacterIDCalendarEventIDHandler sets the operation handler for the get characters character id calendar event id operation
	CalendarGetCharactersCharacterIDCalendarEventIDHandler calendar.GetCharactersCharacterIDCalendarEventIDHandler
	// CharacterGetCharactersCharacterIDChatChannelsHandler sets the operation handler for the get characters character id chat channels operation
	CharacterGetCharactersCharacterIDChatChannelsHandler character.GetCharactersCharacterIDChatChannelsHandler
	// ClonesGetCharactersCharacterIDClonesHandler sets the operation handler for the get characters character id clones operation
	ClonesGetCharactersCharacterIDClonesHandler clones.GetCharactersCharacterIDClonesHandler
	// ContactsGetCharactersCharacterIDContactsHandler sets the operation handler for the get characters character id contacts operation
	ContactsGetCharactersCharacterIDContactsHandler contacts.GetCharactersCharacterIDContactsHandler
	// ContactsGetCharactersCharacterIDContactsLabelsHandler sets the operation handler for the get characters character id contacts labels operation
	ContactsGetCharactersCharacterIDContactsLabelsHandler contacts.GetCharactersCharacterIDContactsLabelsHandler
	// CharacterGetCharactersCharacterIDCorporationhistoryHandler sets the operation handler for the get characters character id corporationhistory operation
	CharacterGetCharactersCharacterIDCorporationhistoryHandler character.GetCharactersCharacterIDCorporationhistoryHandler
	// FittingsGetCharactersCharacterIDFittingsHandler sets the operation handler for the get characters character id fittings operation
	FittingsGetCharactersCharacterIDFittingsHandler fittings.GetCharactersCharacterIDFittingsHandler
	// IndustryGetCharactersCharacterIDIndustryJobsHandler sets the operation handler for the get characters character id industry jobs operation
	IndustryGetCharactersCharacterIDIndustryJobsHandler industry.GetCharactersCharacterIDIndustryJobsHandler
	// KillmailsGetCharactersCharacterIDKillmailsRecentHandler sets the operation handler for the get characters character id killmails recent operation
	KillmailsGetCharactersCharacterIDKillmailsRecentHandler killmails.GetCharactersCharacterIDKillmailsRecentHandler
	// LocationGetCharactersCharacterIDLocationHandler sets the operation handler for the get characters character id location operation
	LocationGetCharactersCharacterIDLocationHandler location.GetCharactersCharacterIDLocationHandler
	// LoyaltyGetCharactersCharacterIDLoyaltyPointsHandler sets the operation handler for the get characters character id loyalty points operation
	LoyaltyGetCharactersCharacterIDLoyaltyPointsHandler loyalty.GetCharactersCharacterIDLoyaltyPointsHandler
	// MailGetCharactersCharacterIDMailHandler sets the operation handler for the get characters character id mail operation
	MailGetCharactersCharacterIDMailHandler mail.GetCharactersCharacterIDMailHandler
	// MailGetCharactersCharacterIDMailLabelsHandler sets the operation handler for the get characters character id mail labels operation
	MailGetCharactersCharacterIDMailLabelsHandler mail.GetCharactersCharacterIDMailLabelsHandler
	// MailGetCharactersCharacterIDMailListsHandler sets the operation handler for the get characters character id mail lists operation
	MailGetCharactersCharacterIDMailListsHandler mail.GetCharactersCharacterIDMailListsHandler
	// MailGetCharactersCharacterIDMailMailIDHandler sets the operation handler for the get characters character id mail mail id operation
	MailGetCharactersCharacterIDMailMailIDHandler mail.GetCharactersCharacterIDMailMailIDHandler
	// CharacterGetCharactersCharacterIDMedalsHandler sets the operation handler for the get characters character id medals operation
	CharacterGetCharactersCharacterIDMedalsHandler character.GetCharactersCharacterIDMedalsHandler
	// LocationGetCharactersCharacterIDOnlineHandler sets the operation handler for the get characters character id online operation
	LocationGetCharactersCharacterIDOnlineHandler location.GetCharactersCharacterIDOnlineHandler
	// OpportunitiesGetCharactersCharacterIDOpportunitiesHandler sets the operation handler for the get characters character id opportunities operation
	OpportunitiesGetCharactersCharacterIDOpportunitiesHandler opportunities.GetCharactersCharacterIDOpportunitiesHandler
	// MarketGetCharactersCharacterIDOrdersHandler sets the operation handler for the get characters character id orders operation
	MarketGetCharactersCharacterIDOrdersHandler market.GetCharactersCharacterIDOrdersHandler
	// PlanetaryInteractionGetCharactersCharacterIDPlanetsHandler sets the operation handler for the get characters character id planets operation
	PlanetaryInteractionGetCharactersCharacterIDPlanetsHandler planetary_interaction.GetCharactersCharacterIDPlanetsHandler
	// PlanetaryInteractionGetCharactersCharacterIDPlanetsPlanetIDHandler sets the operation handler for the get characters character id planets planet id operation
	PlanetaryInteractionGetCharactersCharacterIDPlanetsPlanetIDHandler planetary_interaction.GetCharactersCharacterIDPlanetsPlanetIDHandler
	// CharacterGetCharactersCharacterIDPortraitHandler sets the operation handler for the get characters character id portrait operation
	CharacterGetCharactersCharacterIDPortraitHandler character.GetCharactersCharacterIDPortraitHandler
	// CharacterGetCharactersCharacterIDRolesHandler sets the operation handler for the get characters character id roles operation
	CharacterGetCharactersCharacterIDRolesHandler character.GetCharactersCharacterIDRolesHandler
	// SearchGetCharactersCharacterIDSearchHandler sets the operation handler for the get characters character id search operation
	SearchGetCharactersCharacterIDSearchHandler search.GetCharactersCharacterIDSearchHandler
	// LocationGetCharactersCharacterIDShipHandler sets the operation handler for the get characters character id ship operation
	LocationGetCharactersCharacterIDShipHandler location.GetCharactersCharacterIDShipHandler
	// SkillsGetCharactersCharacterIDSkillqueueHandler sets the operation handler for the get characters character id skillqueue operation
	SkillsGetCharactersCharacterIDSkillqueueHandler skills.GetCharactersCharacterIDSkillqueueHandler
	// SkillsGetCharactersCharacterIDSkillsHandler sets the operation handler for the get characters character id skills operation
	SkillsGetCharactersCharacterIDSkillsHandler skills.GetCharactersCharacterIDSkillsHandler
	// CharacterGetCharactersCharacterIDStandingsHandler sets the operation handler for the get characters character id standings operation
	CharacterGetCharactersCharacterIDStandingsHandler character.GetCharactersCharacterIDStandingsHandler
	// WalletGetCharactersCharacterIDWalletsHandler sets the operation handler for the get characters character id wallets operation
	WalletGetCharactersCharacterIDWalletsHandler wallet.GetCharactersCharacterIDWalletsHandler
	// CharacterGetCharactersNamesHandler sets the operation handler for the get characters names operation
	CharacterGetCharactersNamesHandler character.GetCharactersNamesHandler
	// CorporationGetCorporationsCorporationIDHandler sets the operation handler for the get corporations corporation id operation
	CorporationGetCorporationsCorporationIDHandler corporation.GetCorporationsCorporationIDHandler
	// CorporationGetCorporationsCorporationIDAlliancehistoryHandler sets the operation handler for the get corporations corporation id alliancehistory operation
	CorporationGetCorporationsCorporationIDAlliancehistoryHandler corporation.GetCorporationsCorporationIDAlliancehistoryHandler
	// CorporationGetCorporationsCorporationIDIconsHandler sets the operation handler for the get corporations corporation id icons operation
	CorporationGetCorporationsCorporationIDIconsHandler corporation.GetCorporationsCorporationIDIconsHandler
	// CorporationGetCorporationsCorporationIDMembersHandler sets the operation handler for the get corporations corporation id members operation
	CorporationGetCorporationsCorporationIDMembersHandler corporation.GetCorporationsCorporationIDMembersHandler
	// CorporationGetCorporationsCorporationIDRolesHandler sets the operation handler for the get corporations corporation id roles operation
	CorporationGetCorporationsCorporationIDRolesHandler corporation.GetCorporationsCorporationIDRolesHandler
	// CorporationGetCorporationsCorporationIDStructuresHandler sets the operation handler for the get corporations corporation id structures operation
	CorporationGetCorporationsCorporationIDStructuresHandler corporation.GetCorporationsCorporationIDStructuresHandler
	// CorporationGetCorporationsNamesHandler sets the operation handler for the get corporations names operation
	CorporationGetCorporationsNamesHandler corporation.GetCorporationsNamesHandler
	// CorporationGetCorporationsNpccorpsHandler sets the operation handler for the get corporations npccorps operation
	CorporationGetCorporationsNpccorpsHandler corporation.GetCorporationsNpccorpsHandler
	// DogmaGetDogmaAttributesHandler sets the operation handler for the get dogma attributes operation
	DogmaGetDogmaAttributesHandler dogma.GetDogmaAttributesHandler
	// DogmaGetDogmaAttributesAttributeIDHandler sets the operation handler for the get dogma attributes attribute id operation
	DogmaGetDogmaAttributesAttributeIDHandler dogma.GetDogmaAttributesAttributeIDHandler
	// DogmaGetDogmaEffectsHandler sets the operation handler for the get dogma effects operation
	DogmaGetDogmaEffectsHandler dogma.GetDogmaEffectsHandler
	// DogmaGetDogmaEffectsEffectIDHandler sets the operation handler for the get dogma effects effect id operation
	DogmaGetDogmaEffectsEffectIDHandler dogma.GetDogmaEffectsEffectIDHandler
	// FleetsGetFleetsFleetIDHandler sets the operation handler for the get fleets fleet id operation
	FleetsGetFleetsFleetIDHandler fleets.GetFleetsFleetIDHandler
	// FleetsGetFleetsFleetIDMembersHandler sets the operation handler for the get fleets fleet id members operation
	FleetsGetFleetsFleetIDMembersHandler fleets.GetFleetsFleetIDMembersHandler
	// FleetsGetFleetsFleetIDWingsHandler sets the operation handler for the get fleets fleet id wings operation
	FleetsGetFleetsFleetIDWingsHandler fleets.GetFleetsFleetIDWingsHandler
	// IncursionsGetIncursionsHandler sets the operation handler for the get incursions operation
	IncursionsGetIncursionsHandler incursions.GetIncursionsHandler
	// IndustryGetIndustryFacilitiesHandler sets the operation handler for the get industry facilities operation
	IndustryGetIndustryFacilitiesHandler industry.GetIndustryFacilitiesHandler
	// IndustryGetIndustrySystemsHandler sets the operation handler for the get industry systems operation
	IndustryGetIndustrySystemsHandler industry.GetIndustrySystemsHandler
	// InsuranceGetInsurancePricesHandler sets the operation handler for the get insurance prices operation
	InsuranceGetInsurancePricesHandler insurance.GetInsurancePricesHandler
	// KillmailsGetKillmailsKillmailIDKillmailHashHandler sets the operation handler for the get killmails killmail id killmail hash operation
	KillmailsGetKillmailsKillmailIDKillmailHashHandler killmails.GetKillmailsKillmailIDKillmailHashHandler
	// LoyaltyGetLoyaltyStoresCorporationIDOffersHandler sets the operation handler for the get loyalty stores corporation id offers operation
	LoyaltyGetLoyaltyStoresCorporationIDOffersHandler loyalty.GetLoyaltyStoresCorporationIDOffersHandler
	// MarketGetMarketsGroupsHandler sets the operation handler for the get markets groups operation
	MarketGetMarketsGroupsHandler market.GetMarketsGroupsHandler
	// MarketGetMarketsGroupsMarketGroupIDHandler sets the operation handler for the get markets groups market group id operation
	MarketGetMarketsGroupsMarketGroupIDHandler market.GetMarketsGroupsMarketGroupIDHandler
	// MarketGetMarketsPricesHandler sets the operation handler for the get markets prices operation
	MarketGetMarketsPricesHandler market.GetMarketsPricesHandler
	// MarketGetMarketsRegionIDHistoryHandler sets the operation handler for the get markets region id history operation
	MarketGetMarketsRegionIDHistoryHandler market.GetMarketsRegionIDHistoryHandler
	// MarketGetMarketsRegionIDOrdersHandler sets the operation handler for the get markets region id orders operation
	MarketGetMarketsRegionIDOrdersHandler market.GetMarketsRegionIDOrdersHandler
	// MarketGetMarketsStructuresStructureIDHandler sets the operation handler for the get markets structures structure id operation
	MarketGetMarketsStructuresStructureIDHandler market.GetMarketsStructuresStructureIDHandler
	// OpportunitiesGetOpportunitiesGroupsHandler sets the operation handler for the get opportunities groups operation
	OpportunitiesGetOpportunitiesGroupsHandler opportunities.GetOpportunitiesGroupsHandler
	// OpportunitiesGetOpportunitiesGroupsGroupIDHandler sets the operation handler for the get opportunities groups group id operation
	OpportunitiesGetOpportunitiesGroupsGroupIDHandler opportunities.GetOpportunitiesGroupsGroupIDHandler
	// OpportunitiesGetOpportunitiesTasksHandler sets the operation handler for the get opportunities tasks operation
	OpportunitiesGetOpportunitiesTasksHandler opportunities.GetOpportunitiesTasksHandler
	// OpportunitiesGetOpportunitiesTasksTaskIDHandler sets the operation handler for the get opportunities tasks task id operation
	OpportunitiesGetOpportunitiesTasksTaskIDHandler opportunities.GetOpportunitiesTasksTaskIDHandler
	// SearchGetSearchHandler sets the operation handler for the get search operation
	SearchGetSearchHandler search.GetSearchHandler
	// SovereigntyGetSovereigntyCampaignsHandler sets the operation handler for the get sovereignty campaigns operation
	SovereigntyGetSovereigntyCampaignsHandler sovereignty.GetSovereigntyCampaignsHandler
	// SovereigntyGetSovereigntyMapHandler sets the operation handler for the get sovereignty map operation
	SovereigntyGetSovereigntyMapHandler sovereignty.GetSovereigntyMapHandler
	// SovereigntyGetSovereigntyStructuresHandler sets the operation handler for the get sovereignty structures operation
	SovereigntyGetSovereigntyStructuresHandler sovereignty.GetSovereigntyStructuresHandler
	// StatusGetStatusHandler sets the operation handler for the get status operation
	StatusGetStatusHandler status.GetStatusHandler
	// UniverseGetUniverseBloodlinesHandler sets the operation handler for the get universe bloodlines operation
	UniverseGetUniverseBloodlinesHandler universe.GetUniverseBloodlinesHandler
	// UniverseGetUniverseCategoriesHandler sets the operation handler for the get universe categories operation
	UniverseGetUniverseCategoriesHandler universe.GetUniverseCategoriesHandler
	// UniverseGetUniverseCategoriesCategoryIDHandler sets the operation handler for the get universe categories category id operation
	UniverseGetUniverseCategoriesCategoryIDHandler universe.GetUniverseCategoriesCategoryIDHandler
	// UniverseGetUniverseConstellationsHandler sets the operation handler for the get universe constellations operation
	UniverseGetUniverseConstellationsHandler universe.GetUniverseConstellationsHandler
	// UniverseGetUniverseConstellationsConstellationIDHandler sets the operation handler for the get universe constellations constellation id operation
	UniverseGetUniverseConstellationsConstellationIDHandler universe.GetUniverseConstellationsConstellationIDHandler
	// UniverseGetUniverseFactionsHandler sets the operation handler for the get universe factions operation
	UniverseGetUniverseFactionsHandler universe.GetUniverseFactionsHandler
	// UniverseGetUniverseGraphicsHandler sets the operation handler for the get universe graphics operation
	UniverseGetUniverseGraphicsHandler universe.GetUniverseGraphicsHandler
	// UniverseGetUniverseGraphicsGraphicIDHandler sets the operation handler for the get universe graphics graphic id operation
	UniverseGetUniverseGraphicsGraphicIDHandler universe.GetUniverseGraphicsGraphicIDHandler
	// UniverseGetUniverseGroupsHandler sets the operation handler for the get universe groups operation
	UniverseGetUniverseGroupsHandler universe.GetUniverseGroupsHandler
	// UniverseGetUniverseGroupsGroupIDHandler sets the operation handler for the get universe groups group id operation
	UniverseGetUniverseGroupsGroupIDHandler universe.GetUniverseGroupsGroupIDHandler
	// UniverseGetUniverseMoonsMoonIDHandler sets the operation handler for the get universe moons moon id operation
	UniverseGetUniverseMoonsMoonIDHandler universe.GetUniverseMoonsMoonIDHandler
	// UniverseGetUniversePlanetsPlanetIDHandler sets the operation handler for the get universe planets planet id operation
	UniverseGetUniversePlanetsPlanetIDHandler universe.GetUniversePlanetsPlanetIDHandler
	// UniverseGetUniverseRacesHandler sets the operation handler for the get universe races operation
	UniverseGetUniverseRacesHandler universe.GetUniverseRacesHandler
	// UniverseGetUniverseRegionsHandler sets the operation handler for the get universe regions operation
	UniverseGetUniverseRegionsHandler universe.GetUniverseRegionsHandler
	// UniverseGetUniverseRegionsRegionIDHandler sets the operation handler for the get universe regions region id operation
	UniverseGetUniverseRegionsRegionIDHandler universe.GetUniverseRegionsRegionIDHandler
	// PlanetaryInteractionGetUniverseSchematicsSchematicIDHandler sets the operation handler for the get universe schematics schematic id operation
	PlanetaryInteractionGetUniverseSchematicsSchematicIDHandler planetary_interaction.GetUniverseSchematicsSchematicIDHandler
	// UniverseGetUniverseStargatesStargateIDHandler sets the operation handler for the get universe stargates stargate id operation
	UniverseGetUniverseStargatesStargateIDHandler universe.GetUniverseStargatesStargateIDHandler
	// UniverseGetUniverseStationsStationIDHandler sets the operation handler for the get universe stations station id operation
	UniverseGetUniverseStationsStationIDHandler universe.GetUniverseStationsStationIDHandler
	// UniverseGetUniverseStructuresHandler sets the operation handler for the get universe structures operation
	UniverseGetUniverseStructuresHandler universe.GetUniverseStructuresHandler
	// UniverseGetUniverseStructuresStructureIDHandler sets the operation handler for the get universe structures structure id operation
	UniverseGetUniverseStructuresStructureIDHandler universe.GetUniverseStructuresStructureIDHandler
	// UniverseGetUniverseSystemJumpsHandler sets the operation handler for the get universe system jumps operation
	UniverseGetUniverseSystemJumpsHandler universe.GetUniverseSystemJumpsHandler
	// UniverseGetUniverseSystemKillsHandler sets the operation handler for the get universe system kills operation
	UniverseGetUniverseSystemKillsHandler universe.GetUniverseSystemKillsHandler
	// UniverseGetUniverseSystemsHandler sets the operation handler for the get universe systems operation
	UniverseGetUniverseSystemsHandler universe.GetUniverseSystemsHandler
	// UniverseGetUniverseSystemsSystemIDHandler sets the operation handler for the get universe systems system id operation
	UniverseGetUniverseSystemsSystemIDHandler universe.GetUniverseSystemsSystemIDHandler
	// UniverseGetUniverseTypesHandler sets the operation handler for the get universe types operation
	UniverseGetUniverseTypesHandler universe.GetUniverseTypesHandler
	// UniverseGetUniverseTypesTypeIDHandler sets the operation handler for the get universe types type id operation
	UniverseGetUniverseTypesTypeIDHandler universe.GetUniverseTypesTypeIDHandler
	// WarsGetWarsHandler sets the operation handler for the get wars operation
	WarsGetWarsHandler wars.GetWarsHandler
	// WarsGetWarsWarIDHandler sets the operation handler for the get wars war id operation
	WarsGetWarsWarIDHandler wars.GetWarsWarIDHandler
	// WarsGetWarsWarIDKillmailsHandler sets the operation handler for the get wars war id killmails operation
	WarsGetWarsWarIDKillmailsHandler wars.GetWarsWarIDKillmailsHandler
	// CharacterPostCharactersAffiliationHandler sets the operation handler for the post characters affiliation operation
	CharacterPostCharactersAffiliationHandler character.PostCharactersAffiliationHandler
	// ContactsPostCharactersCharacterIDContactsHandler sets the operation handler for the post characters character id contacts operation
	ContactsPostCharactersCharacterIDContactsHandler contacts.PostCharactersCharacterIDContactsHandler
	// CharacterPostCharactersCharacterIDCspaHandler sets the operation handler for the post characters character id cspa operation
	CharacterPostCharactersCharacterIDCspaHandler character.PostCharactersCharacterIDCspaHandler
	// FittingsPostCharactersCharacterIDFittingsHandler sets the operation handler for the post characters character id fittings operation
	FittingsPostCharactersCharacterIDFittingsHandler fittings.PostCharactersCharacterIDFittingsHandler
	// MailPostCharactersCharacterIDMailHandler sets the operation handler for the post characters character id mail operation
	MailPostCharactersCharacterIDMailHandler mail.PostCharactersCharacterIDMailHandler
	// MailPostCharactersCharacterIDMailLabelsHandler sets the operation handler for the post characters character id mail labels operation
	MailPostCharactersCharacterIDMailLabelsHandler mail.PostCharactersCharacterIDMailLabelsHandler
	// FleetsPostFleetsFleetIDMembersHandler sets the operation handler for the post fleets fleet id members operation
	FleetsPostFleetsFleetIDMembersHandler fleets.PostFleetsFleetIDMembersHandler
	// FleetsPostFleetsFleetIDWingsHandler sets the operation handler for the post fleets fleet id wings operation
	FleetsPostFleetsFleetIDWingsHandler fleets.PostFleetsFleetIDWingsHandler
	// FleetsPostFleetsFleetIDWingsWingIDSquadsHandler sets the operation handler for the post fleets fleet id wings wing id squads operation
	FleetsPostFleetsFleetIDWingsWingIDSquadsHandler fleets.PostFleetsFleetIDWingsWingIDSquadsHandler
	// UserInterfacePostUIAutopilotWaypointHandler sets the operation handler for the post ui autopilot waypoint operation
	UserInterfacePostUIAutopilotWaypointHandler user_interface.PostUIAutopilotWaypointHandler
	// UserInterfacePostUIOpenwindowContractHandler sets the operation handler for the post ui openwindow contract operation
	UserInterfacePostUIOpenwindowContractHandler user_interface.PostUIOpenwindowContractHandler
	// UserInterfacePostUIOpenwindowInformationHandler sets the operation handler for the post ui openwindow information operation
	UserInterfacePostUIOpenwindowInformationHandler user_interface.PostUIOpenwindowInformationHandler
	// UserInterfacePostUIOpenwindowMarketdetailsHandler sets the operation handler for the post ui openwindow marketdetails operation
	UserInterfacePostUIOpenwindowMarketdetailsHandler user_interface.PostUIOpenwindowMarketdetailsHandler
	// UserInterfacePostUIOpenwindowNewmailHandler sets the operation handler for the post ui openwindow newmail operation
	UserInterfacePostUIOpenwindowNewmailHandler user_interface.PostUIOpenwindowNewmailHandler
	// UniversePostUniverseNamesHandler sets the operation handler for the post universe names operation
	UniversePostUniverseNamesHandler universe.PostUniverseNamesHandler
	// CalendarPutCharactersCharacterIDCalendarEventIDHandler sets the operation handler for the put characters character id calendar event id operation
	CalendarPutCharactersCharacterIDCalendarEventIDHandler calendar.PutCharactersCharacterIDCalendarEventIDHandler
	// ContactsPutCharactersCharacterIDContactsHandler sets the operation handler for the put characters character id contacts operation
	ContactsPutCharactersCharacterIDContactsHandler contacts.PutCharactersCharacterIDContactsHandler
	// MailPutCharactersCharacterIDMailMailIDHandler sets the operation handler for the put characters character id mail mail id operation
	MailPutCharactersCharacterIDMailMailIDHandler mail.PutCharactersCharacterIDMailMailIDHandler
	// CorporationPutCorporationsCorporationIDStructuresStructureIDHandler sets the operation handler for the put corporations corporation id structures structure id operation
	CorporationPutCorporationsCorporationIDStructuresStructureIDHandler corporation.PutCorporationsCorporationIDStructuresStructureIDHandler
	// FleetsPutFleetsFleetIDHandler sets the operation handler for the put fleets fleet id operation
	FleetsPutFleetsFleetIDHandler fleets.PutFleetsFleetIDHandler
	// FleetsPutFleetsFleetIDMembersMemberIDHandler sets the operation handler for the put fleets fleet id members member id operation
	FleetsPutFleetsFleetIDMembersMemberIDHandler fleets.PutFleetsFleetIDMembersMemberIDHandler
	// FleetsPutFleetsFleetIDSquadsSquadIDHandler sets the operation handler for the put fleets fleet id squads squad id operation
	FleetsPutFleetsFleetIDSquadsSquadIDHandler fleets.PutFleetsFleetIDSquadsSquadIDHandler
	// FleetsPutFleetsFleetIDWingsWingIDHandler sets the operation handler for the put fleets fleet id wings wing id operation
	FleetsPutFleetsFleetIDWingsWingIDHandler fleets.PutFleetsFleetIDWingsWingIDHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *EsiAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *EsiAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *EsiAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *EsiAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *EsiAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *EsiAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *EsiAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the EsiAPI
func (o *EsiAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.EvessoAuth == nil {
		unregistered = append(unregistered, "EvessoAuth")
	}

	if o.ContactsDeleteCharactersCharacterIDContactsHandler == nil {
		unregistered = append(unregistered, "contacts.DeleteCharactersCharacterIDContactsHandler")
	}

	if o.FittingsDeleteCharactersCharacterIDFittingsFittingIDHandler == nil {
		unregistered = append(unregistered, "fittings.DeleteCharactersCharacterIDFittingsFittingIDHandler")
	}

	if o.MailDeleteCharactersCharacterIDMailLabelsLabelIDHandler == nil {
		unregistered = append(unregistered, "mail.DeleteCharactersCharacterIDMailLabelsLabelIDHandler")
	}

	if o.MailDeleteCharactersCharacterIDMailMailIDHandler == nil {
		unregistered = append(unregistered, "mail.DeleteCharactersCharacterIDMailMailIDHandler")
	}

	if o.FleetsDeleteFleetsFleetIDMembersMemberIDHandler == nil {
		unregistered = append(unregistered, "fleets.DeleteFleetsFleetIDMembersMemberIDHandler")
	}

	if o.FleetsDeleteFleetsFleetIDSquadsSquadIDHandler == nil {
		unregistered = append(unregistered, "fleets.DeleteFleetsFleetIDSquadsSquadIDHandler")
	}

	if o.FleetsDeleteFleetsFleetIDWingsWingIDHandler == nil {
		unregistered = append(unregistered, "fleets.DeleteFleetsFleetIDWingsWingIDHandler")
	}

	if o.AllianceGetAlliancesHandler == nil {
		unregistered = append(unregistered, "alliance.GetAlliancesHandler")
	}

	if o.AllianceGetAlliancesAllianceIDHandler == nil {
		unregistered = append(unregistered, "alliance.GetAlliancesAllianceIDHandler")
	}

	if o.AllianceGetAlliancesAllianceIDCorporationsHandler == nil {
		unregistered = append(unregistered, "alliance.GetAlliancesAllianceIDCorporationsHandler")
	}

	if o.AllianceGetAlliancesAllianceIDIconsHandler == nil {
		unregistered = append(unregistered, "alliance.GetAlliancesAllianceIDIconsHandler")
	}

	if o.AllianceGetAlliancesNamesHandler == nil {
		unregistered = append(unregistered, "alliance.GetAlliancesNamesHandler")
	}

	if o.CharacterGetCharactersCharacterIDHandler == nil {
		unregistered = append(unregistered, "character.GetCharactersCharacterIDHandler")
	}

	if o.CharacterGetCharactersCharacterIDAgentsResearchHandler == nil {
		unregistered = append(unregistered, "character.GetCharactersCharacterIDAgentsResearchHandler")
	}

	if o.AssetsGetCharactersCharacterIDAssetsHandler == nil {
		unregistered = append(unregistered, "assets.GetCharactersCharacterIDAssetsHandler")
	}

	if o.CharacterGetCharactersCharacterIDBlueprintsHandler == nil {
		unregistered = append(unregistered, "character.GetCharactersCharacterIDBlueprintsHandler")
	}

	if o.BookmarksGetCharactersCharacterIDBookmarksHandler == nil {
		unregistered = append(unregistered, "bookmarks.GetCharactersCharacterIDBookmarksHandler")
	}

	if o.BookmarksGetCharactersCharacterIDBookmarksFoldersHandler == nil {
		unregistered = append(unregistered, "bookmarks.GetCharactersCharacterIDBookmarksFoldersHandler")
	}

	if o.CalendarGetCharactersCharacterIDCalendarHandler == nil {
		unregistered = append(unregistered, "calendar.GetCharactersCharacterIDCalendarHandler")
	}

	if o.CalendarGetCharactersCharacterIDCalendarEventIDHandler == nil {
		unregistered = append(unregistered, "calendar.GetCharactersCharacterIDCalendarEventIDHandler")
	}

	if o.CharacterGetCharactersCharacterIDChatChannelsHandler == nil {
		unregistered = append(unregistered, "character.GetCharactersCharacterIDChatChannelsHandler")
	}

	if o.ClonesGetCharactersCharacterIDClonesHandler == nil {
		unregistered = append(unregistered, "clones.GetCharactersCharacterIDClonesHandler")
	}

	if o.ContactsGetCharactersCharacterIDContactsHandler == nil {
		unregistered = append(unregistered, "contacts.GetCharactersCharacterIDContactsHandler")
	}

	if o.ContactsGetCharactersCharacterIDContactsLabelsHandler == nil {
		unregistered = append(unregistered, "contacts.GetCharactersCharacterIDContactsLabelsHandler")
	}

	if o.CharacterGetCharactersCharacterIDCorporationhistoryHandler == nil {
		unregistered = append(unregistered, "character.GetCharactersCharacterIDCorporationhistoryHandler")
	}

	if o.FittingsGetCharactersCharacterIDFittingsHandler == nil {
		unregistered = append(unregistered, "fittings.GetCharactersCharacterIDFittingsHandler")
	}

	if o.IndustryGetCharactersCharacterIDIndustryJobsHandler == nil {
		unregistered = append(unregistered, "industry.GetCharactersCharacterIDIndustryJobsHandler")
	}

	if o.KillmailsGetCharactersCharacterIDKillmailsRecentHandler == nil {
		unregistered = append(unregistered, "killmails.GetCharactersCharacterIDKillmailsRecentHandler")
	}

	if o.LocationGetCharactersCharacterIDLocationHandler == nil {
		unregistered = append(unregistered, "location.GetCharactersCharacterIDLocationHandler")
	}

	if o.LoyaltyGetCharactersCharacterIDLoyaltyPointsHandler == nil {
		unregistered = append(unregistered, "loyalty.GetCharactersCharacterIDLoyaltyPointsHandler")
	}

	if o.MailGetCharactersCharacterIDMailHandler == nil {
		unregistered = append(unregistered, "mail.GetCharactersCharacterIDMailHandler")
	}

	if o.MailGetCharactersCharacterIDMailLabelsHandler == nil {
		unregistered = append(unregistered, "mail.GetCharactersCharacterIDMailLabelsHandler")
	}

	if o.MailGetCharactersCharacterIDMailListsHandler == nil {
		unregistered = append(unregistered, "mail.GetCharactersCharacterIDMailListsHandler")
	}

	if o.MailGetCharactersCharacterIDMailMailIDHandler == nil {
		unregistered = append(unregistered, "mail.GetCharactersCharacterIDMailMailIDHandler")
	}

	if o.CharacterGetCharactersCharacterIDMedalsHandler == nil {
		unregistered = append(unregistered, "character.GetCharactersCharacterIDMedalsHandler")
	}

	if o.LocationGetCharactersCharacterIDOnlineHandler == nil {
		unregistered = append(unregistered, "location.GetCharactersCharacterIDOnlineHandler")
	}

	if o.OpportunitiesGetCharactersCharacterIDOpportunitiesHandler == nil {
		unregistered = append(unregistered, "opportunities.GetCharactersCharacterIDOpportunitiesHandler")
	}

	if o.MarketGetCharactersCharacterIDOrdersHandler == nil {
		unregistered = append(unregistered, "market.GetCharactersCharacterIDOrdersHandler")
	}

	if o.PlanetaryInteractionGetCharactersCharacterIDPlanetsHandler == nil {
		unregistered = append(unregistered, "planetary_interaction.GetCharactersCharacterIDPlanetsHandler")
	}

	if o.PlanetaryInteractionGetCharactersCharacterIDPlanetsPlanetIDHandler == nil {
		unregistered = append(unregistered, "planetary_interaction.GetCharactersCharacterIDPlanetsPlanetIDHandler")
	}

	if o.CharacterGetCharactersCharacterIDPortraitHandler == nil {
		unregistered = append(unregistered, "character.GetCharactersCharacterIDPortraitHandler")
	}

	if o.CharacterGetCharactersCharacterIDRolesHandler == nil {
		unregistered = append(unregistered, "character.GetCharactersCharacterIDRolesHandler")
	}

	if o.SearchGetCharactersCharacterIDSearchHandler == nil {
		unregistered = append(unregistered, "search.GetCharactersCharacterIDSearchHandler")
	}

	if o.LocationGetCharactersCharacterIDShipHandler == nil {
		unregistered = append(unregistered, "location.GetCharactersCharacterIDShipHandler")
	}

	if o.SkillsGetCharactersCharacterIDSkillqueueHandler == nil {
		unregistered = append(unregistered, "skills.GetCharactersCharacterIDSkillqueueHandler")
	}

	if o.SkillsGetCharactersCharacterIDSkillsHandler == nil {
		unregistered = append(unregistered, "skills.GetCharactersCharacterIDSkillsHandler")
	}

	if o.CharacterGetCharactersCharacterIDStandingsHandler == nil {
		unregistered = append(unregistered, "character.GetCharactersCharacterIDStandingsHandler")
	}

	if o.WalletGetCharactersCharacterIDWalletsHandler == nil {
		unregistered = append(unregistered, "wallet.GetCharactersCharacterIDWalletsHandler")
	}

	if o.CharacterGetCharactersNamesHandler == nil {
		unregistered = append(unregistered, "character.GetCharactersNamesHandler")
	}

	if o.CorporationGetCorporationsCorporationIDHandler == nil {
		unregistered = append(unregistered, "corporation.GetCorporationsCorporationIDHandler")
	}

	if o.CorporationGetCorporationsCorporationIDAlliancehistoryHandler == nil {
		unregistered = append(unregistered, "corporation.GetCorporationsCorporationIDAlliancehistoryHandler")
	}

	if o.CorporationGetCorporationsCorporationIDIconsHandler == nil {
		unregistered = append(unregistered, "corporation.GetCorporationsCorporationIDIconsHandler")
	}

	if o.CorporationGetCorporationsCorporationIDMembersHandler == nil {
		unregistered = append(unregistered, "corporation.GetCorporationsCorporationIDMembersHandler")
	}

	if o.CorporationGetCorporationsCorporationIDRolesHandler == nil {
		unregistered = append(unregistered, "corporation.GetCorporationsCorporationIDRolesHandler")
	}

	if o.CorporationGetCorporationsCorporationIDStructuresHandler == nil {
		unregistered = append(unregistered, "corporation.GetCorporationsCorporationIDStructuresHandler")
	}

	if o.CorporationGetCorporationsNamesHandler == nil {
		unregistered = append(unregistered, "corporation.GetCorporationsNamesHandler")
	}

	if o.CorporationGetCorporationsNpccorpsHandler == nil {
		unregistered = append(unregistered, "corporation.GetCorporationsNpccorpsHandler")
	}

	if o.DogmaGetDogmaAttributesHandler == nil {
		unregistered = append(unregistered, "dogma.GetDogmaAttributesHandler")
	}

	if o.DogmaGetDogmaAttributesAttributeIDHandler == nil {
		unregistered = append(unregistered, "dogma.GetDogmaAttributesAttributeIDHandler")
	}

	if o.DogmaGetDogmaEffectsHandler == nil {
		unregistered = append(unregistered, "dogma.GetDogmaEffectsHandler")
	}

	if o.DogmaGetDogmaEffectsEffectIDHandler == nil {
		unregistered = append(unregistered, "dogma.GetDogmaEffectsEffectIDHandler")
	}

	if o.FleetsGetFleetsFleetIDHandler == nil {
		unregistered = append(unregistered, "fleets.GetFleetsFleetIDHandler")
	}

	if o.FleetsGetFleetsFleetIDMembersHandler == nil {
		unregistered = append(unregistered, "fleets.GetFleetsFleetIDMembersHandler")
	}

	if o.FleetsGetFleetsFleetIDWingsHandler == nil {
		unregistered = append(unregistered, "fleets.GetFleetsFleetIDWingsHandler")
	}

	if o.IncursionsGetIncursionsHandler == nil {
		unregistered = append(unregistered, "incursions.GetIncursionsHandler")
	}

	if o.IndustryGetIndustryFacilitiesHandler == nil {
		unregistered = append(unregistered, "industry.GetIndustryFacilitiesHandler")
	}

	if o.IndustryGetIndustrySystemsHandler == nil {
		unregistered = append(unregistered, "industry.GetIndustrySystemsHandler")
	}

	if o.InsuranceGetInsurancePricesHandler == nil {
		unregistered = append(unregistered, "insurance.GetInsurancePricesHandler")
	}

	if o.KillmailsGetKillmailsKillmailIDKillmailHashHandler == nil {
		unregistered = append(unregistered, "killmails.GetKillmailsKillmailIDKillmailHashHandler")
	}

	if o.LoyaltyGetLoyaltyStoresCorporationIDOffersHandler == nil {
		unregistered = append(unregistered, "loyalty.GetLoyaltyStoresCorporationIDOffersHandler")
	}

	if o.MarketGetMarketsGroupsHandler == nil {
		unregistered = append(unregistered, "market.GetMarketsGroupsHandler")
	}

	if o.MarketGetMarketsGroupsMarketGroupIDHandler == nil {
		unregistered = append(unregistered, "market.GetMarketsGroupsMarketGroupIDHandler")
	}

	if o.MarketGetMarketsPricesHandler == nil {
		unregistered = append(unregistered, "market.GetMarketsPricesHandler")
	}

	if o.MarketGetMarketsRegionIDHistoryHandler == nil {
		unregistered = append(unregistered, "market.GetMarketsRegionIDHistoryHandler")
	}

	if o.MarketGetMarketsRegionIDOrdersHandler == nil {
		unregistered = append(unregistered, "market.GetMarketsRegionIDOrdersHandler")
	}

	if o.MarketGetMarketsStructuresStructureIDHandler == nil {
		unregistered = append(unregistered, "market.GetMarketsStructuresStructureIDHandler")
	}

	if o.OpportunitiesGetOpportunitiesGroupsHandler == nil {
		unregistered = append(unregistered, "opportunities.GetOpportunitiesGroupsHandler")
	}

	if o.OpportunitiesGetOpportunitiesGroupsGroupIDHandler == nil {
		unregistered = append(unregistered, "opportunities.GetOpportunitiesGroupsGroupIDHandler")
	}

	if o.OpportunitiesGetOpportunitiesTasksHandler == nil {
		unregistered = append(unregistered, "opportunities.GetOpportunitiesTasksHandler")
	}

	if o.OpportunitiesGetOpportunitiesTasksTaskIDHandler == nil {
		unregistered = append(unregistered, "opportunities.GetOpportunitiesTasksTaskIDHandler")
	}

	if o.SearchGetSearchHandler == nil {
		unregistered = append(unregistered, "search.GetSearchHandler")
	}

	if o.SovereigntyGetSovereigntyCampaignsHandler == nil {
		unregistered = append(unregistered, "sovereignty.GetSovereigntyCampaignsHandler")
	}

	if o.SovereigntyGetSovereigntyMapHandler == nil {
		unregistered = append(unregistered, "sovereignty.GetSovereigntyMapHandler")
	}

	if o.SovereigntyGetSovereigntyStructuresHandler == nil {
		unregistered = append(unregistered, "sovereignty.GetSovereigntyStructuresHandler")
	}

	if o.StatusGetStatusHandler == nil {
		unregistered = append(unregistered, "status.GetStatusHandler")
	}

	if o.UniverseGetUniverseBloodlinesHandler == nil {
		unregistered = append(unregistered, "universe.GetUniverseBloodlinesHandler")
	}

	if o.UniverseGetUniverseCategoriesHandler == nil {
		unregistered = append(unregistered, "universe.GetUniverseCategoriesHandler")
	}

	if o.UniverseGetUniverseCategoriesCategoryIDHandler == nil {
		unregistered = append(unregistered, "universe.GetUniverseCategoriesCategoryIDHandler")
	}

	if o.UniverseGetUniverseConstellationsHandler == nil {
		unregistered = append(unregistered, "universe.GetUniverseConstellationsHandler")
	}

	if o.UniverseGetUniverseConstellationsConstellationIDHandler == nil {
		unregistered = append(unregistered, "universe.GetUniverseConstellationsConstellationIDHandler")
	}

	if o.UniverseGetUniverseFactionsHandler == nil {
		unregistered = append(unregistered, "universe.GetUniverseFactionsHandler")
	}

	if o.UniverseGetUniverseGraphicsHandler == nil {
		unregistered = append(unregistered, "universe.GetUniverseGraphicsHandler")
	}

	if o.UniverseGetUniverseGraphicsGraphicIDHandler == nil {
		unregistered = append(unregistered, "universe.GetUniverseGraphicsGraphicIDHandler")
	}

	if o.UniverseGetUniverseGroupsHandler == nil {
		unregistered = append(unregistered, "universe.GetUniverseGroupsHandler")
	}

	if o.UniverseGetUniverseGroupsGroupIDHandler == nil {
		unregistered = append(unregistered, "universe.GetUniverseGroupsGroupIDHandler")
	}

	if o.UniverseGetUniverseMoonsMoonIDHandler == nil {
		unregistered = append(unregistered, "universe.GetUniverseMoonsMoonIDHandler")
	}

	if o.UniverseGetUniversePlanetsPlanetIDHandler == nil {
		unregistered = append(unregistered, "universe.GetUniversePlanetsPlanetIDHandler")
	}

	if o.UniverseGetUniverseRacesHandler == nil {
		unregistered = append(unregistered, "universe.GetUniverseRacesHandler")
	}

	if o.UniverseGetUniverseRegionsHandler == nil {
		unregistered = append(unregistered, "universe.GetUniverseRegionsHandler")
	}

	if o.UniverseGetUniverseRegionsRegionIDHandler == nil {
		unregistered = append(unregistered, "universe.GetUniverseRegionsRegionIDHandler")
	}

	if o.PlanetaryInteractionGetUniverseSchematicsSchematicIDHandler == nil {
		unregistered = append(unregistered, "planetary_interaction.GetUniverseSchematicsSchematicIDHandler")
	}

	if o.UniverseGetUniverseStargatesStargateIDHandler == nil {
		unregistered = append(unregistered, "universe.GetUniverseStargatesStargateIDHandler")
	}

	if o.UniverseGetUniverseStationsStationIDHandler == nil {
		unregistered = append(unregistered, "universe.GetUniverseStationsStationIDHandler")
	}

	if o.UniverseGetUniverseStructuresHandler == nil {
		unregistered = append(unregistered, "universe.GetUniverseStructuresHandler")
	}

	if o.UniverseGetUniverseStructuresStructureIDHandler == nil {
		unregistered = append(unregistered, "universe.GetUniverseStructuresStructureIDHandler")
	}

	if o.UniverseGetUniverseSystemJumpsHandler == nil {
		unregistered = append(unregistered, "universe.GetUniverseSystemJumpsHandler")
	}

	if o.UniverseGetUniverseSystemKillsHandler == nil {
		unregistered = append(unregistered, "universe.GetUniverseSystemKillsHandler")
	}

	if o.UniverseGetUniverseSystemsHandler == nil {
		unregistered = append(unregistered, "universe.GetUniverseSystemsHandler")
	}

	if o.UniverseGetUniverseSystemsSystemIDHandler == nil {
		unregistered = append(unregistered, "universe.GetUniverseSystemsSystemIDHandler")
	}

	if o.UniverseGetUniverseTypesHandler == nil {
		unregistered = append(unregistered, "universe.GetUniverseTypesHandler")
	}

	if o.UniverseGetUniverseTypesTypeIDHandler == nil {
		unregistered = append(unregistered, "universe.GetUniverseTypesTypeIDHandler")
	}

	if o.WarsGetWarsHandler == nil {
		unregistered = append(unregistered, "wars.GetWarsHandler")
	}

	if o.WarsGetWarsWarIDHandler == nil {
		unregistered = append(unregistered, "wars.GetWarsWarIDHandler")
	}

	if o.WarsGetWarsWarIDKillmailsHandler == nil {
		unregistered = append(unregistered, "wars.GetWarsWarIDKillmailsHandler")
	}

	if o.CharacterPostCharactersAffiliationHandler == nil {
		unregistered = append(unregistered, "character.PostCharactersAffiliationHandler")
	}

	if o.ContactsPostCharactersCharacterIDContactsHandler == nil {
		unregistered = append(unregistered, "contacts.PostCharactersCharacterIDContactsHandler")
	}

	if o.CharacterPostCharactersCharacterIDCspaHandler == nil {
		unregistered = append(unregistered, "character.PostCharactersCharacterIDCspaHandler")
	}

	if o.FittingsPostCharactersCharacterIDFittingsHandler == nil {
		unregistered = append(unregistered, "fittings.PostCharactersCharacterIDFittingsHandler")
	}

	if o.MailPostCharactersCharacterIDMailHandler == nil {
		unregistered = append(unregistered, "mail.PostCharactersCharacterIDMailHandler")
	}

	if o.MailPostCharactersCharacterIDMailLabelsHandler == nil {
		unregistered = append(unregistered, "mail.PostCharactersCharacterIDMailLabelsHandler")
	}

	if o.FleetsPostFleetsFleetIDMembersHandler == nil {
		unregistered = append(unregistered, "fleets.PostFleetsFleetIDMembersHandler")
	}

	if o.FleetsPostFleetsFleetIDWingsHandler == nil {
		unregistered = append(unregistered, "fleets.PostFleetsFleetIDWingsHandler")
	}

	if o.FleetsPostFleetsFleetIDWingsWingIDSquadsHandler == nil {
		unregistered = append(unregistered, "fleets.PostFleetsFleetIDWingsWingIDSquadsHandler")
	}

	if o.UserInterfacePostUIAutopilotWaypointHandler == nil {
		unregistered = append(unregistered, "user_interface.PostUIAutopilotWaypointHandler")
	}

	if o.UserInterfacePostUIOpenwindowContractHandler == nil {
		unregistered = append(unregistered, "user_interface.PostUIOpenwindowContractHandler")
	}

	if o.UserInterfacePostUIOpenwindowInformationHandler == nil {
		unregistered = append(unregistered, "user_interface.PostUIOpenwindowInformationHandler")
	}

	if o.UserInterfacePostUIOpenwindowMarketdetailsHandler == nil {
		unregistered = append(unregistered, "user_interface.PostUIOpenwindowMarketdetailsHandler")
	}

	if o.UserInterfacePostUIOpenwindowNewmailHandler == nil {
		unregistered = append(unregistered, "user_interface.PostUIOpenwindowNewmailHandler")
	}

	if o.UniversePostUniverseNamesHandler == nil {
		unregistered = append(unregistered, "universe.PostUniverseNamesHandler")
	}

	if o.CalendarPutCharactersCharacterIDCalendarEventIDHandler == nil {
		unregistered = append(unregistered, "calendar.PutCharactersCharacterIDCalendarEventIDHandler")
	}

	if o.ContactsPutCharactersCharacterIDContactsHandler == nil {
		unregistered = append(unregistered, "contacts.PutCharactersCharacterIDContactsHandler")
	}

	if o.MailPutCharactersCharacterIDMailMailIDHandler == nil {
		unregistered = append(unregistered, "mail.PutCharactersCharacterIDMailMailIDHandler")
	}

	if o.CorporationPutCorporationsCorporationIDStructuresStructureIDHandler == nil {
		unregistered = append(unregistered, "corporation.PutCorporationsCorporationIDStructuresStructureIDHandler")
	}

	if o.FleetsPutFleetsFleetIDHandler == nil {
		unregistered = append(unregistered, "fleets.PutFleetsFleetIDHandler")
	}

	if o.FleetsPutFleetsFleetIDMembersMemberIDHandler == nil {
		unregistered = append(unregistered, "fleets.PutFleetsFleetIDMembersMemberIDHandler")
	}

	if o.FleetsPutFleetsFleetIDSquadsSquadIDHandler == nil {
		unregistered = append(unregistered, "fleets.PutFleetsFleetIDSquadsSquadIDHandler")
	}

	if o.FleetsPutFleetsFleetIDWingsWingIDHandler == nil {
		unregistered = append(unregistered, "fleets.PutFleetsFleetIDWingsWingIDHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *EsiAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *EsiAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name, scheme := range schemes {
		switch name {

		case "evesso":

			result[name] = o.BearerAuthenticator(scheme.Name, o.EvessoAuth)

		}
	}
	return result

}

// ConsumersFor gets the consumers for the specified media types
func (o *EsiAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *EsiAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *EsiAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the esi API
func (o *EsiAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *EsiAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/characters/{character_id}/contacts"] = contacts.NewDeleteCharactersCharacterIDContacts(o.context, o.ContactsDeleteCharactersCharacterIDContactsHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/characters/{character_id}/fittings/{fitting_id}"] = fittings.NewDeleteCharactersCharacterIDFittingsFittingID(o.context, o.FittingsDeleteCharactersCharacterIDFittingsFittingIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/characters/{character_id}/mail/labels/{label_id}"] = mail.NewDeleteCharactersCharacterIDMailLabelsLabelID(o.context, o.MailDeleteCharactersCharacterIDMailLabelsLabelIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/characters/{character_id}/mail/{mail_id}"] = mail.NewDeleteCharactersCharacterIDMailMailID(o.context, o.MailDeleteCharactersCharacterIDMailMailIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/fleets/{fleet_id}/members/{member_id}"] = fleets.NewDeleteFleetsFleetIDMembersMemberID(o.context, o.FleetsDeleteFleetsFleetIDMembersMemberIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/fleets/{fleet_id}/squads/{squad_id}"] = fleets.NewDeleteFleetsFleetIDSquadsSquadID(o.context, o.FleetsDeleteFleetsFleetIDSquadsSquadIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/fleets/{fleet_id}/wings/{wing_id}"] = fleets.NewDeleteFleetsFleetIDWingsWingID(o.context, o.FleetsDeleteFleetsFleetIDWingsWingIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/alliances"] = alliance.NewGetAlliances(o.context, o.AllianceGetAlliancesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/alliances/{alliance_id}"] = alliance.NewGetAlliancesAllianceID(o.context, o.AllianceGetAlliancesAllianceIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/alliances/{alliance_id}/corporations"] = alliance.NewGetAlliancesAllianceIDCorporations(o.context, o.AllianceGetAlliancesAllianceIDCorporationsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/alliances/{alliance_id}/icons"] = alliance.NewGetAlliancesAllianceIDIcons(o.context, o.AllianceGetAlliancesAllianceIDIconsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/alliances/names"] = alliance.NewGetAlliancesNames(o.context, o.AllianceGetAlliancesNamesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}"] = character.NewGetCharactersCharacterID(o.context, o.CharacterGetCharactersCharacterIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/agents_research"] = character.NewGetCharactersCharacterIDAgentsResearch(o.context, o.CharacterGetCharactersCharacterIDAgentsResearchHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/assets"] = assets.NewGetCharactersCharacterIDAssets(o.context, o.AssetsGetCharactersCharacterIDAssetsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/blueprints"] = character.NewGetCharactersCharacterIDBlueprints(o.context, o.CharacterGetCharactersCharacterIDBlueprintsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/bookmarks"] = bookmarks.NewGetCharactersCharacterIDBookmarks(o.context, o.BookmarksGetCharactersCharacterIDBookmarksHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/bookmarks/folders"] = bookmarks.NewGetCharactersCharacterIDBookmarksFolders(o.context, o.BookmarksGetCharactersCharacterIDBookmarksFoldersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/calendar"] = calendar.NewGetCharactersCharacterIDCalendar(o.context, o.CalendarGetCharactersCharacterIDCalendarHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/calendar/{event_id}"] = calendar.NewGetCharactersCharacterIDCalendarEventID(o.context, o.CalendarGetCharactersCharacterIDCalendarEventIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/chat_channels"] = character.NewGetCharactersCharacterIDChatChannels(o.context, o.CharacterGetCharactersCharacterIDChatChannelsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/clones"] = clones.NewGetCharactersCharacterIDClones(o.context, o.ClonesGetCharactersCharacterIDClonesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/contacts"] = contacts.NewGetCharactersCharacterIDContacts(o.context, o.ContactsGetCharactersCharacterIDContactsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/contacts/labels"] = contacts.NewGetCharactersCharacterIDContactsLabels(o.context, o.ContactsGetCharactersCharacterIDContactsLabelsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/corporationhistory"] = character.NewGetCharactersCharacterIDCorporationhistory(o.context, o.CharacterGetCharactersCharacterIDCorporationhistoryHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/fittings"] = fittings.NewGetCharactersCharacterIDFittings(o.context, o.FittingsGetCharactersCharacterIDFittingsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/industry/jobs"] = industry.NewGetCharactersCharacterIDIndustryJobs(o.context, o.IndustryGetCharactersCharacterIDIndustryJobsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/killmails/recent"] = killmails.NewGetCharactersCharacterIDKillmailsRecent(o.context, o.KillmailsGetCharactersCharacterIDKillmailsRecentHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/location"] = location.NewGetCharactersCharacterIDLocation(o.context, o.LocationGetCharactersCharacterIDLocationHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/loyalty/points"] = loyalty.NewGetCharactersCharacterIDLoyaltyPoints(o.context, o.LoyaltyGetCharactersCharacterIDLoyaltyPointsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/mail"] = mail.NewGetCharactersCharacterIDMail(o.context, o.MailGetCharactersCharacterIDMailHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/mail/labels"] = mail.NewGetCharactersCharacterIDMailLabels(o.context, o.MailGetCharactersCharacterIDMailLabelsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/mail/lists"] = mail.NewGetCharactersCharacterIDMailLists(o.context, o.MailGetCharactersCharacterIDMailListsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/mail/{mail_id}"] = mail.NewGetCharactersCharacterIDMailMailID(o.context, o.MailGetCharactersCharacterIDMailMailIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/medals"] = character.NewGetCharactersCharacterIDMedals(o.context, o.CharacterGetCharactersCharacterIDMedalsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/online"] = location.NewGetCharactersCharacterIDOnline(o.context, o.LocationGetCharactersCharacterIDOnlineHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/opportunities"] = opportunities.NewGetCharactersCharacterIDOpportunities(o.context, o.OpportunitiesGetCharactersCharacterIDOpportunitiesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/orders"] = market.NewGetCharactersCharacterIDOrders(o.context, o.MarketGetCharactersCharacterIDOrdersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/planets"] = planetary_interaction.NewGetCharactersCharacterIDPlanets(o.context, o.PlanetaryInteractionGetCharactersCharacterIDPlanetsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/planets/{planet_id}"] = planetary_interaction.NewGetCharactersCharacterIDPlanetsPlanetID(o.context, o.PlanetaryInteractionGetCharactersCharacterIDPlanetsPlanetIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/portrait"] = character.NewGetCharactersCharacterIDPortrait(o.context, o.CharacterGetCharactersCharacterIDPortraitHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/roles"] = character.NewGetCharactersCharacterIDRoles(o.context, o.CharacterGetCharactersCharacterIDRolesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/search"] = search.NewGetCharactersCharacterIDSearch(o.context, o.SearchGetCharactersCharacterIDSearchHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/ship"] = location.NewGetCharactersCharacterIDShip(o.context, o.LocationGetCharactersCharacterIDShipHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/skillqueue"] = skills.NewGetCharactersCharacterIDSkillqueue(o.context, o.SkillsGetCharactersCharacterIDSkillqueueHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/skills"] = skills.NewGetCharactersCharacterIDSkills(o.context, o.SkillsGetCharactersCharacterIDSkillsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/standings"] = character.NewGetCharactersCharacterIDStandings(o.context, o.CharacterGetCharactersCharacterIDStandingsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/{character_id}/wallets"] = wallet.NewGetCharactersCharacterIDWallets(o.context, o.WalletGetCharactersCharacterIDWalletsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/characters/names"] = character.NewGetCharactersNames(o.context, o.CharacterGetCharactersNamesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/corporations/{corporation_id}"] = corporation.NewGetCorporationsCorporationID(o.context, o.CorporationGetCorporationsCorporationIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/corporations/{corporation_id}/alliancehistory"] = corporation.NewGetCorporationsCorporationIDAlliancehistory(o.context, o.CorporationGetCorporationsCorporationIDAlliancehistoryHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/corporations/{corporation_id}/icons"] = corporation.NewGetCorporationsCorporationIDIcons(o.context, o.CorporationGetCorporationsCorporationIDIconsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/corporations/{corporation_id}/members"] = corporation.NewGetCorporationsCorporationIDMembers(o.context, o.CorporationGetCorporationsCorporationIDMembersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/corporations/{corporation_id}/roles"] = corporation.NewGetCorporationsCorporationIDRoles(o.context, o.CorporationGetCorporationsCorporationIDRolesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/corporations/{corporation_id}/structures"] = corporation.NewGetCorporationsCorporationIDStructures(o.context, o.CorporationGetCorporationsCorporationIDStructuresHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/corporations/names"] = corporation.NewGetCorporationsNames(o.context, o.CorporationGetCorporationsNamesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/corporations/npccorps"] = corporation.NewGetCorporationsNpccorps(o.context, o.CorporationGetCorporationsNpccorpsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dogma/attributes"] = dogma.NewGetDogmaAttributes(o.context, o.DogmaGetDogmaAttributesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dogma/attributes/{attribute_id}"] = dogma.NewGetDogmaAttributesAttributeID(o.context, o.DogmaGetDogmaAttributesAttributeIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dogma/effects"] = dogma.NewGetDogmaEffects(o.context, o.DogmaGetDogmaEffectsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dogma/effects/{effect_id}"] = dogma.NewGetDogmaEffectsEffectID(o.context, o.DogmaGetDogmaEffectsEffectIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/fleets/{fleet_id}"] = fleets.NewGetFleetsFleetID(o.context, o.FleetsGetFleetsFleetIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/fleets/{fleet_id}/members"] = fleets.NewGetFleetsFleetIDMembers(o.context, o.FleetsGetFleetsFleetIDMembersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/fleets/{fleet_id}/wings"] = fleets.NewGetFleetsFleetIDWings(o.context, o.FleetsGetFleetsFleetIDWingsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/incursions"] = incursions.NewGetIncursions(o.context, o.IncursionsGetIncursionsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/industry/facilities"] = industry.NewGetIndustryFacilities(o.context, o.IndustryGetIndustryFacilitiesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/industry/systems"] = industry.NewGetIndustrySystems(o.context, o.IndustryGetIndustrySystemsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/insurance/prices"] = insurance.NewGetInsurancePrices(o.context, o.InsuranceGetInsurancePricesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/killmails/{killmail_id}/{killmail_hash}"] = killmails.NewGetKillmailsKillmailIDKillmailHash(o.context, o.KillmailsGetKillmailsKillmailIDKillmailHashHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/loyalty/stores/{corporation_id}/offers"] = loyalty.NewGetLoyaltyStoresCorporationIDOffers(o.context, o.LoyaltyGetLoyaltyStoresCorporationIDOffersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/markets/groups"] = market.NewGetMarketsGroups(o.context, o.MarketGetMarketsGroupsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/markets/groups/{market_group_id}"] = market.NewGetMarketsGroupsMarketGroupID(o.context, o.MarketGetMarketsGroupsMarketGroupIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/markets/prices"] = market.NewGetMarketsPrices(o.context, o.MarketGetMarketsPricesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/markets/{region_id}/history"] = market.NewGetMarketsRegionIDHistory(o.context, o.MarketGetMarketsRegionIDHistoryHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/markets/{region_id}/orders"] = market.NewGetMarketsRegionIDOrders(o.context, o.MarketGetMarketsRegionIDOrdersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/markets/structures/{structure_id}"] = market.NewGetMarketsStructuresStructureID(o.context, o.MarketGetMarketsStructuresStructureIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/opportunities/groups"] = opportunities.NewGetOpportunitiesGroups(o.context, o.OpportunitiesGetOpportunitiesGroupsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/opportunities/groups/{group_id}"] = opportunities.NewGetOpportunitiesGroupsGroupID(o.context, o.OpportunitiesGetOpportunitiesGroupsGroupIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/opportunities/tasks"] = opportunities.NewGetOpportunitiesTasks(o.context, o.OpportunitiesGetOpportunitiesTasksHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/opportunities/tasks/{task_id}"] = opportunities.NewGetOpportunitiesTasksTaskID(o.context, o.OpportunitiesGetOpportunitiesTasksTaskIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/search"] = search.NewGetSearch(o.context, o.SearchGetSearchHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/sovereignty/campaigns"] = sovereignty.NewGetSovereigntyCampaigns(o.context, o.SovereigntyGetSovereigntyCampaignsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/sovereignty/map"] = sovereignty.NewGetSovereigntyMap(o.context, o.SovereigntyGetSovereigntyMapHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/sovereignty/structures"] = sovereignty.NewGetSovereigntyStructures(o.context, o.SovereigntyGetSovereigntyStructuresHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/status"] = status.NewGetStatus(o.context, o.StatusGetStatusHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/bloodlines"] = universe.NewGetUniverseBloodlines(o.context, o.UniverseGetUniverseBloodlinesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/categories"] = universe.NewGetUniverseCategories(o.context, o.UniverseGetUniverseCategoriesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/categories/{category_id}"] = universe.NewGetUniverseCategoriesCategoryID(o.context, o.UniverseGetUniverseCategoriesCategoryIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/constellations"] = universe.NewGetUniverseConstellations(o.context, o.UniverseGetUniverseConstellationsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/constellations/{constellation_id}"] = universe.NewGetUniverseConstellationsConstellationID(o.context, o.UniverseGetUniverseConstellationsConstellationIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/factions"] = universe.NewGetUniverseFactions(o.context, o.UniverseGetUniverseFactionsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/graphics"] = universe.NewGetUniverseGraphics(o.context, o.UniverseGetUniverseGraphicsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/graphics/{graphic_id}"] = universe.NewGetUniverseGraphicsGraphicID(o.context, o.UniverseGetUniverseGraphicsGraphicIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/groups"] = universe.NewGetUniverseGroups(o.context, o.UniverseGetUniverseGroupsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/groups/{group_id}"] = universe.NewGetUniverseGroupsGroupID(o.context, o.UniverseGetUniverseGroupsGroupIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/moons/{moon_id}"] = universe.NewGetUniverseMoonsMoonID(o.context, o.UniverseGetUniverseMoonsMoonIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/planets/{planet_id}"] = universe.NewGetUniversePlanetsPlanetID(o.context, o.UniverseGetUniversePlanetsPlanetIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/races"] = universe.NewGetUniverseRaces(o.context, o.UniverseGetUniverseRacesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/regions"] = universe.NewGetUniverseRegions(o.context, o.UniverseGetUniverseRegionsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/regions/{region_id}"] = universe.NewGetUniverseRegionsRegionID(o.context, o.UniverseGetUniverseRegionsRegionIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/schematics/{schematic_id}"] = planetary_interaction.NewGetUniverseSchematicsSchematicID(o.context, o.PlanetaryInteractionGetUniverseSchematicsSchematicIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/stargates/{stargate_id}"] = universe.NewGetUniverseStargatesStargateID(o.context, o.UniverseGetUniverseStargatesStargateIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/stations/{station_id}"] = universe.NewGetUniverseStationsStationID(o.context, o.UniverseGetUniverseStationsStationIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/structures"] = universe.NewGetUniverseStructures(o.context, o.UniverseGetUniverseStructuresHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/structures/{structure_id}"] = universe.NewGetUniverseStructuresStructureID(o.context, o.UniverseGetUniverseStructuresStructureIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/system_jumps"] = universe.NewGetUniverseSystemJumps(o.context, o.UniverseGetUniverseSystemJumpsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/system_kills"] = universe.NewGetUniverseSystemKills(o.context, o.UniverseGetUniverseSystemKillsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/systems"] = universe.NewGetUniverseSystems(o.context, o.UniverseGetUniverseSystemsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/systems/{system_id}"] = universe.NewGetUniverseSystemsSystemID(o.context, o.UniverseGetUniverseSystemsSystemIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/types"] = universe.NewGetUniverseTypes(o.context, o.UniverseGetUniverseTypesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/universe/types/{type_id}"] = universe.NewGetUniverseTypesTypeID(o.context, o.UniverseGetUniverseTypesTypeIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/wars"] = wars.NewGetWars(o.context, o.WarsGetWarsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/wars/{war_id}"] = wars.NewGetWarsWarID(o.context, o.WarsGetWarsWarIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/wars/{war_id}/killmails"] = wars.NewGetWarsWarIDKillmails(o.context, o.WarsGetWarsWarIDKillmailsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/characters/affiliation"] = character.NewPostCharactersAffiliation(o.context, o.CharacterPostCharactersAffiliationHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/characters/{character_id}/contacts"] = contacts.NewPostCharactersCharacterIDContacts(o.context, o.ContactsPostCharactersCharacterIDContactsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/characters/{character_id}/cspa"] = character.NewPostCharactersCharacterIDCspa(o.context, o.CharacterPostCharactersCharacterIDCspaHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/characters/{character_id}/fittings"] = fittings.NewPostCharactersCharacterIDFittings(o.context, o.FittingsPostCharactersCharacterIDFittingsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/characters/{character_id}/mail"] = mail.NewPostCharactersCharacterIDMail(o.context, o.MailPostCharactersCharacterIDMailHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/characters/{character_id}/mail/labels"] = mail.NewPostCharactersCharacterIDMailLabels(o.context, o.MailPostCharactersCharacterIDMailLabelsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/fleets/{fleet_id}/members"] = fleets.NewPostFleetsFleetIDMembers(o.context, o.FleetsPostFleetsFleetIDMembersHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/fleets/{fleet_id}/wings"] = fleets.NewPostFleetsFleetIDWings(o.context, o.FleetsPostFleetsFleetIDWingsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/fleets/{fleet_id}/wings/{wing_id}/squads"] = fleets.NewPostFleetsFleetIDWingsWingIDSquads(o.context, o.FleetsPostFleetsFleetIDWingsWingIDSquadsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/ui/autopilot/waypoint"] = user_interface.NewPostUIAutopilotWaypoint(o.context, o.UserInterfacePostUIAutopilotWaypointHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/ui/openwindow/contract"] = user_interface.NewPostUIOpenwindowContract(o.context, o.UserInterfacePostUIOpenwindowContractHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/ui/openwindow/information"] = user_interface.NewPostUIOpenwindowInformation(o.context, o.UserInterfacePostUIOpenwindowInformationHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/ui/openwindow/marketdetails"] = user_interface.NewPostUIOpenwindowMarketdetails(o.context, o.UserInterfacePostUIOpenwindowMarketdetailsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/ui/openwindow/newmail"] = user_interface.NewPostUIOpenwindowNewmail(o.context, o.UserInterfacePostUIOpenwindowNewmailHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/universe/names"] = universe.NewPostUniverseNames(o.context, o.UniversePostUniverseNamesHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/characters/{character_id}/calendar/{event_id}"] = calendar.NewPutCharactersCharacterIDCalendarEventID(o.context, o.CalendarPutCharactersCharacterIDCalendarEventIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/characters/{character_id}/contacts"] = contacts.NewPutCharactersCharacterIDContacts(o.context, o.ContactsPutCharactersCharacterIDContactsHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/characters/{character_id}/mail/{mail_id}"] = mail.NewPutCharactersCharacterIDMailMailID(o.context, o.MailPutCharactersCharacterIDMailMailIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/corporations/{corporation_id}/structures/{structure_id}"] = corporation.NewPutCorporationsCorporationIDStructuresStructureID(o.context, o.CorporationPutCorporationsCorporationIDStructuresStructureIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/fleets/{fleet_id}"] = fleets.NewPutFleetsFleetID(o.context, o.FleetsPutFleetsFleetIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/fleets/{fleet_id}/members/{member_id}"] = fleets.NewPutFleetsFleetIDMembersMemberID(o.context, o.FleetsPutFleetsFleetIDMembersMemberIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/fleets/{fleet_id}/squads/{squad_id}"] = fleets.NewPutFleetsFleetIDSquadsSquadID(o.context, o.FleetsPutFleetsFleetIDSquadsSquadIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/fleets/{fleet_id}/wings/{wing_id}"] = fleets.NewPutFleetsFleetIDWingsWingID(o.context, o.FleetsPutFleetsFleetIDWingsWingIDHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *EsiAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middelware as you see fit
func (o *EsiAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}
