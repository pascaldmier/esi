package market

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetMarketsGroupsMarketGroupIDHandlerFunc turns a function with the right signature into a get markets groups market group id handler
type GetMarketsGroupsMarketGroupIDHandlerFunc func(GetMarketsGroupsMarketGroupIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMarketsGroupsMarketGroupIDHandlerFunc) Handle(params GetMarketsGroupsMarketGroupIDParams) middleware.Responder {
	return fn(params)
}

// GetMarketsGroupsMarketGroupIDHandler interface for that can handle valid get markets groups market group id params
type GetMarketsGroupsMarketGroupIDHandler interface {
	Handle(GetMarketsGroupsMarketGroupIDParams) middleware.Responder
}

// NewGetMarketsGroupsMarketGroupID creates a new http.Handler for the get markets groups market group id operation
func NewGetMarketsGroupsMarketGroupID(ctx *middleware.Context, handler GetMarketsGroupsMarketGroupIDHandler) *GetMarketsGroupsMarketGroupID {
	return &GetMarketsGroupsMarketGroupID{Context: ctx, Handler: handler}
}

/*GetMarketsGroupsMarketGroupID swagger:route GET /markets/groups/{market_group_id}/ Market getMarketsGroupsMarketGroupId

Get item group information

Get information on an item group

---

Alternate route: `/v1/markets/groups/{market_group_id}/`

Alternate route: `/legacy/markets/groups/{market_group_id}/`

Alternate route: `/dev/markets/groups/{market_group_id}/`


---

This route expires daily at 11:05

*/
type GetMarketsGroupsMarketGroupID struct {
	Context *middleware.Context
	Handler GetMarketsGroupsMarketGroupIDHandler
}

func (o *GetMarketsGroupsMarketGroupID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetMarketsGroupsMarketGroupIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
