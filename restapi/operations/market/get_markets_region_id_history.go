package market

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetMarketsRegionIDHistoryHandlerFunc turns a function with the right signature into a get markets region id history handler
type GetMarketsRegionIDHistoryHandlerFunc func(GetMarketsRegionIDHistoryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMarketsRegionIDHistoryHandlerFunc) Handle(params GetMarketsRegionIDHistoryParams) middleware.Responder {
	return fn(params)
}

// GetMarketsRegionIDHistoryHandler interface for that can handle valid get markets region id history params
type GetMarketsRegionIDHistoryHandler interface {
	Handle(GetMarketsRegionIDHistoryParams) middleware.Responder
}

// NewGetMarketsRegionIDHistory creates a new http.Handler for the get markets region id history operation
func NewGetMarketsRegionIDHistory(ctx *middleware.Context, handler GetMarketsRegionIDHistoryHandler) *GetMarketsRegionIDHistory {
	return &GetMarketsRegionIDHistory{Context: ctx, Handler: handler}
}

/*GetMarketsRegionIDHistory swagger:route GET /markets/{region_id}/history/ Market getMarketsRegionIdHistory

List historical market statistics in a region

Return a list of historical market statistics for the specified type in a region

---

Alternate route: `/v1/markets/{region_id}/history/`

Alternate route: `/legacy/markets/{region_id}/history/`

Alternate route: `/dev/markets/{region_id}/history/`


---

This route is cached for up to 3600 seconds

*/
type GetMarketsRegionIDHistory struct {
	Context *middleware.Context
	Handler GetMarketsRegionIDHistoryHandler
}

func (o *GetMarketsRegionIDHistory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetMarketsRegionIDHistoryParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
