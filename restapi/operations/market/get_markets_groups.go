package market

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetMarketsGroupsHandlerFunc turns a function with the right signature into a get markets groups handler
type GetMarketsGroupsHandlerFunc func(GetMarketsGroupsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMarketsGroupsHandlerFunc) Handle(params GetMarketsGroupsParams) middleware.Responder {
	return fn(params)
}

// GetMarketsGroupsHandler interface for that can handle valid get markets groups params
type GetMarketsGroupsHandler interface {
	Handle(GetMarketsGroupsParams) middleware.Responder
}

// NewGetMarketsGroups creates a new http.Handler for the get markets groups operation
func NewGetMarketsGroups(ctx *middleware.Context, handler GetMarketsGroupsHandler) *GetMarketsGroups {
	return &GetMarketsGroups{Context: ctx, Handler: handler}
}

/*GetMarketsGroups swagger:route GET /markets/groups/ Market getMarketsGroups

Get item groups

Get a list of item groups

---

Alternate route: `/v1/markets/groups/`

Alternate route: `/legacy/markets/groups/`

Alternate route: `/dev/markets/groups/`


---

This route expires daily at 11:05

*/
type GetMarketsGroups struct {
	Context *middleware.Context
	Handler GetMarketsGroupsHandler
}

func (o *GetMarketsGroups) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetMarketsGroupsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
