package dogma

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetDogmaEffectsEffectIDHandlerFunc turns a function with the right signature into a get dogma effects effect id handler
type GetDogmaEffectsEffectIDHandlerFunc func(GetDogmaEffectsEffectIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDogmaEffectsEffectIDHandlerFunc) Handle(params GetDogmaEffectsEffectIDParams) middleware.Responder {
	return fn(params)
}

// GetDogmaEffectsEffectIDHandler interface for that can handle valid get dogma effects effect id params
type GetDogmaEffectsEffectIDHandler interface {
	Handle(GetDogmaEffectsEffectIDParams) middleware.Responder
}

// NewGetDogmaEffectsEffectID creates a new http.Handler for the get dogma effects effect id operation
func NewGetDogmaEffectsEffectID(ctx *middleware.Context, handler GetDogmaEffectsEffectIDHandler) *GetDogmaEffectsEffectID {
	return &GetDogmaEffectsEffectID{Context: ctx, Handler: handler}
}

/*GetDogmaEffectsEffectID swagger:route GET /dogma/effects/{effect_id}/ Dogma getDogmaEffectsEffectId

Get effect information

Get information on a dogma effect

---

Alternate route: `/v1/dogma/effects/{effect_id}/`

Alternate route: `/legacy/dogma/effects/{effect_id}/`


---

This route expires daily at 11:05

*/
type GetDogmaEffectsEffectID struct {
	Context *middleware.Context
	Handler GetDogmaEffectsEffectIDHandler
}

func (o *GetDogmaEffectsEffectID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetDogmaEffectsEffectIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
