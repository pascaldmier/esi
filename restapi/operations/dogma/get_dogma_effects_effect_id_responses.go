package dogma

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/pascaldmier/esi/models"
)

// GetDogmaEffectsEffectIDOKCode is the HTTP code returned for type GetDogmaEffectsEffectIDOK
const GetDogmaEffectsEffectIDOKCode int = 200

/*GetDogmaEffectsEffectIDOK Information about a dogma effect

swagger:response getDogmaEffectsEffectIdOK
*/
type GetDogmaEffectsEffectIDOK struct {
	/*The caching mechanism used
	  Required: true
	*/
	CacheControl string `json:"Cache-Control"`
	/*RFC7231 formatted datetime string
	  Required: true
	*/
	Expires string `json:"Expires"`
	/*RFC7231 formatted datetime string
	  Required: true
	*/
	LastModified string `json:"Last-Modified"`

	/*
	  In: Body
	*/
	Payload *models.GetDogmaEffectsEffectIDOKBody `json:"body,omitempty"`
}

// NewGetDogmaEffectsEffectIDOK creates GetDogmaEffectsEffectIDOK with default headers values
func NewGetDogmaEffectsEffectIDOK() *GetDogmaEffectsEffectIDOK {
	return &GetDogmaEffectsEffectIDOK{}
}

// WithCacheControl adds the cacheControl to the get dogma effects effect Id o k response
func (o *GetDogmaEffectsEffectIDOK) WithCacheControl(cacheControl string) *GetDogmaEffectsEffectIDOK {
	o.CacheControl = cacheControl
	return o
}

// SetCacheControl sets the cacheControl to the get dogma effects effect Id o k response
func (o *GetDogmaEffectsEffectIDOK) SetCacheControl(cacheControl string) {
	o.CacheControl = cacheControl
}

// WithExpires adds the expires to the get dogma effects effect Id o k response
func (o *GetDogmaEffectsEffectIDOK) WithExpires(expires string) *GetDogmaEffectsEffectIDOK {
	o.Expires = expires
	return o
}

// SetExpires sets the expires to the get dogma effects effect Id o k response
func (o *GetDogmaEffectsEffectIDOK) SetExpires(expires string) {
	o.Expires = expires
}

// WithLastModified adds the lastModified to the get dogma effects effect Id o k response
func (o *GetDogmaEffectsEffectIDOK) WithLastModified(lastModified string) *GetDogmaEffectsEffectIDOK {
	o.LastModified = lastModified
	return o
}

// SetLastModified sets the lastModified to the get dogma effects effect Id o k response
func (o *GetDogmaEffectsEffectIDOK) SetLastModified(lastModified string) {
	o.LastModified = lastModified
}

// WithPayload adds the payload to the get dogma effects effect Id o k response
func (o *GetDogmaEffectsEffectIDOK) WithPayload(payload *models.GetDogmaEffectsEffectIDOKBody) *GetDogmaEffectsEffectIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get dogma effects effect Id o k response
func (o *GetDogmaEffectsEffectIDOK) SetPayload(payload *models.GetDogmaEffectsEffectIDOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDogmaEffectsEffectIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Cache-Control

	cacheControl := o.CacheControl
	if cacheControl != "" {
		rw.Header().Set("Cache-Control", cacheControl)
	}

	// response header Expires

	expires := o.Expires
	if expires != "" {
		rw.Header().Set("Expires", expires)
	}

	// response header Last-Modified

	lastModified := o.LastModified
	if lastModified != "" {
		rw.Header().Set("Last-Modified", lastModified)
	}

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDogmaEffectsEffectIDNotFoundCode is the HTTP code returned for type GetDogmaEffectsEffectIDNotFound
const GetDogmaEffectsEffectIDNotFoundCode int = 404

/*GetDogmaEffectsEffectIDNotFound Dogma effect not found

swagger:response getDogmaEffectsEffectIdNotFound
*/
type GetDogmaEffectsEffectIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.GetDogmaEffectsEffectIDNotFoundBody `json:"body,omitempty"`
}

// NewGetDogmaEffectsEffectIDNotFound creates GetDogmaEffectsEffectIDNotFound with default headers values
func NewGetDogmaEffectsEffectIDNotFound() *GetDogmaEffectsEffectIDNotFound {
	return &GetDogmaEffectsEffectIDNotFound{}
}

// WithPayload adds the payload to the get dogma effects effect Id not found response
func (o *GetDogmaEffectsEffectIDNotFound) WithPayload(payload *models.GetDogmaEffectsEffectIDNotFoundBody) *GetDogmaEffectsEffectIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get dogma effects effect Id not found response
func (o *GetDogmaEffectsEffectIDNotFound) SetPayload(payload *models.GetDogmaEffectsEffectIDNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDogmaEffectsEffectIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDogmaEffectsEffectIDInternalServerErrorCode is the HTTP code returned for type GetDogmaEffectsEffectIDInternalServerError
const GetDogmaEffectsEffectIDInternalServerErrorCode int = 500

/*GetDogmaEffectsEffectIDInternalServerError Internal server error

swagger:response getDogmaEffectsEffectIdInternalServerError
*/
type GetDogmaEffectsEffectIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.GetDogmaEffectsEffectIDInternalServerErrorBody `json:"body,omitempty"`
}

// NewGetDogmaEffectsEffectIDInternalServerError creates GetDogmaEffectsEffectIDInternalServerError with default headers values
func NewGetDogmaEffectsEffectIDInternalServerError() *GetDogmaEffectsEffectIDInternalServerError {
	return &GetDogmaEffectsEffectIDInternalServerError{}
}

// WithPayload adds the payload to the get dogma effects effect Id internal server error response
func (o *GetDogmaEffectsEffectIDInternalServerError) WithPayload(payload *models.GetDogmaEffectsEffectIDInternalServerErrorBody) *GetDogmaEffectsEffectIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get dogma effects effect Id internal server error response
func (o *GetDogmaEffectsEffectIDInternalServerError) SetPayload(payload *models.GetDogmaEffectsEffectIDInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDogmaEffectsEffectIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
