package wars

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetWarsWarIDKillmailsHandlerFunc turns a function with the right signature into a get wars war id killmails handler
type GetWarsWarIDKillmailsHandlerFunc func(GetWarsWarIDKillmailsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetWarsWarIDKillmailsHandlerFunc) Handle(params GetWarsWarIDKillmailsParams) middleware.Responder {
	return fn(params)
}

// GetWarsWarIDKillmailsHandler interface for that can handle valid get wars war id killmails params
type GetWarsWarIDKillmailsHandler interface {
	Handle(GetWarsWarIDKillmailsParams) middleware.Responder
}

// NewGetWarsWarIDKillmails creates a new http.Handler for the get wars war id killmails operation
func NewGetWarsWarIDKillmails(ctx *middleware.Context, handler GetWarsWarIDKillmailsHandler) *GetWarsWarIDKillmails {
	return &GetWarsWarIDKillmails{Context: ctx, Handler: handler}
}

/*GetWarsWarIDKillmails swagger:route GET /wars/{war_id}/killmails/ Wars getWarsWarIdKillmails

List kills for a war

Return a list of kills related to a war

---

Alternate route: `/v1/wars/{war_id}/killmails/`

Alternate route: `/legacy/wars/{war_id}/killmails/`

Alternate route: `/dev/wars/{war_id}/killmails/`


---

This route is cached for up to 3600 seconds

*/
type GetWarsWarIDKillmails struct {
	Context *middleware.Context
	Handler GetWarsWarIDKillmailsHandler
}

func (o *GetWarsWarIDKillmails) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetWarsWarIDKillmailsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
