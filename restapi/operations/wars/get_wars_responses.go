package wars

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/pascaldmier/esi/models"
)

// GetWarsOKCode is the HTTP code returned for type GetWarsOK
const GetWarsOKCode int = 200

/*GetWarsOK A list of war IDs, in decending order by war_id.

swagger:response getWarsOK
*/
type GetWarsOK struct {
	/*The caching mechanism used
	  Required: true
	*/
	CacheControl string `json:"Cache-Control"`
	/*RFC7231 formatted datetime string
	  Required: true
	*/
	Expires string `json:"Expires"`
	/*RFC7231 formatted datetime string
	  Required: true
	*/
	LastModified string `json:"Last-Modified"`

	/*200 ok array
	  Max Items: 2000
	  In: Body
	*/
	Payload []int32 `json:"body,omitempty"`
}

// NewGetWarsOK creates GetWarsOK with default headers values
func NewGetWarsOK() *GetWarsOK {
	return &GetWarsOK{}
}

// WithCacheControl adds the cacheControl to the get wars o k response
func (o *GetWarsOK) WithCacheControl(cacheControl string) *GetWarsOK {
	o.CacheControl = cacheControl
	return o
}

// SetCacheControl sets the cacheControl to the get wars o k response
func (o *GetWarsOK) SetCacheControl(cacheControl string) {
	o.CacheControl = cacheControl
}

// WithExpires adds the expires to the get wars o k response
func (o *GetWarsOK) WithExpires(expires string) *GetWarsOK {
	o.Expires = expires
	return o
}

// SetExpires sets the expires to the get wars o k response
func (o *GetWarsOK) SetExpires(expires string) {
	o.Expires = expires
}

// WithLastModified adds the lastModified to the get wars o k response
func (o *GetWarsOK) WithLastModified(lastModified string) *GetWarsOK {
	o.LastModified = lastModified
	return o
}

// SetLastModified sets the lastModified to the get wars o k response
func (o *GetWarsOK) SetLastModified(lastModified string) {
	o.LastModified = lastModified
}

// WithPayload adds the payload to the get wars o k response
func (o *GetWarsOK) WithPayload(payload []int32) *GetWarsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get wars o k response
func (o *GetWarsOK) SetPayload(payload []int32) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWarsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Cache-Control

	cacheControl := o.CacheControl
	if cacheControl != "" {
		rw.Header().Set("Cache-Control", cacheControl)
	}

	// response header Expires

	expires := o.Expires
	if expires != "" {
		rw.Header().Set("Expires", expires)
	}

	// response header Last-Modified

	lastModified := o.LastModified
	if lastModified != "" {
		rw.Header().Set("Last-Modified", lastModified)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]int32, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// GetWarsInternalServerErrorCode is the HTTP code returned for type GetWarsInternalServerError
const GetWarsInternalServerErrorCode int = 500

/*GetWarsInternalServerError Internal server error

swagger:response getWarsInternalServerError
*/
type GetWarsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.GetWarsInternalServerErrorBody `json:"body,omitempty"`
}

// NewGetWarsInternalServerError creates GetWarsInternalServerError with default headers values
func NewGetWarsInternalServerError() *GetWarsInternalServerError {
	return &GetWarsInternalServerError{}
}

// WithPayload adds the payload to the get wars internal server error response
func (o *GetWarsInternalServerError) WithPayload(payload *models.GetWarsInternalServerErrorBody) *GetWarsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get wars internal server error response
func (o *GetWarsInternalServerError) SetPayload(payload *models.GetWarsInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetWarsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
