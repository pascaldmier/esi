package wars

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetWarsWarIDHandlerFunc turns a function with the right signature into a get wars war id handler
type GetWarsWarIDHandlerFunc func(GetWarsWarIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetWarsWarIDHandlerFunc) Handle(params GetWarsWarIDParams) middleware.Responder {
	return fn(params)
}

// GetWarsWarIDHandler interface for that can handle valid get wars war id params
type GetWarsWarIDHandler interface {
	Handle(GetWarsWarIDParams) middleware.Responder
}

// NewGetWarsWarID creates a new http.Handler for the get wars war id operation
func NewGetWarsWarID(ctx *middleware.Context, handler GetWarsWarIDHandler) *GetWarsWarID {
	return &GetWarsWarID{Context: ctx, Handler: handler}
}

/*GetWarsWarID swagger:route GET /wars/{war_id}/ Wars getWarsWarId

Get war information

Return details about a war

---

Alternate route: `/v1/wars/{war_id}/`

Alternate route: `/legacy/wars/{war_id}/`

Alternate route: `/dev/wars/{war_id}/`


---

This route is cached for up to 3600 seconds

*/
type GetWarsWarID struct {
	Context *middleware.Context
	Handler GetWarsWarIDHandler
}

func (o *GetWarsWarID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetWarsWarIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
