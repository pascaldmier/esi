package fleets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostFleetsFleetIDWingsWingIDSquadsHandlerFunc turns a function with the right signature into a post fleets fleet id wings wing id squads handler
type PostFleetsFleetIDWingsWingIDSquadsHandlerFunc func(PostFleetsFleetIDWingsWingIDSquadsParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostFleetsFleetIDWingsWingIDSquadsHandlerFunc) Handle(params PostFleetsFleetIDWingsWingIDSquadsParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostFleetsFleetIDWingsWingIDSquadsHandler interface for that can handle valid post fleets fleet id wings wing id squads params
type PostFleetsFleetIDWingsWingIDSquadsHandler interface {
	Handle(PostFleetsFleetIDWingsWingIDSquadsParams, interface{}) middleware.Responder
}

// NewPostFleetsFleetIDWingsWingIDSquads creates a new http.Handler for the post fleets fleet id wings wing id squads operation
func NewPostFleetsFleetIDWingsWingIDSquads(ctx *middleware.Context, handler PostFleetsFleetIDWingsWingIDSquadsHandler) *PostFleetsFleetIDWingsWingIDSquads {
	return &PostFleetsFleetIDWingsWingIDSquads{Context: ctx, Handler: handler}
}

/*PostFleetsFleetIDWingsWingIDSquads swagger:route POST /fleets/{fleet_id}/wings/{wing_id}/squads/ Fleets postFleetsFleetIdWingsWingIdSquads

Create fleet squad

Create a new squad in a fleet

---

Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/squads/`

Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/`

Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/squads/`


*/
type PostFleetsFleetIDWingsWingIDSquads struct {
	Context *middleware.Context
	Handler PostFleetsFleetIDWingsWingIDSquadsHandler
}

func (o *PostFleetsFleetIDWingsWingIDSquads) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostFleetsFleetIDWingsWingIDSquadsParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
