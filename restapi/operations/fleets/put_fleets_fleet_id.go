package fleets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutFleetsFleetIDHandlerFunc turns a function with the right signature into a put fleets fleet id handler
type PutFleetsFleetIDHandlerFunc func(PutFleetsFleetIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PutFleetsFleetIDHandlerFunc) Handle(params PutFleetsFleetIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PutFleetsFleetIDHandler interface for that can handle valid put fleets fleet id params
type PutFleetsFleetIDHandler interface {
	Handle(PutFleetsFleetIDParams, interface{}) middleware.Responder
}

// NewPutFleetsFleetID creates a new http.Handler for the put fleets fleet id operation
func NewPutFleetsFleetID(ctx *middleware.Context, handler PutFleetsFleetIDHandler) *PutFleetsFleetID {
	return &PutFleetsFleetID{Context: ctx, Handler: handler}
}

/*PutFleetsFleetID swagger:route PUT /fleets/{fleet_id}/ Fleets putFleetsFleetId

Update fleet

Update settings about a fleet

---

Alternate route: `/v1/fleets/{fleet_id}/`

Alternate route: `/legacy/fleets/{fleet_id}/`

Alternate route: `/dev/fleets/{fleet_id}/`


*/
type PutFleetsFleetID struct {
	Context *middleware.Context
	Handler PutFleetsFleetIDHandler
}

func (o *PutFleetsFleetID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPutFleetsFleetIDParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
