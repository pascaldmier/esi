package fleets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutFleetsFleetIDWingsWingIDHandlerFunc turns a function with the right signature into a put fleets fleet id wings wing id handler
type PutFleetsFleetIDWingsWingIDHandlerFunc func(PutFleetsFleetIDWingsWingIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PutFleetsFleetIDWingsWingIDHandlerFunc) Handle(params PutFleetsFleetIDWingsWingIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PutFleetsFleetIDWingsWingIDHandler interface for that can handle valid put fleets fleet id wings wing id params
type PutFleetsFleetIDWingsWingIDHandler interface {
	Handle(PutFleetsFleetIDWingsWingIDParams, interface{}) middleware.Responder
}

// NewPutFleetsFleetIDWingsWingID creates a new http.Handler for the put fleets fleet id wings wing id operation
func NewPutFleetsFleetIDWingsWingID(ctx *middleware.Context, handler PutFleetsFleetIDWingsWingIDHandler) *PutFleetsFleetIDWingsWingID {
	return &PutFleetsFleetIDWingsWingID{Context: ctx, Handler: handler}
}

/*PutFleetsFleetIDWingsWingID swagger:route PUT /fleets/{fleet_id}/wings/{wing_id}/ Fleets putFleetsFleetIdWingsWingId

Rename fleet wing

Rename a fleet wing

---

Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/`

Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/`

Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/`


*/
type PutFleetsFleetIDWingsWingID struct {
	Context *middleware.Context
	Handler PutFleetsFleetIDWingsWingIDHandler
}

func (o *PutFleetsFleetIDWingsWingID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPutFleetsFleetIDWingsWingIDParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
