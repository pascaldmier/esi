package fleets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetFleetsFleetIDHandlerFunc turns a function with the right signature into a get fleets fleet id handler
type GetFleetsFleetIDHandlerFunc func(GetFleetsFleetIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetFleetsFleetIDHandlerFunc) Handle(params GetFleetsFleetIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetFleetsFleetIDHandler interface for that can handle valid get fleets fleet id params
type GetFleetsFleetIDHandler interface {
	Handle(GetFleetsFleetIDParams, interface{}) middleware.Responder
}

// NewGetFleetsFleetID creates a new http.Handler for the get fleets fleet id operation
func NewGetFleetsFleetID(ctx *middleware.Context, handler GetFleetsFleetIDHandler) *GetFleetsFleetID {
	return &GetFleetsFleetID{Context: ctx, Handler: handler}
}

/*GetFleetsFleetID swagger:route GET /fleets/{fleet_id}/ Fleets getFleetsFleetId

Get fleet information

Return details about a fleet

---

Alternate route: `/v1/fleets/{fleet_id}/`

Alternate route: `/legacy/fleets/{fleet_id}/`

Alternate route: `/dev/fleets/{fleet_id}/`


---

This route is cached for up to 5 seconds

*/
type GetFleetsFleetID struct {
	Context *middleware.Context
	Handler GetFleetsFleetIDHandler
}

func (o *GetFleetsFleetID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetFleetsFleetIDParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
