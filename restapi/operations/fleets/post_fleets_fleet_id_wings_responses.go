package fleets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/pascaldmier/esi/models"
)

// PostFleetsFleetIDWingsCreatedCode is the HTTP code returned for type PostFleetsFleetIDWingsCreated
const PostFleetsFleetIDWingsCreatedCode int = 201

/*PostFleetsFleetIDWingsCreated Wing created

swagger:response postFleetsFleetIdWingsCreated
*/
type PostFleetsFleetIDWingsCreated struct {

	/*
	  In: Body
	*/
	Payload *models.PostFleetsFleetIDWingsCreatedBody `json:"body,omitempty"`
}

// NewPostFleetsFleetIDWingsCreated creates PostFleetsFleetIDWingsCreated with default headers values
func NewPostFleetsFleetIDWingsCreated() *PostFleetsFleetIDWingsCreated {
	return &PostFleetsFleetIDWingsCreated{}
}

// WithPayload adds the payload to the post fleets fleet Id wings created response
func (o *PostFleetsFleetIDWingsCreated) WithPayload(payload *models.PostFleetsFleetIDWingsCreatedBody) *PostFleetsFleetIDWingsCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post fleets fleet Id wings created response
func (o *PostFleetsFleetIDWingsCreated) SetPayload(payload *models.PostFleetsFleetIDWingsCreatedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostFleetsFleetIDWingsCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostFleetsFleetIDWingsForbiddenCode is the HTTP code returned for type PostFleetsFleetIDWingsForbidden
const PostFleetsFleetIDWingsForbiddenCode int = 403

/*PostFleetsFleetIDWingsForbidden Forbidden

swagger:response postFleetsFleetIdWingsForbidden
*/
type PostFleetsFleetIDWingsForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.PostFleetsFleetIDWingsForbiddenBody `json:"body,omitempty"`
}

// NewPostFleetsFleetIDWingsForbidden creates PostFleetsFleetIDWingsForbidden with default headers values
func NewPostFleetsFleetIDWingsForbidden() *PostFleetsFleetIDWingsForbidden {
	return &PostFleetsFleetIDWingsForbidden{}
}

// WithPayload adds the payload to the post fleets fleet Id wings forbidden response
func (o *PostFleetsFleetIDWingsForbidden) WithPayload(payload *models.PostFleetsFleetIDWingsForbiddenBody) *PostFleetsFleetIDWingsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post fleets fleet Id wings forbidden response
func (o *PostFleetsFleetIDWingsForbidden) SetPayload(payload *models.PostFleetsFleetIDWingsForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostFleetsFleetIDWingsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostFleetsFleetIDWingsNotFoundCode is the HTTP code returned for type PostFleetsFleetIDWingsNotFound
const PostFleetsFleetIDWingsNotFoundCode int = 404

/*PostFleetsFleetIDWingsNotFound The fleet does not exist or you don't have access to it

swagger:response postFleetsFleetIdWingsNotFound
*/
type PostFleetsFleetIDWingsNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.PostFleetsFleetIDWingsNotFoundBody `json:"body,omitempty"`
}

// NewPostFleetsFleetIDWingsNotFound creates PostFleetsFleetIDWingsNotFound with default headers values
func NewPostFleetsFleetIDWingsNotFound() *PostFleetsFleetIDWingsNotFound {
	return &PostFleetsFleetIDWingsNotFound{}
}

// WithPayload adds the payload to the post fleets fleet Id wings not found response
func (o *PostFleetsFleetIDWingsNotFound) WithPayload(payload *models.PostFleetsFleetIDWingsNotFoundBody) *PostFleetsFleetIDWingsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post fleets fleet Id wings not found response
func (o *PostFleetsFleetIDWingsNotFound) SetPayload(payload *models.PostFleetsFleetIDWingsNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostFleetsFleetIDWingsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostFleetsFleetIDWingsInternalServerErrorCode is the HTTP code returned for type PostFleetsFleetIDWingsInternalServerError
const PostFleetsFleetIDWingsInternalServerErrorCode int = 500

/*PostFleetsFleetIDWingsInternalServerError Internal server error

swagger:response postFleetsFleetIdWingsInternalServerError
*/
type PostFleetsFleetIDWingsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.PostFleetsFleetIDWingsInternalServerErrorBody `json:"body,omitempty"`
}

// NewPostFleetsFleetIDWingsInternalServerError creates PostFleetsFleetIDWingsInternalServerError with default headers values
func NewPostFleetsFleetIDWingsInternalServerError() *PostFleetsFleetIDWingsInternalServerError {
	return &PostFleetsFleetIDWingsInternalServerError{}
}

// WithPayload adds the payload to the post fleets fleet Id wings internal server error response
func (o *PostFleetsFleetIDWingsInternalServerError) WithPayload(payload *models.PostFleetsFleetIDWingsInternalServerErrorBody) *PostFleetsFleetIDWingsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post fleets fleet Id wings internal server error response
func (o *PostFleetsFleetIDWingsInternalServerError) SetPayload(payload *models.PostFleetsFleetIDWingsInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostFleetsFleetIDWingsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
