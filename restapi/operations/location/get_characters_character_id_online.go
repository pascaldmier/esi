package location

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetCharactersCharacterIDOnlineHandlerFunc turns a function with the right signature into a get characters character id online handler
type GetCharactersCharacterIDOnlineHandlerFunc func(GetCharactersCharacterIDOnlineParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCharactersCharacterIDOnlineHandlerFunc) Handle(params GetCharactersCharacterIDOnlineParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetCharactersCharacterIDOnlineHandler interface for that can handle valid get characters character id online params
type GetCharactersCharacterIDOnlineHandler interface {
	Handle(GetCharactersCharacterIDOnlineParams, interface{}) middleware.Responder
}

// NewGetCharactersCharacterIDOnline creates a new http.Handler for the get characters character id online operation
func NewGetCharactersCharacterIDOnline(ctx *middleware.Context, handler GetCharactersCharacterIDOnlineHandler) *GetCharactersCharacterIDOnline {
	return &GetCharactersCharacterIDOnline{Context: ctx, Handler: handler}
}

/*GetCharactersCharacterIDOnline swagger:route GET /characters/{character_id}/online/ Location getCharactersCharacterIdOnline

Get character online

Checks if the character is currently online

---

Alternate route: `/v1/characters/{character_id}/online/`

Alternate route: `/legacy/characters/{character_id}/online/`


---

This route is cached for up to 60 seconds

*/
type GetCharactersCharacterIDOnline struct {
	Context *middleware.Context
	Handler GetCharactersCharacterIDOnlineHandler
}

func (o *GetCharactersCharacterIDOnline) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetCharactersCharacterIDOnlineParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
