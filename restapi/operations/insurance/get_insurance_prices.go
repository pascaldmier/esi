package insurance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetInsurancePricesHandlerFunc turns a function with the right signature into a get insurance prices handler
type GetInsurancePricesHandlerFunc func(GetInsurancePricesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetInsurancePricesHandlerFunc) Handle(params GetInsurancePricesParams) middleware.Responder {
	return fn(params)
}

// GetInsurancePricesHandler interface for that can handle valid get insurance prices params
type GetInsurancePricesHandler interface {
	Handle(GetInsurancePricesParams) middleware.Responder
}

// NewGetInsurancePrices creates a new http.Handler for the get insurance prices operation
func NewGetInsurancePrices(ctx *middleware.Context, handler GetInsurancePricesHandler) *GetInsurancePrices {
	return &GetInsurancePrices{Context: ctx, Handler: handler}
}

/*GetInsurancePrices swagger:route GET /insurance/prices/ Insurance getInsurancePrices

List insurance levels

Return available insurance levels for all ship types

---

Alternate route: `/v1/insurance/prices/`

Alternate route: `/legacy/insurance/prices/`

Alternate route: `/dev/insurance/prices/`


---

This route is cached for up to 3600 seconds

*/
type GetInsurancePrices struct {
	Context *middleware.Context
	Handler GetInsurancePricesHandler
}

func (o *GetInsurancePrices) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetInsurancePricesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
