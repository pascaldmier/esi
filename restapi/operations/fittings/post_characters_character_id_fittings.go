package fittings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostCharactersCharacterIDFittingsHandlerFunc turns a function with the right signature into a post characters character id fittings handler
type PostCharactersCharacterIDFittingsHandlerFunc func(PostCharactersCharacterIDFittingsParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostCharactersCharacterIDFittingsHandlerFunc) Handle(params PostCharactersCharacterIDFittingsParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostCharactersCharacterIDFittingsHandler interface for that can handle valid post characters character id fittings params
type PostCharactersCharacterIDFittingsHandler interface {
	Handle(PostCharactersCharacterIDFittingsParams, interface{}) middleware.Responder
}

// NewPostCharactersCharacterIDFittings creates a new http.Handler for the post characters character id fittings operation
func NewPostCharactersCharacterIDFittings(ctx *middleware.Context, handler PostCharactersCharacterIDFittingsHandler) *PostCharactersCharacterIDFittings {
	return &PostCharactersCharacterIDFittings{Context: ctx, Handler: handler}
}

/*PostCharactersCharacterIDFittings swagger:route POST /characters/{character_id}/fittings/ Fittings postCharactersCharacterIdFittings

Create fitting

Save a new fitting for a character

---

Alternate route: `/v1/characters/{character_id}/fittings/`

Alternate route: `/legacy/characters/{character_id}/fittings/`

Alternate route: `/dev/characters/{character_id}/fittings/`


*/
type PostCharactersCharacterIDFittings struct {
	Context *middleware.Context
	Handler PostCharactersCharacterIDFittingsHandler
}

func (o *PostCharactersCharacterIDFittings) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostCharactersCharacterIDFittingsParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
