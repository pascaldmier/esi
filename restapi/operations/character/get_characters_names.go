package character

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetCharactersNamesHandlerFunc turns a function with the right signature into a get characters names handler
type GetCharactersNamesHandlerFunc func(GetCharactersNamesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCharactersNamesHandlerFunc) Handle(params GetCharactersNamesParams) middleware.Responder {
	return fn(params)
}

// GetCharactersNamesHandler interface for that can handle valid get characters names params
type GetCharactersNamesHandler interface {
	Handle(GetCharactersNamesParams) middleware.Responder
}

// NewGetCharactersNames creates a new http.Handler for the get characters names operation
func NewGetCharactersNames(ctx *middleware.Context, handler GetCharactersNamesHandler) *GetCharactersNames {
	return &GetCharactersNames{Context: ctx, Handler: handler}
}

/*GetCharactersNames swagger:route GET /characters/names/ Character getCharactersNames

Get character names

Resolve a set of character IDs to character names

---

Alternate route: `/v1/characters/names/`

Alternate route: `/legacy/characters/names/`

Alternate route: `/dev/characters/names/`


---

This route is cached for up to 3600 seconds

*/
type GetCharactersNames struct {
	Context *middleware.Context
	Handler GetCharactersNamesHandler
}

func (o *GetCharactersNames) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetCharactersNamesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
