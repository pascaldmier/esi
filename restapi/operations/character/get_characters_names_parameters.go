package character

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCharactersNamesParams creates a new GetCharactersNamesParams object
// with the default values initialized.
func NewGetCharactersNamesParams() GetCharactersNamesParams {
	var (
		datasourceDefault = string("tranquility")
	)
	return GetCharactersNamesParams{
		Datasource: &datasourceDefault,
	}
}

// GetCharactersNamesParams contains all the bound params for the get characters names operation
// typically these are obtained from a http.Request
//
// swagger:parameters get_characters_names
type GetCharactersNamesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*Client identifier, takes precedence over User-Agent
	  In: header
	*/
	XUserAgent *string
	/*A comma separated list of character IDs
	  Required: true
	  Max Items: 1000
	  Min Items: 1
	  In: query
	*/
	CharacterIds []int64
	/*The server name you would like data from
	  In: query
	  Default: "tranquility"
	*/
	Datasource *string
	/*Client identifier, takes precedence over headers
	  In: query
	*/
	UserAgent *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetCharactersNamesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := o.bindXUserAgent(r.Header[http.CanonicalHeaderKey("X-User-Agent")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	qCharacterIds, qhkCharacterIds, _ := qs.GetOK("character_ids")
	if err := o.bindCharacterIds(qCharacterIds, qhkCharacterIds, route.Formats); err != nil {
		res = append(res, err)
	}

	qDatasource, qhkDatasource, _ := qs.GetOK("datasource")
	if err := o.bindDatasource(qDatasource, qhkDatasource, route.Formats); err != nil {
		res = append(res, err)
	}

	qUserAgent, qhkUserAgent, _ := qs.GetOK("user_agent")
	if err := o.bindUserAgent(qUserAgent, qhkUserAgent, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCharactersNamesParams) bindXUserAgent(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.XUserAgent = &raw

	return nil
}

func (o *GetCharactersNamesParams) bindCharacterIds(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("character_ids", "query")
	}

	var qvCharacterIds string
	if len(rawData) > 0 {
		qvCharacterIds = rawData[len(rawData)-1]
	}

	characterIdsIC := swag.SplitByFormat(qvCharacterIds, "")

	if len(characterIdsIC) == 0 {
		return errors.Required("character_ids", "query")
	}

	var characterIdsIR []int64
	for i, characterIdsIV := range characterIdsIC {
		characterIdsI, err := swag.ConvertInt64(characterIdsIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "character_ids", i), "query", "int64", characterIdsI)
		}

		characterIdsIR = append(characterIdsIR, characterIdsI)
	}

	o.CharacterIds = characterIdsIR
	if err := o.validateCharacterIds(formats); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersNamesParams) validateCharacterIds(formats strfmt.Registry) error {

	characterIdsSize := int64(len(o.CharacterIds))

	if err := validate.MinItems("character_ids", "query", characterIdsSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("character_ids", "query", characterIdsSize, 1000); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersNamesParams) bindDatasource(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		var datasourceDefault string = string("tranquility")
		o.Datasource = &datasourceDefault
		return nil
	}

	o.Datasource = &raw

	if err := o.validateDatasource(formats); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersNamesParams) validateDatasource(formats strfmt.Registry) error {

	if err := validate.Enum("datasource", "query", *o.Datasource, []interface{}{"tranquility", "singularity"}); err != nil {
		return err
	}

	return nil
}

func (o *GetCharactersNamesParams) bindUserAgent(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.UserAgent = &raw

	return nil
}
