package character

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetCharactersCharacterIDCorporationhistoryHandlerFunc turns a function with the right signature into a get characters character id corporationhistory handler
type GetCharactersCharacterIDCorporationhistoryHandlerFunc func(GetCharactersCharacterIDCorporationhistoryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetCharactersCharacterIDCorporationhistoryHandlerFunc) Handle(params GetCharactersCharacterIDCorporationhistoryParams) middleware.Responder {
	return fn(params)
}

// GetCharactersCharacterIDCorporationhistoryHandler interface for that can handle valid get characters character id corporationhistory params
type GetCharactersCharacterIDCorporationhistoryHandler interface {
	Handle(GetCharactersCharacterIDCorporationhistoryParams) middleware.Responder
}

// NewGetCharactersCharacterIDCorporationhistory creates a new http.Handler for the get characters character id corporationhistory operation
func NewGetCharactersCharacterIDCorporationhistory(ctx *middleware.Context, handler GetCharactersCharacterIDCorporationhistoryHandler) *GetCharactersCharacterIDCorporationhistory {
	return &GetCharactersCharacterIDCorporationhistory{Context: ctx, Handler: handler}
}

/*GetCharactersCharacterIDCorporationhistory swagger:route GET /characters/{character_id}/corporationhistory/ Character getCharactersCharacterIdCorporationhistory

Get corporation history

Get a list of all the corporations a character has been a member of

---

Alternate route: `/v1/characters/{character_id}/corporationhistory/`

Alternate route: `/legacy/characters/{character_id}/corporationhistory/`

Alternate route: `/dev/characters/{character_id}/corporationhistory/`


---

This route is cached for up to 3600 seconds

*/
type GetCharactersCharacterIDCorporationhistory struct {
	Context *middleware.Context
	Handler GetCharactersCharacterIDCorporationhistoryHandler
}

func (o *GetCharactersCharacterIDCorporationhistory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetCharactersCharacterIDCorporationhistoryParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
