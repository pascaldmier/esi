package loyalty

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetLoyaltyStoresCorporationIDOffersHandlerFunc turns a function with the right signature into a get loyalty stores corporation id offers handler
type GetLoyaltyStoresCorporationIDOffersHandlerFunc func(GetLoyaltyStoresCorporationIDOffersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetLoyaltyStoresCorporationIDOffersHandlerFunc) Handle(params GetLoyaltyStoresCorporationIDOffersParams) middleware.Responder {
	return fn(params)
}

// GetLoyaltyStoresCorporationIDOffersHandler interface for that can handle valid get loyalty stores corporation id offers params
type GetLoyaltyStoresCorporationIDOffersHandler interface {
	Handle(GetLoyaltyStoresCorporationIDOffersParams) middleware.Responder
}

// NewGetLoyaltyStoresCorporationIDOffers creates a new http.Handler for the get loyalty stores corporation id offers operation
func NewGetLoyaltyStoresCorporationIDOffers(ctx *middleware.Context, handler GetLoyaltyStoresCorporationIDOffersHandler) *GetLoyaltyStoresCorporationIDOffers {
	return &GetLoyaltyStoresCorporationIDOffers{Context: ctx, Handler: handler}
}

/*GetLoyaltyStoresCorporationIDOffers swagger:route GET /loyalty/stores/{corporation_id}/offers/ Loyalty getLoyaltyStoresCorporationIdOffers

List loyalty store offers

Return a list of offers from a specific corporation's loyalty store

---

Alternate route: `/v1/loyalty/stores/{corporation_id}/offers/`

Alternate route: `/legacy/loyalty/stores/{corporation_id}/offers/`

Alternate route: `/dev/loyalty/stores/{corporation_id}/offers/`


---

This route expires daily at 11:05

*/
type GetLoyaltyStoresCorporationIDOffers struct {
	Context *middleware.Context
	Handler GetLoyaltyStoresCorporationIDOffersHandler
}

func (o *GetLoyaltyStoresCorporationIDOffers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetLoyaltyStoresCorporationIDOffersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
